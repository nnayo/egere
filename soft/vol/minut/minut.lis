
minut.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00003660  000036f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000471  00800184  00800184  00003778  2**0
                  ALLOC
  3 .stab         00008c64  00000000  00000000  00003778  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000044d8  00000000  00000000  0000c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000108b4  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__vector_9>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__vector_14>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__vector_16>
      44:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__vector_17>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__vector_22>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__vector_24>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 0a       	sbc	r0, r28
      6a:	de 08       	sbc	r13, r14
      6c:	e8 08       	sbc	r14, r8
      6e:	f0 08       	sbc	r15, r0
      70:	ff 08       	sbc	r15, r15
      72:	29 09       	sbc	r18, r9
      74:	07 0a       	sbc	r0, r23
      76:	19 0a       	sbc	r1, r25
      78:	19 0a       	sbc	r1, r25
      7a:	35 09       	sbc	r19, r5
      7c:	4e 09       	sbc	r20, r14
      7e:	67 0c       	add	r6, r7
      80:	6c 0c       	add	r6, r12
      82:	7c 0c       	add	r7, r12
      84:	8c 0c       	add	r8, r12
      86:	9c 0c       	add	r9, r12
      88:	ac 0c       	add	r10, r12
      8a:	ac 0c       	add	r10, r12
      8c:	ac 0c       	add	r10, r12
      8e:	ac 0c       	add	r10, r12
      90:	b0 0d       	add	r27, r0
      92:	ec 0d       	add	r30, r12
      94:	b9 0d       	add	r27, r9
      96:	ec 0d       	add	r30, r12
      98:	b9 0d       	add	r27, r9
      9a:	d2 0d       	add	r29, r2
      9c:	de 0d       	add	r29, r14
      9e:	c9 0d       	add	r28, r9
      a0:	cf 0d       	add	r28, r15
      a2:	d2 0d       	add	r29, r2
      a4:	de 0d       	add	r29, r14

000000a6 <status_action.1506>:
      a6:	6d 15 a0 14 a0 14 a5 14 bc 14 bd 14 be 14 c2 14     m...............
      b6:	c3 14 c4 14 c8 14 dd 14 16 15 16 15 1a 15 1a 15     ................
      c6:	20 15 21 15 33 15 51 15 63 15 f1 14 f1 14 f6 14      .!.3.Q.c.......
      d6:	12 15 12 15                                         ....

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e0 e6       	ldi	r30, 0x60	; 96
      ee:	f6 e3       	ldi	r31, 0x36	; 54
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a4 38       	cpi	r26, 0x84	; 132
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	15 e0       	ldi	r17, 0x05	; 5
      fe:	a4 e8       	ldi	r26, 0x84	; 132
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a5 3f       	cpi	r26, 0xF5	; 245
     108:	b1 07       	cpc	r27, r17
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 2f 1a 	call	0x345e	; 0x345e <main>
     110:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <time>:
static void time(void* misc)
{
	(void)misc;

	// time update
	TIME_incr();
     118:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <TIME_incr>
     11c:	08 95       	ret

0000011e <time_adjust>:
}


static u32 time_adjust(void)
{
     11e:	cf 93       	push	r28
	u8 val;
	u32 incr;

	val = TMR2_get_value();
     120:	0e 94 68 14 	call	0x28d0	; 0x28d0 <TMR2_get_value>
     124:	c8 2f       	mov	r28, r24
	incr = TIME_get_incr();
     126:	0e 94 d5 17 	call	0x2faa	; 0x2faa <TIME_get_incr>
     12a:	9b 01       	movw	r18, r22
     12c:	ac 01       	movw	r20, r24

	return incr * val / TIMER2_TOP_VALUE;
     12e:	ac 2f       	mov	r26, r28
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	0e 94 6f 1a 	call	0x34de	; 0x34de <__muluhisi3>
     136:	2e e4       	ldi	r18, 0x4E	; 78
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	0e 94 8e 1a 	call	0x351c	; 0x351c <__udivmodsi4>
}
     142:	b9 01       	movw	r22, r18
     144:	ca 01       	movw	r24, r20
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <cone_closing_action>:
	PT_END(pt);
}


static u8 cone_closing_action(pt_t* pt, void* args)
{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	ec 01       	movw	r28, r24
	PT_BEGIN(pt);
     150:	e8 81       	ld	r30, Y
     152:	f9 81       	ldd	r31, Y+1	; 0x01
     154:	30 97       	sbiw	r30, 0x00	; 0
     156:	09 f0       	breq	.+2      	; 0x15a <cone_closing_action+0x10>
     158:	09 94       	ijmp

	// time-out 5s
	MNT.time_out = TIME_get() + 5 * TIME_1_SEC;
     15a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     15e:	60 5b       	subi	r22, 0xB0	; 176
     160:	7c 43       	sbci	r23, 0x3C	; 60
     162:	8f 4f       	sbci	r24, 0xFF	; 255
     164:	9f 4f       	sbci	r25, 0xFF	; 255
     166:	60 93 b0 04 	sts	0x04B0, r22
     16a:	70 93 b1 04 	sts	0x04B1, r23
     16e:	80 93 b2 04 	sts	0x04B2, r24
     172:	90 93 b3 04 	sts	0x04B3, r25

	PT_END(pt);
     176:	19 82       	std	Y+1, r1	; 0x01
     178:	18 82       	st	Y, r1
}
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <parachute_action>:
	PT_END(pt);
}


static u8 parachute_action(pt_t* pt, void* args)
{
     182:	cf 92       	push	r12
     184:	df 92       	push	r13
     186:	ef 92       	push	r14
     188:	0f 93       	push	r16
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	2b 97       	sbiw	r28, 0x0b	; 11
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);
     1a0:	dc 01       	movw	r26, r24
     1a2:	ed 91       	ld	r30, X+
     1a4:	fc 91       	ld	r31, X
     1a6:	30 97       	sbiw	r30, 0x00	; 0
     1a8:	09 f0       	breq	.+2      	; 0x1ac <parachute_action+0x2a>
     1aa:	09 94       	ijmp

	// cmde cone stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0x0f)
     1ac:	86 ed       	ldi	r24, 0xD6	; 214
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	f6 01       	movw	r30, r12
     1b2:	91 83       	std	Z+1, r25	; 0x01
     1b4:	80 83       	st	Z, r24
     1b6:	9f e0       	ldi	r25, 0x0F	; 15
     1b8:	e9 2e       	mov	r14, r25
     1ba:	0a ea       	ldi	r16, 0xAA	; 170
     1bc:	27 e1       	ldi	r18, 0x17	; 23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     1ca:	81 11       	cpse	r24, r1
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <parachute_action+0x50>
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	27 c0       	rjmp	.+78     	; 0x220 <parachute_action+0x9e>
     1d2:	be 01       	movw	r22, r28
     1d4:	6f 5f       	subi	r22, 0xFF	; 255
     1d6:	7f 4f       	sbci	r23, 0xFF	; 255
     1d8:	8f e0       	ldi	r24, 0x0F	; 15
     1da:	95 e0       	ldi	r25, 0x05	; 5
     1dc:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	a9 f7       	brne	.-22     	; 0x1ce <parachute_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// cmde aero stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0x55, 0x0f)
     1e4:	82 ef       	ldi	r24, 0xF2	; 242
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	d6 01       	movw	r26, r12
     1ea:	8d 93       	st	X+, r24
     1ec:	9c 93       	st	X, r25
     1ee:	8f e0       	ldi	r24, 0x0F	; 15
     1f0:	e8 2e       	mov	r14, r24
     1f2:	05 e5       	ldi	r16, 0x55	; 85
     1f4:	27 e1       	ldi	r18, 0x17	; 23
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	61 e0       	ldi	r22, 0x01	; 1
     1fa:	ce 01       	movw	r24, r28
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     202:	88 23       	and	r24, r24
     204:	21 f3       	breq	.-56     	; 0x1ce <parachute_action+0x4c>
     206:	be 01       	movw	r22, r28
     208:	6f 5f       	subi	r22, 0xFF	; 255
     20a:	7f 4f       	sbci	r23, 0xFF	; 255
     20c:	8f e0       	ldi	r24, 0x0F	; 15
     20e:	95 e0       	ldi	r25, 0x05	; 5
     210:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	d9 f6       	brne	.-74     	; 0x1ce <parachute_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);


	PT_END(pt);
     218:	f6 01       	movw	r30, r12
     21a:	11 82       	std	Z+1, r1	; 0x01
     21c:	10 82       	st	Z, r1
     21e:	83 e0       	ldi	r24, 0x03	; 3
}
     220:	2b 96       	adiw	r28, 0x0b	; 11
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	0f 91       	pop	r16
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	08 95       	ret

0000023a <braking_action>:
	PT_END(pt);
}


static u8 braking_action(pt_t* pt, void* args)
{
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	0f 93       	push	r16
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	2b 97       	sbiw	r28, 0x0b	; 11
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);
     258:	dc 01       	movw	r26, r24
     25a:	ed 91       	ld	r30, X+
     25c:	fc 91       	ld	r31, X
     25e:	30 97       	sbiw	r30, 0x00	; 0
     260:	09 f0       	breq	.+2      	; 0x264 <braking_action+0x2a>
     262:	09 94       	ijmp

	// cmde cone stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0x0f)
     264:	82 e3       	ldi	r24, 0x32	; 50
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	f6 01       	movw	r30, r12
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
     26e:	3f e0       	ldi	r19, 0x0F	; 15
     270:	e3 2e       	mov	r14, r19
     272:	0a ea       	ldi	r16, 0xAA	; 170
     274:	27 e1       	ldi	r18, 0x17	; 23
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	ce 01       	movw	r24, r28
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     282:	81 11       	cpse	r24, r1
     284:	02 c0       	rjmp	.+4      	; 0x28a <braking_action+0x50>
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	35 c0       	rjmp	.+106    	; 0x2f4 <braking_action+0xba>
     28a:	be 01       	movw	r22, r28
     28c:	6f 5f       	subi	r22, 0xFF	; 255
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
     290:	8f e0       	ldi	r24, 0x0F	; 15
     292:	95 e0       	ldi	r25, 0x05	; 5
     294:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	a9 f7       	brne	.-22     	; 0x286 <braking_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// cmde aero open
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0x55, 0x09)
     29c:	8e e4       	ldi	r24, 0x4E	; 78
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	d6 01       	movw	r26, r12
     2a2:	8d 93       	st	X+, r24
     2a4:	9c 93       	st	X, r25
     2a6:	29 e0       	ldi	r18, 0x09	; 9
     2a8:	e2 2e       	mov	r14, r18
     2aa:	05 e5       	ldi	r16, 0x55	; 85
     2ac:	27 e1       	ldi	r18, 0x17	; 23
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     2ba:	88 23       	and	r24, r24
     2bc:	21 f3       	breq	.-56     	; 0x286 <braking_action+0x4c>
     2be:	be 01       	movw	r22, r28
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	8f e0       	ldi	r24, 0x0F	; 15
     2c6:	95 e0       	ldi	r25, 0x05	; 5
     2c8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	d9 f6       	brne	.-74     	; 0x286 <braking_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// time-out 0.1s
	MNT.time_out = TIME_get() + 100 * TIME_1_MSEC;
     2d0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     2d4:	68 51       	subi	r22, 0x18	; 24
     2d6:	7c 4f       	sbci	r23, 0xFC	; 252
     2d8:	8f 4f       	sbci	r24, 0xFF	; 255
     2da:	9f 4f       	sbci	r25, 0xFF	; 255
     2dc:	60 93 b0 04 	sts	0x04B0, r22
     2e0:	70 93 b1 04 	sts	0x04B1, r23
     2e4:	80 93 b2 04 	sts	0x04B2, r24
     2e8:	90 93 b3 04 	sts	0x04B3, r25

	PT_END(pt);
     2ec:	f6 01       	movw	r30, r12
     2ee:	11 82       	std	Z+1, r1	; 0x01
     2f0:	10 82       	st	Z, r1
     2f2:	83 e0       	ldi	r24, 0x03	; 3
}
     2f4:	2b 96       	adiw	r28, 0x0b	; 11
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	0f 91       	pop	r16
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	08 95       	ret

0000030e <cone_open_action>:
	PT_END(pt);
}


static u8 cone_open_action(pt_t* pt, void* args)
{
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	0f 93       	push	r16
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	2b 97       	sbiw	r28, 0x0b	; 11
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);
     32c:	dc 01       	movw	r26, r24
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	30 97       	sbiw	r30, 0x00	; 0
     334:	09 f0       	breq	.+2      	; 0x338 <cone_open_action+0x2a>
     336:	09 94       	ijmp

	// cmde cone open
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0x09)
     338:	8c e9       	ldi	r24, 0x9C	; 156
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	f6 01       	movw	r30, r12
     33e:	91 83       	std	Z+1, r25	; 0x01
     340:	80 83       	st	Z, r24
     342:	59 e0       	ldi	r21, 0x09	; 9
     344:	e5 2e       	mov	r14, r21
     346:	0a ea       	ldi	r16, 0xAA	; 170
     348:	27 e1       	ldi	r18, 0x17	; 23
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	ce 01       	movw	r24, r28
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     356:	81 11       	cpse	r24, r1
     358:	02 c0       	rjmp	.+4      	; 0x35e <cone_open_action+0x50>
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	35 c0       	rjmp	.+106    	; 0x3c8 <cone_open_action+0xba>
     35e:	be 01       	movw	r22, r28
     360:	6f 5f       	subi	r22, 0xFF	; 255
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	8f e0       	ldi	r24, 0x0F	; 15
     366:	95 e0       	ldi	r25, 0x05	; 5
     368:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	a9 f7       	brne	.-22     	; 0x35a <cone_open_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// cmde aero stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0x55, 0x0f)
     370:	88 eb       	ldi	r24, 0xB8	; 184
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	d6 01       	movw	r26, r12
     376:	8d 93       	st	X+, r24
     378:	9c 93       	st	X, r25
     37a:	4f e0       	ldi	r20, 0x0F	; 15
     37c:	e4 2e       	mov	r14, r20
     37e:	05 e5       	ldi	r16, 0x55	; 85
     380:	27 e1       	ldi	r18, 0x17	; 23
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	ce 01       	movw	r24, r28
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     38e:	88 23       	and	r24, r24
     390:	21 f3       	breq	.-56     	; 0x35a <cone_open_action+0x4c>
     392:	be 01       	movw	r22, r28
     394:	6f 5f       	subi	r22, 0xFF	; 255
     396:	7f 4f       	sbci	r23, 0xFF	; 255
     398:	8f e0       	ldi	r24, 0x0F	; 15
     39a:	95 e0       	ldi	r25, 0x05	; 5
     39c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	d9 f6       	brne	.-74     	; 0x35a <cone_open_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// time-out 0.1s
	MNT.time_out = TIME_get() + 100 * TIME_1_MSEC;
     3a4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     3a8:	68 51       	subi	r22, 0x18	; 24
     3aa:	7c 4f       	sbci	r23, 0xFC	; 252
     3ac:	8f 4f       	sbci	r24, 0xFF	; 255
     3ae:	9f 4f       	sbci	r25, 0xFF	; 255
     3b0:	60 93 b0 04 	sts	0x04B0, r22
     3b4:	70 93 b1 04 	sts	0x04B1, r23
     3b8:	80 93 b2 04 	sts	0x04B2, r24
     3bc:	90 93 b3 04 	sts	0x04B3, r25

	PT_END(pt);
     3c0:	f6 01       	movw	r30, r12
     3c2:	11 82       	std	Z+1, r1	; 0x01
     3c4:	10 82       	st	Z, r1
     3c6:	83 e0       	ldi	r24, 0x03	; 3
}
     3c8:	2b 96       	adiw	r28, 0x0b	; 11
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	0f 91       	pop	r16
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	08 95       	ret

000003e2 <flight_action>:
	PT_END(pt);
}


static u8 flight_action(pt_t* pt, void* args)
{
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	0f 93       	push	r16
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	2b 97       	sbiw	r28, 0x0b	; 11
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);
     400:	dc 01       	movw	r26, r24
     402:	ed 91       	ld	r30, X+
     404:	fc 91       	ld	r31, X
     406:	30 97       	sbiw	r30, 0x00	; 0
     408:	09 f0       	breq	.+2      	; 0x40c <flight_action+0x2a>
     40a:	09 94       	ijmp

	// cmde cone close
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0xc1)
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	f6 01       	movw	r30, r12
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	71 ec       	ldi	r23, 0xC1	; 193
     418:	e7 2e       	mov	r14, r23
     41a:	0a ea       	ldi	r16, 0xAA	; 170
     41c:	27 e1       	ldi	r18, 0x17	; 23
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     42a:	81 11       	cpse	r24, r1
     42c:	02 c0       	rjmp	.+4      	; 0x432 <flight_action+0x50>
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	27 c0       	rjmp	.+78     	; 0x480 <flight_action+0x9e>
     432:	be 01       	movw	r22, r28
     434:	6f 5f       	subi	r22, 0xFF	; 255
     436:	7f 4f       	sbci	r23, 0xFF	; 255
     438:	8f e0       	ldi	r24, 0x0F	; 15
     43a:	95 e0       	ldi	r25, 0x05	; 5
     43c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	a9 f7       	brne	.-22     	; 0x42e <flight_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// cmde aero close
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0x55, 0xc1)
     444:	82 e2       	ldi	r24, 0x22	; 34
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	d6 01       	movw	r26, r12
     44a:	8d 93       	st	X+, r24
     44c:	9c 93       	st	X, r25
     44e:	61 ec       	ldi	r22, 0xC1	; 193
     450:	e6 2e       	mov	r14, r22
     452:	05 e5       	ldi	r16, 0x55	; 85
     454:	27 e1       	ldi	r18, 0x17	; 23
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     462:	88 23       	and	r24, r24
     464:	21 f3       	breq	.-56     	; 0x42e <flight_action+0x4c>
     466:	be 01       	movw	r22, r28
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	8f e0       	ldi	r24, 0x0F	; 15
     46e:	95 e0       	ldi	r25, 0x05	; 5
     470:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	d9 f6       	brne	.-74     	; 0x42e <flight_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// time-out = flight time

	PT_END(pt);
     478:	f6 01       	movw	r30, r12
     47a:	11 82       	std	Z+1, r1	; 0x01
     47c:	10 82       	st	Z, r1
     47e:	83 e0       	ldi	r24, 0x03	; 3
}
     480:	2b 96       	adiw	r28, 0x0b	; 11
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	0f 91       	pop	r16
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	08 95       	ret

0000049a <waiting_action>:
	PT_END(pt);
}


static u8 waiting_action(pt_t* pt, void* args)
{
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	0f 93       	push	r16
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	2b 97       	sbiw	r28, 0x0b	; 11
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);

	// cmde cone stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0x0f)
     4b8:	8c e5       	ldi	r24, 0x5C	; 92
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	f6 01       	movw	r30, r12
     4be:	91 83       	std	Z+1, r25	; 0x01
     4c0:	80 83       	st	Z, r24
     4c2:	ef e0       	ldi	r30, 0x0F	; 15
     4c4:	ee 2e       	mov	r14, r30
     4c6:	0a ea       	ldi	r16, 0xAA	; 170
     4c8:	27 e1       	ldi	r18, 0x17	; 23
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     4d6:	81 11       	cpse	r24, r1
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <waiting_action+0x44>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <waiting_action+0x5e>
     4de:	be 01       	movw	r22, r28
     4e0:	6f 5f       	subi	r22, 0xFF	; 255
     4e2:	7f 4f       	sbci	r23, 0xFF	; 255
     4e4:	8f e0       	ldi	r24, 0x0F	; 15
     4e6:	95 e0       	ldi	r25, 0x05	; 5
     4e8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	a9 f7       	brne	.-22     	; 0x4da <waiting_action+0x40>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	PT_END(pt);
     4f0:	f6 01       	movw	r30, r12
     4f2:	11 82       	std	Z+1, r1	; 0x01
     4f4:	10 82       	st	Z, r1
     4f6:	83 e0       	ldi	r24, 0x03	; 3
}
     4f8:	2b 96       	adiw	r28, 0x0b	; 11
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	0f 91       	pop	r16
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	08 95       	ret

00000512 <aero_open_action>:
	PT_END(pt);
}


static u8 aero_open_action(pt_t* pt, void* args)
{
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	0f 93       	push	r16
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	2b 97       	sbiw	r28, 0x0b	; 11
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);

	// cmde aero stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0x55, 0x0f)
     530:	88 e9       	ldi	r24, 0x98	; 152
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	f6 01       	movw	r30, r12
     536:	91 83       	std	Z+1, r25	; 0x01
     538:	80 83       	st	Z, r24
     53a:	ff e0       	ldi	r31, 0x0F	; 15
     53c:	ef 2e       	mov	r14, r31
     53e:	05 e5       	ldi	r16, 0x55	; 85
     540:	27 e1       	ldi	r18, 0x17	; 23
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     54e:	81 11       	cpse	r24, r1
     550:	02 c0       	rjmp	.+4      	; 0x556 <aero_open_action+0x44>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0d c0       	rjmp	.+26     	; 0x570 <aero_open_action+0x5e>
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	8f e0       	ldi	r24, 0x0F	; 15
     55e:	95 e0       	ldi	r25, 0x05	; 5
     560:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	a9 f7       	brne	.-22     	; 0x552 <aero_open_action+0x40>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	PT_END(pt);
     568:	f6 01       	movw	r30, r12
     56a:	11 82       	std	Z+1, r1	; 0x01
     56c:	10 82       	st	Z, r1
     56e:	83 e0       	ldi	r24, 0x03	; 3
}
     570:	2b 96       	adiw	r28, 0x0b	; 11
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	0f 91       	pop	r16
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	08 95       	ret

0000058a <cone_closed_action>:
	PT_END(pt);
}


static u8 cone_closed_action(pt_t* pt, void* args)
{
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	0f 93       	push	r16
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2b 97       	sbiw	r28, 0x0b	; 11
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);

	// cmde cone close
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0xc1)
     5a8:	84 ed       	ldi	r24, 0xD4	; 212
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	f6 01       	movw	r30, r12
     5ae:	91 83       	std	Z+1, r25	; 0x01
     5b0:	80 83       	st	Z, r24
     5b2:	a1 ec       	ldi	r26, 0xC1	; 193
     5b4:	ea 2e       	mov	r14, r26
     5b6:	0a ea       	ldi	r16, 0xAA	; 170
     5b8:	27 e1       	ldi	r18, 0x17	; 23
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     5c6:	81 11       	cpse	r24, r1
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <cone_closed_action+0x44>
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	1b c0       	rjmp	.+54     	; 0x604 <cone_closed_action+0x7a>
     5ce:	be 01       	movw	r22, r28
     5d0:	6f 5f       	subi	r22, 0xFF	; 255
     5d2:	7f 4f       	sbci	r23, 0xFF	; 255
     5d4:	8f e0       	ldi	r24, 0x0F	; 15
     5d6:	95 e0       	ldi	r25, 0x05	; 5
     5d8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	a9 f7       	brne	.-22     	; 0x5ca <cone_closed_action+0x40>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// time-out 1s
	MNT.time_out = TIME_get() + 1 * TIME_1_SEC;
     5e0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     5e4:	60 5f       	subi	r22, 0xF0	; 240
     5e6:	78 4d       	sbci	r23, 0xD8	; 216
     5e8:	8f 4f       	sbci	r24, 0xFF	; 255
     5ea:	9f 4f       	sbci	r25, 0xFF	; 255
     5ec:	60 93 b0 04 	sts	0x04B0, r22
     5f0:	70 93 b1 04 	sts	0x04B1, r23
     5f4:	80 93 b2 04 	sts	0x04B2, r24
     5f8:	90 93 b3 04 	sts	0x04B3, r25

	PT_END(pt);
     5fc:	f6 01       	movw	r30, r12
     5fe:	11 82       	std	Z+1, r1	; 0x01
     600:	10 82       	st	Z, r1
     602:	83 e0       	ldi	r24, 0x03	; 3
}
     604:	2b 96       	adiw	r28, 0x0b	; 11
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	0f 91       	pop	r16
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	08 95       	ret

0000061e <aero_opening_action>:
	PT_END(pt);
}


static u8 aero_opening_action(pt_t* pt, void* args)
{
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	0f 93       	push	r16
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	2b 97       	sbiw	r28, 0x0b	; 11
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);
     63c:	dc 01       	movw	r26, r24
     63e:	ed 91       	ld	r30, X+
     640:	fc 91       	ld	r31, X
     642:	30 97       	sbiw	r30, 0x00	; 0
     644:	09 f0       	breq	.+2      	; 0x648 <aero_opening_action+0x2a>
     646:	09 94       	ijmp

	// cmde aero open
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0x55, 0x09)
     648:	84 e2       	ldi	r24, 0x24	; 36
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	f6 01       	movw	r30, r12
     64e:	91 83       	std	Z+1, r25	; 0x01
     650:	80 83       	st	Z, r24
     652:	09 e0       	ldi	r16, 0x09	; 9
     654:	e0 2e       	mov	r14, r16
     656:	05 e5       	ldi	r16, 0x55	; 85
     658:	27 e1       	ldi	r18, 0x17	; 23
     65a:	41 e0       	ldi	r20, 0x01	; 1
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     666:	81 11       	cpse	r24, r1
     668:	02 c0       	rjmp	.+4      	; 0x66e <aero_opening_action+0x50>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	35 c0       	rjmp	.+106    	; 0x6d8 <aero_opening_action+0xba>
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	8f e0       	ldi	r24, 0x0F	; 15
     676:	95 e0       	ldi	r25, 0x05	; 5
     678:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	a9 f7       	brne	.-22     	; 0x66a <aero_opening_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// cmde cone stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0x0f)
     680:	80 e4       	ldi	r24, 0x40	; 64
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	d6 01       	movw	r26, r12
     686:	8d 93       	st	X+, r24
     688:	9c 93       	st	X, r25
     68a:	bf e0       	ldi	r27, 0x0F	; 15
     68c:	eb 2e       	mov	r14, r27
     68e:	0a ea       	ldi	r16, 0xAA	; 170
     690:	27 e1       	ldi	r18, 0x17	; 23
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     69e:	88 23       	and	r24, r24
     6a0:	21 f3       	breq	.-56     	; 0x66a <aero_opening_action+0x4c>
     6a2:	be 01       	movw	r22, r28
     6a4:	6f 5f       	subi	r22, 0xFF	; 255
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	8f e0       	ldi	r24, 0x0F	; 15
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	d9 f6       	brne	.-74     	; 0x66a <aero_opening_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// time-out 5s
	MNT.time_out = TIME_get() + 5 * TIME_1_SEC;
     6b4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     6b8:	60 5b       	subi	r22, 0xB0	; 176
     6ba:	7c 43       	sbci	r23, 0x3C	; 60
     6bc:	8f 4f       	sbci	r24, 0xFF	; 255
     6be:	9f 4f       	sbci	r25, 0xFF	; 255
     6c0:	60 93 b0 04 	sts	0x04B0, r22
     6c4:	70 93 b1 04 	sts	0x04B1, r23
     6c8:	80 93 b2 04 	sts	0x04B2, r24
     6cc:	90 93 b3 04 	sts	0x04B3, r25

	PT_END(pt);
     6d0:	f6 01       	movw	r30, r12
     6d2:	11 82       	std	Z+1, r1	; 0x01
     6d4:	10 82       	st	Z, r1
     6d6:	83 e0       	ldi	r24, 0x03	; 3
}
     6d8:	2b 96       	adiw	r28, 0x0b	; 11
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	0f 91       	pop	r16
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	08 95       	ret

000006f2 <cone_opening_action>:
	PT_END(pt);
}


static u8 cone_opening_action(pt_t* pt, void* args)
{
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	0f 93       	push	r16
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	2b 97       	sbiw	r28, 0x0b	; 11
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);

	// cmde cone open
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0x09)
     710:	88 e8       	ldi	r24, 0x88	; 136
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	f6 01       	movw	r30, r12
     716:	91 83       	std	Z+1, r25	; 0x01
     718:	80 83       	st	Z, r24
     71a:	89 e0       	ldi	r24, 0x09	; 9
     71c:	e8 2e       	mov	r14, r24
     71e:	0a ea       	ldi	r16, 0xAA	; 170
     720:	27 e1       	ldi	r18, 0x17	; 23
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     72e:	81 11       	cpse	r24, r1
     730:	02 c0       	rjmp	.+4      	; 0x736 <cone_opening_action+0x44>
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	1b c0       	rjmp	.+54     	; 0x76c <cone_opening_action+0x7a>
     736:	be 01       	movw	r22, r28
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	8f e0       	ldi	r24, 0x0F	; 15
     73e:	95 e0       	ldi	r25, 0x05	; 5
     740:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	a9 f7       	brne	.-22     	; 0x732 <cone_opening_action+0x40>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// time-out 5s
	MNT.time_out = TIME_get() + 5 * TIME_1_SEC;
     748:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     74c:	60 5b       	subi	r22, 0xB0	; 176
     74e:	7c 43       	sbci	r23, 0x3C	; 60
     750:	8f 4f       	sbci	r24, 0xFF	; 255
     752:	9f 4f       	sbci	r25, 0xFF	; 255
     754:	60 93 b0 04 	sts	0x04B0, r22
     758:	70 93 b1 04 	sts	0x04B1, r23
     75c:	80 93 b2 04 	sts	0x04B2, r24
     760:	90 93 b3 04 	sts	0x04B3, r25

	PT_END(pt);
     764:	f6 01       	movw	r30, r12
     766:	11 82       	std	Z+1, r1	; 0x01
     768:	10 82       	st	Z, r1
     76a:	83 e0       	ldi	r24, 0x03	; 3
}
     76c:	2b 96       	adiw	r28, 0x0b	; 11
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	0f 91       	pop	r16
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	08 95       	ret

00000786 <init_action>:
// ------------------------------------------
// private functions
//

static u8 init_action(pt_t* pt, void* args)
{
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	0f 93       	push	r16
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2b 97       	sbiw	r28, 0x0b	; 11
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	6c 01       	movw	r12, r24
	frame_t fr;

	PT_BEGIN(pt);
     7a4:	dc 01       	movw	r26, r24
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	30 97       	sbiw	r30, 0x00	; 0
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <init_action+0x2a>
     7ae:	09 94       	ijmp

	// cmde cone stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0xaa, 0x0f)
     7b0:	88 ed       	ldi	r24, 0xD8	; 216
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	f6 01       	movw	r30, r12
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
     7ba:	2f e0       	ldi	r18, 0x0F	; 15
     7bc:	e2 2e       	mov	r14, r18
     7be:	0a ea       	ldi	r16, 0xAA	; 170
     7c0:	27 e1       	ldi	r18, 0x17	; 23
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     7ce:	81 11       	cpse	r24, r1
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <init_action+0x50>
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	27 c0       	rjmp	.+78     	; 0x824 <init_action+0x9e>
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	8f e0       	ldi	r24, 0x0F	; 15
     7de:	95 e0       	ldi	r25, 0x05	; 5
     7e0:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	a9 f7       	brne	.-22     	; 0x7d2 <init_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	// cmde aero stop
	PT_WAIT_UNTIL(pt, frame_set_2(&fr, DPT_SELF_ADDR, DPT_SELF_ADDR, FR_MINUT_SERVO_CMD, 0x55, 0x0f)
     7e8:	84 ef       	ldi	r24, 0xF4	; 244
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	d6 01       	movw	r26, r12
     7ee:	8d 93       	st	X+, r24
     7f0:	9c 93       	st	X, r25
     7f2:	9f e0       	ldi	r25, 0x0F	; 15
     7f4:	e9 2e       	mov	r14, r25
     7f6:	05 e5       	ldi	r16, 0x55	; 85
     7f8:	27 e1       	ldi	r18, 0x17	; 23
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 28 08 	call	0x1050	; 0x1050 <frame_set_2>
     806:	88 23       	and	r24, r24
     808:	21 f3       	breq	.-56     	; 0x7d2 <init_action+0x4c>
     80a:	be 01       	movw	r22, r28
     80c:	6f 5f       	subi	r22, 0xFF	; 255
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	8f e0       	ldi	r24, 0x0F	; 15
     812:	95 e0       	ldi	r25, 0x05	; 5
     814:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	d9 f6       	brne	.-74     	; 0x7d2 <init_action+0x4c>
			&& OK == FIFO_put(&MNT.out_fifo, &fr)
	);

	PT_END(pt);
     81c:	f6 01       	movw	r30, r12
     81e:	11 82       	std	Z+1, r1	; 0x01
     820:	10 82       	st	Z, r1
     822:	83 e0       	ldi	r24, 0x03	; 3
}
     824:	2b 96       	adiw	r28, 0x0b	; 11
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	0f 91       	pop	r16
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	08 95       	ret

0000083e <MNT_send_frame.constprop.0>:
}


static PT_THREAD( MNT_send_frame(pt_t* pt) )
{
	PT_BEGIN(pt);
     83e:	e0 91 a6 04 	lds	r30, 0x04A6
     842:	f0 91 a7 04 	lds	r31, 0x04A7
     846:	30 97       	sbiw	r30, 0x00	; 0
     848:	09 f0       	breq	.+2      	; 0x84c <MNT_send_frame.constprop.0+0xe>
     84a:	09 94       	ijmp

	// wait until an outgoing frame is available
	PT_WAIT_UNTIL(pt, OK == FIFO_get(&MNT.out_fifo, &MNT.out_fr));
     84c:	86 e2       	ldi	r24, 0x26	; 38
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	90 93 a7 04 	sts	0x04A7, r25
     854:	80 93 a6 04 	sts	0x04A6, r24
     858:	67 e4       	ldi	r22, 0x47	; 71
     85a:	75 e0       	ldi	r23, 0x05	; 5
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	95 e0       	ldi	r25, 0x05	; 5
     860:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	d1 f4       	brne	.+52     	; 0x89c <MNT_send_frame.constprop.0+0x5e>

	// send the frame throught the dispatcher
	DPT_lock(&MNT.interf);
     868:	85 e9       	ldi	r24, 0x95	; 149
     86a:	94 e0       	ldi	r25, 0x04	; 4
     86c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <DPT_lock>

	// some retry may be needed
	PT_WAIT_UNTIL(pt, OK == DPT_tx(&MNT.interf, &MNT.out_fr));
     870:	88 e3       	ldi	r24, 0x38	; 56
     872:	94 e0       	ldi	r25, 0x04	; 4
     874:	90 93 a7 04 	sts	0x04A7, r25
     878:	80 93 a6 04 	sts	0x04A6, r24
     87c:	67 e4       	ldi	r22, 0x47	; 71
     87e:	75 e0       	ldi	r23, 0x05	; 5
     880:	85 e9       	ldi	r24, 0x95	; 149
     882:	94 e0       	ldi	r25, 0x04	; 4
     884:	0e 94 46 10 	call	0x208c	; 0x208c <DPT_tx>
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	41 f4       	brne	.+16     	; 0x89c <MNT_send_frame.constprop.0+0x5e>

	// release the dispatcher
	DPT_unlock(&MNT.interf);
     88c:	85 e9       	ldi	r24, 0x95	; 149
     88e:	94 e0       	ldi	r25, 0x04	; 4
     890:	0e 94 1d 10 	call	0x203a	; 0x203a <DPT_unlock>

	// loop back for the next frame to send
	PT_RESTART(pt);
     894:	10 92 a7 04 	sts	0x04A7, r1
     898:	10 92 a6 04 	sts	0x04A6, r1
	
	PT_END(pt);
}
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret

000008a0 <MNT_check_commands.constprop.1>:
			break;
	}
}


static PT_THREAD( MNT_check_commands(pt_t* pt) )
     8a0:	a1 e0       	ldi	r26, 0x01	; 1
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e6 e5       	ldi	r30, 0x56	; 86
     8a6:	f4 e0       	ldi	r31, 0x04	; 4
     8a8:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x20>
{
	mnt_event_t ev;
	u8 swap;

	PT_BEGIN(pt);
     8ac:	e0 91 a4 04 	lds	r30, 0x04A4
     8b0:	f0 91 a5 04 	lds	r31, 0x04A5
     8b4:	30 97       	sbiw	r30, 0x00	; 0
     8b6:	09 f0       	breq	.+2      	; 0x8ba <MNT_check_commands.constprop.1+0x1a>
     8b8:	09 94       	ijmp

	// as long as there are no command
	PT_WAIT_UNTIL(pt, OK == FIFO_get(&MNT.cmds_fifo, &MNT.cmd_fr));
     8ba:	8d e5       	ldi	r24, 0x5D	; 93
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	90 93 a5 04 	sts	0x04A5, r25
     8c2:	80 93 a4 04 	sts	0x04A4, r24
     8c6:	64 e0       	ldi	r22, 0x04	; 4
     8c8:	75 e0       	ldi	r23, 0x05	; 5
     8ca:	87 ed       	ldi	r24, 0xD7	; 215
     8cc:	94 e0       	ldi	r25, 0x04	; 4
     8ce:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <MNT_check_commands.constprop.1+0x38>
     8d6:	50 c0       	rjmp	.+160    	; 0x978 <__stack+0x79>

	switch (MNT.cmd_fr.cmde) {
     8d8:	80 91 07 05 	lds	r24, 0x0507
     8dc:	84 31       	cpi	r24, 0x14	; 20
     8de:	29 f0       	breq	.+10     	; 0x8ea <MNT_check_commands.constprop.1+0x4a>
     8e0:	86 31       	cpi	r24, 0x16	; 22
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__stack+0xf>
     8e4:	80 31       	cpi	r24, 0x10	; 16
     8e6:	49 f5       	brne	.+82     	; 0x93a <__stack+0x3b>
     8e8:	43 c0       	rjmp	.+134    	; 0x970 <__stack+0x71>
		case FR_TAKE_OFF:
			// generate take-off event
			PT_WAIT_UNTIL(pt, (ev = MNT_EV_TAKE_OFF) && OK == FIFO_put(&MNT.ev_fifo, &ev) );
     8ea:	85 e7       	ldi	r24, 0x75	; 117
     8ec:	94 e0       	ldi	r25, 0x04	; 4
     8ee:	90 93 a5 04 	sts	0x04A5, r25
     8f2:	80 93 a4 04 	sts	0x04A4, r24
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	be 01       	movw	r22, r28
     8fc:	6f 5f       	subi	r22, 0xFF	; 255
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	86 ec       	ldi	r24, 0xC6	; 198
     902:	94 e0       	ldi	r25, 0x04	; 4
     904:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	b1 f5       	brne	.+108    	; 0x978 <__stack+0x79>
     90c:	16 c0       	rjmp	.+44     	; 0x93a <__stack+0x3b>
}


static void MNT_open_time(frame_t* fr)
{
	switch (fr->argv[0]) {
     90e:	80 91 09 05 	lds	r24, 0x0509
     912:	88 23       	and	r24, r24
     914:	19 f0       	breq	.+6      	; 0x91c <__stack+0x1d>
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	59 f4       	brne	.+22     	; 0x930 <__stack+0x31>
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0x27>
		case 0x00:
			// save new open time value
			MNT.open_time = fr->argv[1];
     91c:	80 91 0a 05 	lds	r24, 0x050A
     920:	80 93 c4 04 	sts	0x04C4, r24
     924:	0a c0       	rjmp	.+20     	; 0x93a <__stack+0x3b>
			break;

		case 0xff:
			// read open time value
			fr->argv[1] = MNT.open_time;
     926:	80 91 c4 04 	lds	r24, 0x04C4
     92a:	80 93 0a 05 	sts	0x050A, r24
     92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0x3b>
			break;

		default:
			// bad sub-command
			fr->error = 1;
     930:	80 91 08 05 	lds	r24, 0x0508
     934:	81 60       	ori	r24, 0x01	; 1
     936:	80 93 08 05 	sts	0x0508, r24
			// shall never happen
			break;
	}

	// build the response to the current command
	swap = MNT.cmd_fr.orig;
     93a:	80 91 05 05 	lds	r24, 0x0505
	MNT.cmd_fr.orig = MNT.cmd_fr.dest;
     93e:	90 91 04 05 	lds	r25, 0x0504
     942:	90 93 05 05 	sts	0x0505, r25
	MNT.cmd_fr.dest = swap;
     946:	80 93 04 05 	sts	0x0504, r24
	MNT.cmd_fr.resp = 1;
     94a:	80 91 08 05 	lds	r24, 0x0508
     94e:	82 60       	ori	r24, 0x02	; 2
     950:	80 93 08 05 	sts	0x0508, r24

	// enqueue it
	PT_WAIT_UNTIL(pt, OK == FIFO_put(&MNT.out_fifo, &MNT.cmd_fr));
     954:	8a ea       	ldi	r24, 0xAA	; 170
     956:	94 e0       	ldi	r25, 0x04	; 4
     958:	90 93 a5 04 	sts	0x04A5, r25
     95c:	80 93 a4 04 	sts	0x04A4, r24
     960:	64 e0       	ldi	r22, 0x04	; 4
     962:	75 e0       	ldi	r23, 0x05	; 5
     964:	8f e0       	ldi	r24, 0x0F	; 15
     966:	95 e0       	ldi	r25, 0x05	; 5
     968:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	21 f4       	brne	.+8      	; 0x978 <__stack+0x79>

	PT_RESTART(pt);
     970:	10 92 a5 04 	sts	0x04A5, r1
     974:	10 92 a4 04 	sts	0x04A4, r1

	PT_END(pt);
}
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	21 96       	adiw	r28, 0x01	; 1
     97c:	e2 e0       	ldi	r30, 0x02	; 2
     97e:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x20>

00000982 <MNT_check_time_out.constprop.3>:
	PT_END(pt);
}


// check a time-out has elapsed
static PT_THREAD( MNT_check_time_out(pt_t* pt) )
     982:	a1 e0       	ldi	r26, 0x01	; 1
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	e7 ec       	ldi	r30, 0xC7	; 199
     988:	f4 e0       	ldi	r31, 0x04	; 4
     98a:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__prologue_saves__+0x1c>
{
	mnt_event_t ev;

	PT_BEGIN(pt);
     98e:	e0 91 a2 04 	lds	r30, 0x04A2
     992:	f0 91 a3 04 	lds	r31, 0x04A3
     996:	30 97       	sbiw	r30, 0x00	; 0
     998:	09 f0       	breq	.+2      	; 0x99c <MNT_check_time_out.constprop.3+0x1a>
     99a:	09 94       	ijmp

	// if current time is higher than the time-out target time
	PT_WAIT_UNTIL(pt, TIME_get() > MNT.time_out);
     99c:	8e ec       	ldi	r24, 0xCE	; 206
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	90 93 a3 04 	sts	0x04A3, r25
     9a4:	80 93 a2 04 	sts	0x04A2, r24
     9a8:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     9ac:	00 91 b0 04 	lds	r16, 0x04B0
     9b0:	10 91 b1 04 	lds	r17, 0x04B1
     9b4:	20 91 b2 04 	lds	r18, 0x04B2
     9b8:	30 91 b3 04 	lds	r19, 0x04B3
     9bc:	06 17       	cp	r16, r22
     9be:	17 07       	cpc	r17, r23
     9c0:	28 07       	cpc	r18, r24
     9c2:	39 07       	cpc	r19, r25
     9c4:	00 f5       	brcc	.+64     	; 0xa06 <MNT_check_time_out.constprop.3+0x84>

	// prevent any further time-out
	MNT.time_out = TIME_MAX;
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	9f ef       	ldi	r25, 0xFF	; 255
     9ca:	dc 01       	movw	r26, r24
     9cc:	80 93 b0 04 	sts	0x04B0, r24
     9d0:	90 93 b1 04 	sts	0x04B1, r25
     9d4:	a0 93 b2 04 	sts	0x04B2, r26
     9d8:	b0 93 b3 04 	sts	0x04B3, r27

	// generate the time-out event
	PT_WAIT_UNTIL(pt, (ev = MNT_EV_TIME_OUT) && OK == FIFO_put(&MNT.ev_fifo, &ev) );
     9dc:	8e ee       	ldi	r24, 0xEE	; 238
     9de:	94 e0       	ldi	r25, 0x04	; 4
     9e0:	90 93 a3 04 	sts	0x04A3, r25
     9e4:	80 93 a2 04 	sts	0x04A2, r24
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	89 83       	std	Y+1, r24	; 0x01
     9ec:	be 01       	movw	r22, r28
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	86 ec       	ldi	r24, 0xC6	; 198
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	21 f4       	brne	.+8      	; 0xa06 <MNT_check_time_out.constprop.3+0x84>

	PT_RESTART(pt);
     9fe:	10 92 a3 04 	sts	0x04A3, r1
     a02:	10 92 a2 04 	sts	0x04A2, r1

	PT_END(pt);
}
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	21 96       	adiw	r28, 0x01	; 1
     a0a:	e4 e0       	ldi	r30, 0x04	; 4
     a0c:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__epilogue_restores__+0x1c>

00000a10 <MNT_check_cone.constprop.4>:
	PT_END(pt);
}


// check cone changings
static PT_THREAD( MNT_check_cone(pt_t* pt) )
     a10:	a1 e0       	ldi	r26, 0x01	; 1
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	ee e0       	ldi	r30, 0x0E	; 14
     a16:	f5 e0       	ldi	r31, 0x05	; 5
     a18:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__prologue_saves__+0x1c>
{
	mnt_event_t ev;

	PT_BEGIN(pt);
     a1c:	e0 91 a0 04 	lds	r30, 0x04A0
     a20:	f0 91 a1 04 	lds	r31, 0x04A1
     a24:	30 97       	sbiw	r30, 0x00	; 0
     a26:	09 f0       	breq	.+2      	; 0xa2a <MNT_check_cone.constprop.4+0x1a>
     a28:	09 94       	ijmp

	// if current time is higher than the time-out target time
	PT_WAIT_UNTIL(pt, TIME_get() > MNT.sampling_rate);
     a2a:	85 e1       	ldi	r24, 0x15	; 21
     a2c:	95 e0       	ldi	r25, 0x05	; 5
     a2e:	90 93 a1 04 	sts	0x04A1, r25
     a32:	80 93 a0 04 	sts	0x04A0, r24
     a36:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     a3a:	00 91 b4 04 	lds	r16, 0x04B4
     a3e:	10 91 b5 04 	lds	r17, 0x04B5
     a42:	20 91 b6 04 	lds	r18, 0x04B6
     a46:	30 91 b7 04 	lds	r19, 0x04B7
     a4a:	06 17       	cp	r16, r22
     a4c:	17 07       	cpc	r17, r23
     a4e:	28 07       	cpc	r18, r24
     a50:	39 07       	cpc	r19, r25
     a52:	c0 f5       	brcc	.+112    	; 0xac4 <MNT_check_cone.constprop.4+0xb4>

	// set next sampling period
	MNT.sampling_rate += SAMPLING_PERIOD;
     a54:	d9 01       	movw	r26, r18
     a56:	c8 01       	movw	r24, r16
     a58:	88 51       	subi	r24, 0x18	; 24
     a5a:	9c 4f       	sbci	r25, 0xFC	; 252
     a5c:	af 4f       	sbci	r26, 0xFF	; 255
     a5e:	bf 4f       	sbci	r27, 0xFF	; 255
     a60:	80 93 b4 04 	sts	0x04B4, r24
     a64:	90 93 b5 04 	sts	0x04B5, r25
     a68:	a0 93 b6 04 	sts	0x04B6, r26
     a6c:	b0 93 b7 04 	sts	0x04B7, r27

	// read cone state
	u8 cone_state = CONE & _BV(CONE_PIN);
     a70:	85 b1       	in	r24, 0x05	; 5
     a72:	84 70       	andi	r24, 0x04	; 4

	// check if the cone state has not changed
	if ( cone_state == MNT.cone_state ) {
     a74:	90 91 c5 04 	lds	r25, 0x04C5
     a78:	89 13       	cpse	r24, r25
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <MNT_check_cone.constprop.4+0x6e>
     a7c:	1f c0       	rjmp	.+62     	; 0xabc <MNT_check_cone.constprop.4+0xac>
		PT_RESTART(pt);
	}

	// save new cone state
	MNT.cone_state = cone_state;
     a7e:	80 93 c5 04 	sts	0x04C5, r24

	// else generate the correspondig change event
	switch (MNT.cone_state) {
     a82:	88 23       	and	r24, r24
     a84:	19 f0       	breq	.+6      	; 0xa8c <MNT_check_cone.constprop.4+0x7c>
     a86:	84 30       	cpi	r24, 0x04	; 4
     a88:	c9 f4       	brne	.+50     	; 0xabc <MNT_check_cone.constprop.4+0xac>
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <MNT_check_cone.constprop.4+0x8a>
		case CONE_STATE_OPEN:
			PT_WAIT_UNTIL(pt, (ev = MNT_EV_CONE_OPEN) && OK == FIFO_put(&MNT.ev_fifo, &ev) );
     a8c:	86 e4       	ldi	r24, 0x46	; 70
     a8e:	95 e0       	ldi	r25, 0x05	; 5
     a90:	90 93 a1 04 	sts	0x04A1, r25
     a94:	80 93 a0 04 	sts	0x04A0, r24
     a98:	15 c0       	rjmp	.+42     	; 0xac4 <MNT_check_cone.constprop.4+0xb4>
			break;

		case CONE_STATE_CLOSED:
			PT_WAIT_UNTIL(pt, (ev = MNT_EV_CONE_CLOSED) && OK == FIFO_put(&MNT.ev_fifo, &ev) );
     a9a:	8d e4       	ldi	r24, 0x4D	; 77
     a9c:	95 e0       	ldi	r25, 0x05	; 5
     a9e:	90 93 a1 04 	sts	0x04A1, r25
     aa2:	80 93 a0 04 	sts	0x04A0, r24
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	86 ec       	ldi	r24, 0xC6	; 198
     ab2:	94 e0       	ldi	r25, 0x04	; 4
     ab4:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	21 f4       	brne	.+8      	; 0xac4 <MNT_check_cone.constprop.4+0xb4>

		default:
			break;
	}

	PT_RESTART(pt);
     abc:	10 92 a1 04 	sts	0x04A1, r1
     ac0:	10 92 a0 04 	sts	0x04A0, r1

	PT_END(pt);
}
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	21 96       	adiw	r28, 0x01	; 1
     ac8:	e4 e0       	ldi	r30, 0x04	; 4
     aca:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__epilogue_restores__+0x1c>

00000ace <MNT_init>:
//

void MNT_init(void)
{
	// init state machine
	STM_init(&MNT.stm, &init);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	71 e0       	ldi	r23, 0x01	; 1
     ad2:	88 ea       	ldi	r24, 0xA8	; 168
     ad4:	94 e0       	ldi	r25, 0x04	; 4
     ad6:	0e 94 18 18 	call	0x3030	; 0x3030 <STM_init>

	// set the door pins direction
	CONE_DDR &= ~_BV(CONE_PIN);
     ada:	22 98       	cbi	0x04, 2	; 4

	// init the cone state with its opposite value to generate the first event
	MNT.cone_state = ~CONE & _BV(CONE_PIN);
     adc:	85 b1       	in	r24, 0x05	; 5
     ade:	80 95       	com	r24
     ae0:	84 70       	andi	r24, 0x04	; 4
     ae2:	80 93 c5 04 	sts	0x04C5, r24

	// init fifoes
	FIFO_init(&MNT.ev_fifo, MNT.ev_buf, NB_EVENTS, sizeof(mnt_event_t));
     ae6:	21 e0       	ldi	r18, 0x01	; 1
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	45 e0       	ldi	r20, 0x05	; 5
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	62 ed       	ldi	r22, 0xD2	; 210
     af0:	74 e0       	ldi	r23, 0x04	; 4
     af2:	86 ec       	ldi	r24, 0xC6	; 198
     af4:	94 e0       	ldi	r25, 0x04	; 4
     af6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	FIFO_init(&MNT.cmds_fifo, MNT.cmds_buf, NB_CMDS, sizeof(frame_t));
     afa:	2b e0       	ldi	r18, 0x0B	; 11
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	43 e0       	ldi	r20, 0x03	; 3
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	63 ee       	ldi	r22, 0xE3	; 227
     b04:	74 e0       	ldi	r23, 0x04	; 4
     b06:	87 ed       	ldi	r24, 0xD7	; 215
     b08:	94 e0       	ldi	r25, 0x04	; 4
     b0a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	FIFO_init(&MNT.out_fifo, MNT.out_buf, NB_OUT_FR, sizeof(frame_t));
     b0e:	2b e0       	ldi	r18, 0x0B	; 11
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	44 e0       	ldi	r20, 0x04	; 4
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	6b e1       	ldi	r22, 0x1B	; 27
     b18:	75 e0       	ldi	r23, 0x05	; 5
     b1a:	8f e0       	ldi	r24, 0x0F	; 15
     b1c:	95 e0       	ldi	r25, 0x05	; 5
     b1e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>

	// register to dispatcher
	MNT.interf.channel = 4;
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	80 93 95 04 	sts	0x0495, r24
	MNT.interf.cmde_mask = _CM(FR_TAKE_OFF) | _CM(FR_MINUT_TIME_OUT) | _CM(FR_STATE);
     b28:	e6 e9       	ldi	r30, 0x96	; 150
     b2a:	f4 e0       	ldi	r31, 0x04	; 4
     b2c:	10 82       	st	Z, r1
     b2e:	11 82       	std	Z+1, r1	; 0x01
     b30:	81 e5       	ldi	r24, 0x51	; 81
     b32:	82 83       	std	Z+2, r24	; 0x02
     b34:	13 82       	std	Z+3, r1	; 0x03
     b36:	14 82       	std	Z+4, r1	; 0x04
     b38:	15 82       	std	Z+5, r1	; 0x05
     b3a:	16 82       	std	Z+6, r1	; 0x06
     b3c:	17 82       	std	Z+7, r1	; 0x07
	MNT.interf.queue = &MNT.cmds_fifo;
     b3e:	87 ed       	ldi	r24, 0xD7	; 215
     b40:	94 e0       	ldi	r25, 0x04	; 4
     b42:	90 93 9f 04 	sts	0x049F, r25
     b46:	80 93 9e 04 	sts	0x049E, r24
	DPT_register(&MNT.interf);
     b4a:	85 e9       	ldi	r24, 0x95	; 149
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DPT_register>

	// init threads
	PT_INIT(&MNT.pt_chk_time_out);
     b52:	10 92 a3 04 	sts	0x04A3, r1
     b56:	10 92 a2 04 	sts	0x04A2, r1
	PT_INIT(&MNT.pt_chk_cmds);
     b5a:	10 92 a5 04 	sts	0x04A5, r1
     b5e:	10 92 a4 04 	sts	0x04A4, r1
	PT_INIT(&MNT.pt_out);
     b62:	10 92 a7 04 	sts	0x04A7, r1
     b66:	10 92 a6 04 	sts	0x04A6, r1

	// prevent any time-out
	MNT.time_out = TIME_MAX;
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	9f ef       	ldi	r25, 0xFF	; 255
     b6e:	dc 01       	movw	r26, r24
     b70:	80 93 b0 04 	sts	0x04B0, r24
     b74:	90 93 b1 04 	sts	0x04B1, r25
     b78:	a0 93 b2 04 	sts	0x04B2, r26
     b7c:	b0 93 b3 04 	sts	0x04B3, r27
	MNT.sampling_rate = 0;
     b80:	10 92 b4 04 	sts	0x04B4, r1
     b84:	10 92 b5 04 	sts	0x04B5, r1
     b88:	10 92 b6 04 	sts	0x04B6, r1
     b8c:	10 92 b7 04 	sts	0x04B7, r1
     b90:	08 95       	ret

00000b92 <MNT_run>:
}


void MNT_run(void)
{
     b92:	a1 e0       	ldi	r26, 0x01	; 1
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ef ec       	ldi	r30, 0xCF	; 207
     b98:	f5 e0       	ldi	r31, 0x05	; 5
     b9a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x20>
	//  - frame commands
	//
	//  each generated event is stored in a fifo

	// check if door has changed
	(void)PT_SCHEDULE(MNT_check_cone(&MNT.pt_chk_cone));
     b9e:	0e 94 08 05 	call	0xa10	; 0xa10 <MNT_check_cone.constprop.4>

	// check if a time-out has elapsed
	(void)PT_SCHEDULE(MNT_check_time_out(&MNT.pt_chk_time_out));
     ba2:	0e 94 c1 04 	call	0x982	; 0x982 <MNT_check_time_out.constprop.3>

	// treat each incoming commands
	(void)PT_SCHEDULE(MNT_check_commands(&MNT.pt_chk_cmds));
     ba6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <MNT_check_commands.constprop.1>

	// treat each new event
	mnt_event_t ev;

	// if there is an event
	if ( OK == FIFO_get(&MNT.ev_fifo, &ev) ) {
     baa:	be 01       	movw	r22, r28
     bac:	6f 5f       	subi	r22, 0xFF	; 255
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	86 ec       	ldi	r24, 0xC6	; 198
     bb2:	94 e0       	ldi	r25, 0x04	; 4
     bb4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	29 f4       	brne	.+10     	; 0xbc6 <MNT_run+0x34>
		// update the state machine
		STM_event(&MNT.stm, ev);
     bbc:	69 81       	ldd	r22, Y+1	; 0x01
     bbe:	88 ea       	ldi	r24, 0xA8	; 168
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	0e 94 30 18 	call	0x3060	; 0x3060 <STM_event>
	}

	STM_run(&MNT.stm);
     bc6:	88 ea       	ldi	r24, 0xA8	; 168
     bc8:	94 e0       	ldi	r25, 0x04	; 4
     bca:	0e 94 24 18 	call	0x3048	; 0x3048 <STM_run>

	// send outgoing frame(s) if any
	(void)PT_SCHEDULE(MNT_send_frame(&MNT.pt_out));
     bce:	0e 94 1f 04 	call	0x83e	; 0x83e <MNT_send_frame.constprop.0>
}
     bd2:	21 96       	adiw	r28, 0x01	; 1
     bd4:	e2 e0       	ldi	r30, 0x02	; 2
     bd6:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x20>

00000bda <SERVO_cone_on>:
// private functions
//

// activate the cone servo to drive it to the given position
static void SERVO_cone_on(s8 position)
{
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
	u8 compare;

	// configure port
	SERVO_DDR |= SERVO_CONE;
     bde:	23 9a       	sbi	0x04, 3	; 4

	// compute the compare value according to the required position and the prescaler
	// for position = -90 degrees, signal up time shall be 1 ms so compare = 8
	// for position = 0 degrees, signal up time shall be 1.5 ms so compare = 12
	// for position = +90 degrees, signal up time shall be 2 ms so compare = 16
	compare = 12 + (position * 4) / 90;
     be0:	24 e0       	ldi	r18, 0x04	; 4
     be2:	82 02       	muls	r24, r18
     be4:	c0 01       	movw	r24, r0
     be6:	11 24       	eor	r1, r1
     be8:	6a e5       	ldi	r22, 0x5A	; 90
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divmodhi4>
     bf0:	46 2f       	mov	r20, r22
     bf2:	44 5f       	subi	r20, 0xF4	; 244

	// init the driver, by default, the pwm is zero
	TMR0_init(TMR0_WITHOUT_INTERRUPT, TMR0_WGM_FAST_PWM | TMR0_COM_11 | TMR0_PRESCALER_1024, compare, NULL, NULL);
     bf4:	00 e0       	ldi	r16, 0x00	; 0
     bf6:	10 e0       	ldi	r17, 0x00	; 0
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	6d e7       	ldi	r22, 0x7D	; 125
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 7e 13 	call	0x26fc	; 0x26fc <TMR0_init>

	// launch the pwm generation
	TMR0_start();
     c04:	0e 94 b5 13 	call	0x276a	; 0x276a <TMR0_start>
}
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <SERVO_aero_on>:
}


// activate the aero servo to drive it to the given position
static void SERVO_aero_on(s8 position)
{
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
	u8 compare;

	// configure port
	SERVO_DDR |= SERVO_CONE;
     c12:	23 9a       	sbi	0x04, 3	; 4

	// compute the compare value according to the required position and the prescaler
	// for position = -90 degrees, signal up time shall be 1 ms so compare = 8
	// for position = 0 degrees, signal up time shall be 1.5 ms so compare = 12
	// for position = +90 degrees, signal up time shall be 2 ms so compare = 16
	compare = 12 + (position * 4) / 90;
     c14:	24 e0       	ldi	r18, 0x04	; 4
     c16:	82 02       	muls	r24, r18
     c18:	c0 01       	movw	r24, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	6a e5       	ldi	r22, 0x5A	; 90
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divmodhi4>
     c24:	46 2f       	mov	r20, r22
     c26:	44 5f       	subi	r20, 0xF4	; 244

	// init the driver, by default, the pwm is zero
	TMR0_init(TMR0_WITHOUT_INTERRUPT, TMR0_WGM_FAST_PWM | TMR0_COM_11 | TMR0_PRESCALER_1024, compare, NULL, NULL);
     c28:	00 e0       	ldi	r16, 0x00	; 0
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	6d e7       	ldi	r22, 0x7D	; 125
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 7e 13 	call	0x26fc	; 0x26fc <TMR0_init>

	// launch the pwm generation
	TMR0_start();
     c38:	0e 94 b5 13 	call	0x276a	; 0x276a <TMR0_start>
}
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <SERVO_resp.constprop.0>:
}


static PT_THREAD( SERVO_resp(pt_t* pt) )
{
	PT_BEGIN(pt);
     c42:	e0 91 52 05 	lds	r30, 0x0552
     c46:	f0 91 53 05 	lds	r31, 0x0553
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <SERVO_resp.constprop.0+0xe>
     c4e:	09 94       	ijmp

	// wait until a frame to send is available
	PT_WAIT_UNTIL(pt, OK == FIFO_get(&SERVO.out, &SERVO.out_fr));
     c50:	88 e2       	ldi	r24, 0x28	; 40
     c52:	96 e0       	ldi	r25, 0x06	; 6
     c54:	90 93 53 05 	sts	0x0553, r25
     c58:	80 93 52 05 	sts	0x0552, r24
     c5c:	6f eb       	ldi	r22, 0xBF	; 191
     c5e:	75 e0       	ldi	r23, 0x05	; 5
     c60:	82 e9       	ldi	r24, 0x92	; 146
     c62:	95 e0       	ldi	r25, 0x05	; 5
     c64:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	d1 f4       	brne	.+52     	; 0xca0 <SERVO_resp.constprop.0+0x5e>

	// send it throught the dispatcher
	DPT_lock(&SERVO.interf);
     c6c:	86 e5       	ldi	r24, 0x56	; 86
     c6e:	95 e0       	ldi	r25, 0x05	; 5
     c70:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <DPT_lock>

	// some retry may be necessary
	PT_WAIT_UNTIL(pt, OK == DPT_tx(&SERVO.interf, &SERVO.out_fr));
     c74:	8a e3       	ldi	r24, 0x3A	; 58
     c76:	96 e0       	ldi	r25, 0x06	; 6
     c78:	90 93 53 05 	sts	0x0553, r25
     c7c:	80 93 52 05 	sts	0x0552, r24
     c80:	6f eb       	ldi	r22, 0xBF	; 191
     c82:	75 e0       	ldi	r23, 0x05	; 5
     c84:	86 e5       	ldi	r24, 0x56	; 86
     c86:	95 e0       	ldi	r25, 0x05	; 5
     c88:	0e 94 46 10 	call	0x208c	; 0x208c <DPT_tx>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	41 f4       	brne	.+16     	; 0xca0 <SERVO_resp.constprop.0+0x5e>

	// release the dispatcher
	DPT_unlock(&SERVO.interf);
     c90:	86 e5       	ldi	r24, 0x56	; 86
     c92:	95 e0       	ldi	r25, 0x05	; 5
     c94:	0e 94 1d 10 	call	0x203a	; 0x203a <DPT_unlock>

	// loop back at start
	PT_RESTART(pt);
     c98:	10 92 53 05 	sts	0x0553, r1
     c9c:	10 92 52 05 	sts	0x0552, r1

	PT_END(pt);
}
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	08 95       	ret

00000ca4 <SERVO_cmde.constprop.1>:

static PT_THREAD( SERVO_cmde(pt_t* pt) )
{
	u8 swap;

	PT_BEGIN(pt);
     ca4:	e0 91 54 05 	lds	r30, 0x0554
     ca8:	f0 91 55 05 	lds	r31, 0x0555
     cac:	30 97       	sbiw	r30, 0x00	; 0
     cae:	09 f0       	breq	.+2      	; 0xcb2 <SERVO_cmde.constprop.1+0xe>
     cb0:	09 94       	ijmp

	// if no incoming frame is available
	PT_WAIT_UNTIL(pt, KO == FIFO_get(&SERVO.in, &SERVO.cmd_fr) );
     cb2:	89 e5       	ldi	r24, 0x59	; 89
     cb4:	96 e0       	ldi	r25, 0x06	; 6
     cb6:	90 93 55 05 	sts	0x0555, r25
     cba:	80 93 54 05 	sts	0x0554, r24
     cbe:	6a ec       	ldi	r22, 0xCA	; 202
     cc0:	75 e0       	ldi	r23, 0x05	; 5
     cc2:	85 e6       	ldi	r24, 0x65	; 101
     cc4:	95 e0       	ldi	r25, 0x05	; 5
     cc6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
     cca:	81 11       	cpse	r24, r1
     ccc:	b5 c0       	rjmp	.+362    	; 0xe38 <SERVO_cmde.constprop.1+0x194>

	// if it is a response
	if (SERVO.cmd_fr.resp) {
     cce:	80 91 ce 05 	lds	r24, 0x05CE
     cd2:	81 fd       	sbrc	r24, 1
     cd4:	ad c0       	rjmp	.+346    	; 0xe30 <SERVO_cmde.constprop.1+0x18c>
		// ignore it
		// and restart waiting
		PT_RESTART(pt);
	}

	SERVO.cmd_fr.error = 0;
     cd6:	8e 7f       	andi	r24, 0xFE	; 254
     cd8:	80 93 ce 05 	sts	0x05CE, r24

	switch (SERVO.cmd_fr.cmde) {
     cdc:	90 91 cd 05 	lds	r25, 0x05CD
     ce0:	97 31       	cpi	r25, 0x17	; 23
     ce2:	21 f0       	breq	.+8      	; 0xcec <SERVO_cmde.constprop.1+0x48>
     ce4:	98 31       	cpi	r25, 0x18	; 24
     ce6:	09 f0       	breq	.+2      	; 0xcea <SERVO_cmde.constprop.1+0x46>
     ce8:	85 c0       	rjmp	.+266    	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
     cea:	2c c0       	rjmp	.+88     	; 0xd44 <SERVO_cmde.constprop.1+0xa0>
		case FR_MINUT_SERVO_CMD:
			// drive the servo
			SERVO_drive(SERVO.cmd_fr.argv[0], SERVO.cmd_fr.argv[1]);
     cec:	80 91 d0 05 	lds	r24, 0x05D0
}


static void SERVO_drive(u8 servo, u8 sense)
{
	switch (servo) {
     cf0:	90 91 cf 05 	lds	r25, 0x05CF
     cf4:	95 35       	cpi	r25, 0x55	; 85
     cf6:	91 f0       	breq	.+36     	; 0xd1c <SERVO_cmde.constprop.1+0x78>
     cf8:	9a 3a       	cpi	r25, 0xAA	; 170
     cfa:	09 f0       	breq	.+2      	; 0xcfe <SERVO_cmde.constprop.1+0x5a>
     cfc:	7e c0       	rjmp	.+252    	; 0xdfa <SERVO_cmde.constprop.1+0x156>
	case 0xaa:
		switch (sense) {
     cfe:	8f 30       	cpi	r24, 0x0F	; 15
     d00:	e1 f0       	breq	.+56     	; 0xd3a <SERVO_cmde.constprop.1+0x96>
     d02:	81 3c       	cpi	r24, 0xC1	; 193
     d04:	31 f0       	breq	.+12     	; 0xd12 <SERVO_cmde.constprop.1+0x6e>
     d06:	89 30       	cpi	r24, 0x09	; 9
     d08:	09 f0       	breq	.+2      	; 0xd0c <SERVO_cmde.constprop.1+0x68>
     d0a:	77 c0       	rjmp	.+238    	; 0xdfa <SERVO_cmde.constprop.1+0x156>
		case 0x09:	// open
			SERVO_cone_on(SERVO.cone.open_pos);
     d0c:	80 91 61 05 	lds	r24, 0x0561
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <SERVO_cmde.constprop.1+0x72>
			break;

		case 0xc1:	// close
			SERVO_cone_on(SERVO.cone.close_pos);
     d12:	80 91 62 05 	lds	r24, 0x0562
     d16:	0e 94 ed 05 	call	0xbda	; 0xbda <SERVO_cone_on>
     d1a:	6f c0       	rjmp	.+222    	; 0xdfa <SERVO_cmde.constprop.1+0x156>
			break;
		}
		break;

	case 0x55:
		switch (sense) {
     d1c:	8f 30       	cpi	r24, 0x0F	; 15
     d1e:	69 f0       	breq	.+26     	; 0xd3a <SERVO_cmde.constprop.1+0x96>
     d20:	81 3c       	cpi	r24, 0xC1	; 193
     d22:	31 f0       	breq	.+12     	; 0xd30 <SERVO_cmde.constprop.1+0x8c>
     d24:	89 30       	cpi	r24, 0x09	; 9
     d26:	09 f0       	breq	.+2      	; 0xd2a <SERVO_cmde.constprop.1+0x86>
     d28:	68 c0       	rjmp	.+208    	; 0xdfa <SERVO_cmde.constprop.1+0x156>
		case 0x09:	// open
			SERVO_aero_on(SERVO.aero.open_pos);
     d2a:	80 91 63 05 	lds	r24, 0x0563
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <SERVO_cmde.constprop.1+0x90>
			break;

		case 0xc1:	// close
			SERVO_aero_on(SERVO.aero.close_pos);
     d30:	80 91 64 05 	lds	r24, 0x0564
     d34:	0e 94 07 06 	call	0xc0e	; 0xc0e <SERVO_aero_on>
     d38:	60 c0       	rjmp	.+192    	; 0xdfa <SERVO_cmde.constprop.1+0x156>

// deactivate the aero servo to save power
static void SERVO_aero_off(void)
{
	// configure port
	SERVO_DDR |= SERVO_CONE;
     d3a:	23 9a       	sbi	0x04, 3	; 4

	// stop the pwm generation
	TMR0_stop();
     d3c:	0e 94 b9 13 	call	0x2772	; 0x2772 <TMR0_stop>

	// force output low
	SERVO_PORT &= ~SERVO_CONE;
     d40:	2b 98       	cbi	0x05, 3	; 5
     d42:	5b c0       	rjmp	.+182    	; 0xdfa <SERVO_cmde.constprop.1+0x156>
}


static void SERVO_position(frame_t* fr)
{
	switch ( fr->argv[0] ) {
     d44:	90 91 cf 05 	lds	r25, 0x05CF
     d48:	95 35       	cpi	r25, 0x55	; 85
     d4a:	69 f1       	breq	.+90     	; 0xda6 <SERVO_cmde.constprop.1+0x102>
     d4c:	9a 3a       	cpi	r25, 0xAA	; 170
     d4e:	09 f0       	breq	.+2      	; 0xd52 <SERVO_cmde.constprop.1+0xae>
     d50:	51 c0       	rjmp	.+162    	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
	case 0xaa:
		switch ( fr->argv[1] ) {
     d52:	90 91 d0 05 	lds	r25, 0x05D0
     d56:	99 23       	and	r25, r25
     d58:	21 f0       	breq	.+8      	; 0xd62 <SERVO_cmde.constprop.1+0xbe>
     d5a:	9f 3f       	cpi	r25, 0xFF	; 255
     d5c:	09 f0       	breq	.+2      	; 0xd60 <SERVO_cmde.constprop.1+0xbc>
     d5e:	4a c0       	rjmp	.+148    	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
     d60:	12 c0       	rjmp	.+36     	; 0xd86 <SERVO_cmde.constprop.1+0xe2>
}


static void SERVO_cone_save(frame_t* fr)
{
	switch ( fr->argv[2] ) {
     d62:	90 91 d1 05 	lds	r25, 0x05D1
     d66:	99 23       	and	r25, r25
     d68:	21 f0       	breq	.+8      	; 0xd72 <SERVO_cmde.constprop.1+0xce>
     d6a:	9f 3f       	cpi	r25, 0xFF	; 255
     d6c:	09 f0       	breq	.+2      	; 0xd70 <SERVO_cmde.constprop.1+0xcc>
     d6e:	42 c0       	rjmp	.+132    	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <SERVO_cmde.constprop.1+0xd8>
	case 0x00:	// open position
		SERVO.cone.open_pos = fr->argv[3];
     d72:	80 91 d2 05 	lds	r24, 0x05D2
     d76:	80 93 61 05 	sts	0x0561, r24
     d7a:	3f c0       	rjmp	.+126    	; 0xdfa <SERVO_cmde.constprop.1+0x156>
		break;

	case 0xff:	// closed position
		SERVO.cone.close_pos = fr->argv[3];
     d7c:	80 91 d2 05 	lds	r24, 0x05D2
     d80:	80 93 62 05 	sts	0x0562, r24
     d84:	3a c0       	rjmp	.+116    	; 0xdfa <SERVO_cmde.constprop.1+0x156>
}


static void SERVO_cone_read(frame_t* fr)
{
	switch ( fr->argv[2] ) {
     d86:	80 91 d1 05 	lds	r24, 0x05D1
     d8a:	88 23       	and	r24, r24
     d8c:	19 f0       	breq	.+6      	; 0xd94 <SERVO_cmde.constprop.1+0xf0>
     d8e:	8f 3f       	cpi	r24, 0xFF	; 255
     d90:	39 f4       	brne	.+14     	; 0xda0 <SERVO_cmde.constprop.1+0xfc>
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <SERVO_cmde.constprop.1+0xf6>
	case 0x00:	// open position
		fr->argv[3] = SERVO.cone.open_pos;
     d94:	80 91 61 05 	lds	r24, 0x0561
     d98:	2a c0       	rjmp	.+84     	; 0xdee <SERVO_cmde.constprop.1+0x14a>
		break;

	case 0xff:	// closed position
		fr->argv[3] = SERVO.cone.close_pos;
     d9a:	80 91 62 05 	lds	r24, 0x0562
     d9e:	27 c0       	rjmp	.+78     	; 0xdee <SERVO_cmde.constprop.1+0x14a>
		break;

	default:
		// shall never happen
		fr->error = 1;
     da0:	80 91 ce 05 	lds	r24, 0x05CE
     da4:	27 c0       	rjmp	.+78     	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
			break;
		}
		break;

	case 0x55:
		switch ( fr->argv[1] ) {
     da6:	90 91 d0 05 	lds	r25, 0x05D0
     daa:	99 23       	and	r25, r25
     dac:	19 f0       	breq	.+6      	; 0xdb4 <SERVO_cmde.constprop.1+0x110>
     dae:	9f 3f       	cpi	r25, 0xFF	; 255
     db0:	09 f5       	brne	.+66     	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
     db2:	11 c0       	rjmp	.+34     	; 0xdd6 <SERVO_cmde.constprop.1+0x132>
}


static void SERVO_aero_save(frame_t* fr)
{
	switch ( fr->argv[2] ) {
     db4:	90 91 d1 05 	lds	r25, 0x05D1
     db8:	99 23       	and	r25, r25
     dba:	19 f0       	breq	.+6      	; 0xdc2 <SERVO_cmde.constprop.1+0x11e>
     dbc:	9f 3f       	cpi	r25, 0xFF	; 255
     dbe:	d1 f4       	brne	.+52     	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <SERVO_cmde.constprop.1+0x128>
	case 0x00:	// open position
		SERVO.aero.open_pos = fr->argv[3];
     dc2:	80 91 d2 05 	lds	r24, 0x05D2
     dc6:	80 93 63 05 	sts	0x0563, r24
     dca:	17 c0       	rjmp	.+46     	; 0xdfa <SERVO_cmde.constprop.1+0x156>
		break;

	case 0xff:	// closed position
		SERVO.aero.close_pos = fr->argv[3];
     dcc:	80 91 d2 05 	lds	r24, 0x05D2
     dd0:	80 93 64 05 	sts	0x0564, r24
     dd4:	12 c0       	rjmp	.+36     	; 0xdfa <SERVO_cmde.constprop.1+0x156>
}


static void SERVO_aero_read(frame_t* fr)
{
	switch ( fr->argv[2] ) {
     dd6:	90 91 d1 05 	lds	r25, 0x05D1
     dda:	99 23       	and	r25, r25
     ddc:	19 f0       	breq	.+6      	; 0xde4 <SERVO_cmde.constprop.1+0x140>
     dde:	9f 3f       	cpi	r25, 0xFF	; 255
     de0:	49 f4       	brne	.+18     	; 0xdf4 <SERVO_cmde.constprop.1+0x150>
     de2:	03 c0       	rjmp	.+6      	; 0xdea <SERVO_cmde.constprop.1+0x146>
	case 0x00:	// open position
		fr->argv[3] = SERVO.aero.open_pos;
     de4:	80 91 63 05 	lds	r24, 0x0563
     de8:	02 c0       	rjmp	.+4      	; 0xdee <SERVO_cmde.constprop.1+0x14a>
		break;

	case 0xff:	// closed position
		fr->argv[3] = SERVO.aero.close_pos;
     dea:	80 91 64 05 	lds	r24, 0x0564
     dee:	80 93 d2 05 	sts	0x05D2, r24
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <SERVO_cmde.constprop.1+0x156>
			SERVO_position(&SERVO.cmd_fr);
			break;

		default:
			// shall never happen
			SERVO.cmd_fr.error = 1;
     df4:	81 60       	ori	r24, 0x01	; 1
     df6:	80 93 ce 05 	sts	0x05CE, r24
			break;
	}

	// send the response
	swap = SERVO.cmd_fr.orig;
     dfa:	80 91 cb 05 	lds	r24, 0x05CB
	SERVO.cmd_fr.orig = SERVO.cmd_fr.dest;
     dfe:	90 91 ca 05 	lds	r25, 0x05CA
     e02:	90 93 cb 05 	sts	0x05CB, r25
	SERVO.cmd_fr.dest = swap;
     e06:	80 93 ca 05 	sts	0x05CA, r24
	SERVO.cmd_fr.resp = 1;
     e0a:	80 91 ce 05 	lds	r24, 0x05CE
     e0e:	82 60       	ori	r24, 0x02	; 2
     e10:	80 93 ce 05 	sts	0x05CE, r24
	//SERVO.cmd_fr.nat = 0;
	PT_WAIT_UNTIL(pt, OK == FIFO_put(&SERVO.out, &SERVO.cmd_fr));
     e14:	8a e0       	ldi	r24, 0x0A	; 10
     e16:	97 e0       	ldi	r25, 0x07	; 7
     e18:	90 93 55 05 	sts	0x0555, r25
     e1c:	80 93 54 05 	sts	0x0554, r24
     e20:	6a ec       	ldi	r22, 0xCA	; 202
     e22:	75 e0       	ldi	r23, 0x05	; 5
     e24:	82 e9       	ldi	r24, 0x92	; 146
     e26:	95 e0       	ldi	r25, 0x05	; 5
     e28:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	21 f4       	brne	.+8      	; 0xe38 <SERVO_cmde.constprop.1+0x194>

	// and restart waiting for incoming command
	PT_RESTART(pt);
     e30:	10 92 55 05 	sts	0x0555, r1
     e34:	10 92 54 05 	sts	0x0554, r1

	PT_END(pt);
}
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret

00000e3c <SERVO_init>:
//

void SERVO_init(void)
{
	// init
	FIFO_init(&SERVO.in, &SERVO.in_buf, IN_FIFO_SIZE, sizeof(frame_t));
     e3c:	2b e0       	ldi	r18, 0x0B	; 11
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	43 e0       	ldi	r20, 0x03	; 3
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	61 e7       	ldi	r22, 0x71	; 113
     e46:	75 e0       	ldi	r23, 0x05	; 5
     e48:	85 e6       	ldi	r24, 0x65	; 101
     e4a:	95 e0       	ldi	r25, 0x05	; 5
     e4c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	FIFO_init(&SERVO.out, &SERVO.out_buf, OUT_FIFO_SIZE, sizeof(frame_t));
     e50:	2b e0       	ldi	r18, 0x0B	; 11
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	43 e0       	ldi	r20, 0x03	; 3
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	6e e9       	ldi	r22, 0x9E	; 158
     e5a:	75 e0       	ldi	r23, 0x05	; 5
     e5c:	82 e9       	ldi	r24, 0x92	; 146
     e5e:	95 e0       	ldi	r25, 0x05	; 5
     e60:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>

	SERVO.interf.channel = 7;
     e64:	87 e0       	ldi	r24, 0x07	; 7
     e66:	80 93 56 05 	sts	0x0556, r24
	SERVO.interf.cmde_mask = _CM(FR_MINUT_SERVO_CMD) | _CM(FR_MINUT_SERVO_INFO);
     e6a:	e7 e5       	ldi	r30, 0x57	; 87
     e6c:	f5 e0       	ldi	r31, 0x05	; 5
     e6e:	10 82       	st	Z, r1
     e70:	11 82       	std	Z+1, r1	; 0x01
     e72:	80 e8       	ldi	r24, 0x80	; 128
     e74:	82 83       	std	Z+2, r24	; 0x02
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	83 83       	std	Z+3, r24	; 0x03
     e7a:	14 82       	std	Z+4, r1	; 0x04
     e7c:	15 82       	std	Z+5, r1	; 0x05
     e7e:	16 82       	std	Z+6, r1	; 0x06
     e80:	17 82       	std	Z+7, r1	; 0x07
	SERVO.interf.queue = &SERVO.in;
     e82:	85 e6       	ldi	r24, 0x65	; 101
     e84:	95 e0       	ldi	r25, 0x05	; 5
     e86:	90 93 60 05 	sts	0x0560, r25
     e8a:	80 93 5f 05 	sts	0x055F, r24
	DPT_register(&SERVO.interf);
     e8e:	86 e5       	ldi	r24, 0x56	; 86
     e90:	95 e0       	ldi	r25, 0x05	; 5
     e92:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DPT_register>

	PT_INIT(&SERVO.pt);
     e96:	10 92 53 05 	sts	0x0553, r1
     e9a:	10 92 52 05 	sts	0x0552, r1
	PT_INIT(&SERVO.pt_cmde);
     e9e:	10 92 55 05 	sts	0x0555, r1
     ea2:	10 92 54 05 	sts	0x0554, r1
     ea6:	08 95       	ret

00000ea8 <SERVO_run>:


void SERVO_run(void)
{
	// if incoming command available
	(void)PT_SCHEDULE(SERVO_cmde(&SERVO.pt_cmde));
     ea8:	0e 94 52 06 	call	0xca4	; 0xca4 <SERVO_cmde.constprop.1>

	// if outgoing frame to send
	(void)PT_SCHEDULE(SERVO_resp(&SERVO.pt));
     eac:	0e 94 21 06 	call	0xc42	; 0xc42 <SERVO_resp.constprop.0>
     eb0:	08 95       	ret

00000eb2 <ACQ_acq.constprop.0>:

// ------------------------------------------
// private functions
//

static PT_THREAD( ACQ_acq(pt_t* pt) )
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <ACQ_acq.constprop.0+0xe>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <ACQ_acq.constprop.0+0x10>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <ACQ_acq.constprop.0+0x12>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	u16 acc_z;
	u16 gyr_x;
	u16 gyr_y;
	u16 gyr_z;

	PT_BEGIN(pt);
     ec8:	e0 91 d5 05 	lds	r30, 0x05D5
     ecc:	f0 91 d6 05 	lds	r31, 0x05D6
     ed0:	30 97       	sbiw	r30, 0x00	; 0
     ed2:	09 f0       	breq	.+2      	; 0xed6 <ACQ_acq.constprop.0+0x24>
     ed4:	09 94       	ijmp

	// MPU-6050 acquisitions init
	PT_WAIT_UNTIL(pt, ADXL_init() && ADXL_range_set(ADXL_16G) );
     ed6:	8b e6       	ldi	r24, 0x6B	; 107
     ed8:	97 e0       	ldi	r25, 0x07	; 7
     eda:	90 93 d6 05 	sts	0x05D6, r25
     ede:	80 93 d5 05 	sts	0x05D5, r24
     ee2:	0e 94 58 18 	call	0x30b0	; 0x30b0 <ADXL_init>
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <ACQ_acq.constprop.0+0x3a>
     eea:	67 c0       	rjmp	.+206    	; 0xfba <ACQ_acq.constprop.0+0x108>
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	0e 94 86 18 	call	0x310c	; 0x310c <ADXL_range_set>
     ef2:	88 23       	and	r24, r24
     ef4:	09 f4       	brne	.+2      	; 0xef8 <ACQ_acq.constprop.0+0x46>
     ef6:	61 c0       	rjmp	.+194    	; 0xfba <ACQ_acq.constprop.0+0x108>

	// common measurement frames header
	ACQ.fr.orig = DPT_SELF_ADDR;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 e3 05 	sts	0x05E3, r24
	ACQ.fr.dest = DPT_SELF_ADDR;
     efe:	80 93 e2 05 	sts	0x05E2, r24
	ACQ.fr.status = 0;
     f02:	10 92 e6 05 	sts	0x05E6, r1

	while (1) {
		// if it is time for an acquisition
		PT_WAIT_UNTIL(pt, ACQ.time < TIME_get() );
     f06:	83 e8       	ldi	r24, 0x83	; 131
     f08:	97 e0       	ldi	r25, 0x07	; 7
     f0a:	90 93 d6 05 	sts	0x05D6, r25
     f0e:	80 93 d5 05 	sts	0x05D5, r24
     f12:	c0 90 ed 05 	lds	r12, 0x05ED
     f16:	d0 90 ee 05 	lds	r13, 0x05EE
     f1a:	e0 90 ef 05 	lds	r14, 0x05EF
     f1e:	f0 90 f0 05 	lds	r15, 0x05F0
     f22:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     f26:	c6 16       	cp	r12, r22
     f28:	d7 06       	cpc	r13, r23
     f2a:	e8 06       	cpc	r14, r24
     f2c:	f9 06       	cpc	r15, r25
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <ACQ_acq.constprop.0+0x80>
     f30:	44 c0       	rjmp	.+136    	; 0xfba <ACQ_acq.constprop.0+0x108>

		// compute next time acquisition
		ACQ.time = 100 * TIME_1_MSEC + TIME_get();
     f32:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
     f36:	68 51       	subi	r22, 0x18	; 24
     f38:	7c 4f       	sbci	r23, 0xFC	; 252
     f3a:	8f 4f       	sbci	r24, 0xFF	; 255
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	60 93 ed 05 	sts	0x05ED, r22
     f42:	70 93 ee 05 	sts	0x05EE, r23
     f46:	80 93 ef 05 	sts	0x05EF, r24
     f4a:	90 93 f0 05 	sts	0x05F0, r25

		// get the accelerations
		ADXL_get(&acc_x, &acc_y, &acc_z);
     f4e:	ae 01       	movw	r20, r28
     f50:	4f 5f       	subi	r20, 0xFF	; 255
     f52:	5f 4f       	sbci	r21, 0xFF	; 255
     f54:	be 01       	movw	r22, r28
     f56:	6d 5f       	subi	r22, 0xFD	; 253
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	ce 01       	movw	r24, r28
     f5c:	05 96       	adiw	r24, 0x05	; 5
     f5e:	0e 94 9e 18 	call	0x313c	; 0x313c <ADXL_get>

		// build the acceleration frame
		ACQ.fr.cmde = FR_DATA_ACC;
     f62:	81 e2       	ldi	r24, 0x21	; 33
     f64:	80 93 e5 05 	sts	0x05E5, r24
		ACQ.fr.argv[0] = (acc_x >> 8) & 0x00ff;
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	90 93 e7 05 	sts	0x05E7, r25
		ACQ.fr.argv[1] = (acc_x >> 0) & 0x00ff;
     f70:	80 93 e8 05 	sts	0x05E8, r24
		ACQ.fr.argv[2] = (acc_y >> 8) & 0x00ff;
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	90 93 e9 05 	sts	0x05E9, r25
		ACQ.fr.argv[3] = (acc_y >> 0) & 0x00ff;
     f7c:	80 93 ea 05 	sts	0x05EA, r24
		ACQ.fr.argv[4] = (acc_z >> 8) & 0x00ff;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	90 93 eb 05 	sts	0x05EB, r25
		ACQ.fr.argv[5] = (acc_z >> 0) & 0x00ff;
     f88:	80 93 ec 05 	sts	0x05EC, r24

		// send the acceleration frame
		DPT_lock(&ACQ.interf);
     f8c:	87 ed       	ldi	r24, 0xD7	; 215
     f8e:	95 e0       	ldi	r25, 0x05	; 5
     f90:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <DPT_lock>
		PT_WAIT_UNTIL(pt, DPT_tx(&ACQ.interf, &ACQ.fr));
     f94:	8a ec       	ldi	r24, 0xCA	; 202
     f96:	97 e0       	ldi	r25, 0x07	; 7
     f98:	90 93 d6 05 	sts	0x05D6, r25
     f9c:	80 93 d5 05 	sts	0x05D5, r24
     fa0:	62 ee       	ldi	r22, 0xE2	; 226
     fa2:	75 e0       	ldi	r23, 0x05	; 5
     fa4:	87 ed       	ldi	r24, 0xD7	; 215
     fa6:	95 e0       	ldi	r25, 0x05	; 5
     fa8:	0e 94 46 10 	call	0x208c	; 0x208c <DPT_tx>
     fac:	88 23       	and	r24, r24
     fae:	29 f0       	breq	.+10     	; 0xfba <ACQ_acq.constprop.0+0x108>
		DPT_unlock(&ACQ.interf);
     fb0:	87 ed       	ldi	r24, 0xD7	; 215
     fb2:	95 e0       	ldi	r25, 0x05	; 5
     fb4:	0e 94 1d 10 	call	0x203a	; 0x203a <DPT_unlock>
     fb8:	a6 cf       	rjmp	.-180    	; 0xf06 <ACQ_acq.constprop.0+0x54>

		// and loop for next acquisition
	}

	PT_END(pt);
}
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	26 96       	adiw	r28, 0x06	; 6
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	08 95       	ret

00000fd6 <ACQ_init>:
//

void ACQ_init(void)
{
	// init
	ACQ.interf.channel = 11;
     fd6:	8b e0       	ldi	r24, 0x0B	; 11
     fd8:	80 93 d7 05 	sts	0x05D7, r24
	ACQ.interf.cmde_mask = 0;
     fdc:	e8 ed       	ldi	r30, 0xD8	; 216
     fde:	f5 e0       	ldi	r31, 0x05	; 5
     fe0:	10 82       	st	Z, r1
     fe2:	11 82       	std	Z+1, r1	; 0x01
     fe4:	12 82       	std	Z+2, r1	; 0x02
     fe6:	13 82       	std	Z+3, r1	; 0x03
     fe8:	14 82       	std	Z+4, r1	; 0x04
     fea:	15 82       	std	Z+5, r1	; 0x05
     fec:	16 82       	std	Z+6, r1	; 0x06
     fee:	17 82       	std	Z+7, r1	; 0x07
	ACQ.interf.queue = NULL;
     ff0:	10 92 e1 05 	sts	0x05E1, r1
     ff4:	10 92 e0 05 	sts	0x05E0, r1
	DPT_register(&ACQ.interf);
     ff8:	87 ed       	ldi	r24, 0xD7	; 215
     ffa:	95 e0       	ldi	r25, 0x05	; 5
     ffc:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DPT_register>

	ACQ.time = 100 * TIME_1_MSEC;
    1000:	88 ee       	ldi	r24, 0xE8	; 232
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	a0 e0       	ldi	r26, 0x00	; 0
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	80 93 ed 05 	sts	0x05ED, r24
    100c:	90 93 ee 05 	sts	0x05EE, r25
    1010:	a0 93 ef 05 	sts	0x05EF, r26
    1014:	b0 93 f0 05 	sts	0x05F0, r27

	PT_INIT(&ACQ.pt);
    1018:	10 92 d6 05 	sts	0x05D6, r1
    101c:	10 92 d5 05 	sts	0x05D5, r1

	// disable analog inputs
	DIDR0 = _BV(ADC5D) | _BV(ADC4D) | _BV(ADC3D) | _BV(ADC2D);
    1020:	8c e3       	ldi	r24, 0x3C	; 60
    1022:	80 93 7e 00 	sts	0x007E, r24
    1026:	08 95       	ret

00001028 <ACQ_run>:


void ACQ_run(void)
{
	// if incoming command available
	(void)PT_SCHEDULE(ACQ_acq(&ACQ.pt));
    1028:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ACQ_acq.constprop.0>
    102c:	08 95       	ret

0000102e <frame_set_0>:
#include "fr_cmdes.h"


u8 frame_set_0(frame_t* fr, u8 dest, u8 orig, fr_cmdes_t cmde)
{
    102e:	fc 01       	movw	r30, r24
	fr->dest = dest;
    1030:	60 83       	st	Z, r22
	fr->orig = orig;
    1032:	41 83       	std	Z+1, r20	; 0x01
	fr->cmde = cmde;
    1034:	23 83       	std	Z+3, r18	; 0x03
	fr->status = 0;
    1036:	14 82       	std	Z+4, r1	; 0x04

	return OK;
}
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	08 95       	ret

0000103c <frame_set_1>:


u8 frame_set_1(frame_t* fr, u8 dest, u8 orig, fr_cmdes_t cmde, u8 argv0)
{
    103c:	0f 93       	push	r16
    103e:	fc 01       	movw	r30, r24
	fr->dest = dest;
    1040:	60 83       	st	Z, r22
	fr->orig = orig;
    1042:	41 83       	std	Z+1, r20	; 0x01
	fr->cmde = cmde;
    1044:	23 83       	std	Z+3, r18	; 0x03
	fr->status = 0;
    1046:	14 82       	std	Z+4, r1	; 0x04
	fr->argv[0] = argv0;
    1048:	05 83       	std	Z+5, r16	; 0x05

	return OK;
}
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <frame_set_2>:


u8 frame_set_2(frame_t* fr, u8 dest, u8 orig, fr_cmdes_t cmde, u8 argv0, u8 argv1)
{
    1050:	ef 92       	push	r14
    1052:	0f 93       	push	r16
    1054:	fc 01       	movw	r30, r24
	fr->dest = dest;
    1056:	60 83       	st	Z, r22
	fr->orig = orig;
    1058:	41 83       	std	Z+1, r20	; 0x01
	fr->cmde = cmde;
    105a:	23 83       	std	Z+3, r18	; 0x03
	fr->status = 0;
    105c:	14 82       	std	Z+4, r1	; 0x04
	fr->argv[0] = argv0;
    105e:	05 83       	std	Z+5, r16	; 0x05
	fr->argv[1] = argv1;
    1060:	e6 82       	std	Z+6, r14	; 0x06

	return OK;
}
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	0f 91       	pop	r16
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <frame_set_3>:


u8 frame_set_3(frame_t* fr, u8 dest, u8 orig, fr_cmdes_t cmde, u8 argv0, u8 argv1, u8 argv2)
{
    106a:	cf 92       	push	r12
    106c:	ef 92       	push	r14
    106e:	0f 93       	push	r16
    1070:	fc 01       	movw	r30, r24
	fr->dest = dest;
    1072:	60 83       	st	Z, r22
	fr->orig = orig;
    1074:	41 83       	std	Z+1, r20	; 0x01
	fr->cmde = cmde;
    1076:	23 83       	std	Z+3, r18	; 0x03
	fr->status = 0;
    1078:	14 82       	std	Z+4, r1	; 0x04
	fr->argv[0] = argv0;
    107a:	05 83       	std	Z+5, r16	; 0x05
	fr->argv[1] = argv1;
    107c:	e6 82       	std	Z+6, r14	; 0x06
	fr->argv[2] = argv2;
    107e:	c7 82       	std	Z+7, r12	; 0x07

	return OK;
}
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0f 91       	pop	r16
    1084:	ef 90       	pop	r14
    1086:	cf 90       	pop	r12
    1088:	08 95       	ret

0000108a <frame_set_4>:


u8 frame_set_4(frame_t* fr, u8 dest, u8 orig, fr_cmdes_t cmde, u8 argv0, u8 argv1, u8 argv2, u8 argv3)
{
    108a:	af 92       	push	r10
    108c:	cf 92       	push	r12
    108e:	ef 92       	push	r14
    1090:	0f 93       	push	r16
    1092:	fc 01       	movw	r30, r24
	fr->dest = dest;
    1094:	60 83       	st	Z, r22
	fr->orig = orig;
    1096:	41 83       	std	Z+1, r20	; 0x01
	fr->cmde = cmde;
    1098:	23 83       	std	Z+3, r18	; 0x03
	fr->status = 0;
    109a:	14 82       	std	Z+4, r1	; 0x04
	fr->argv[0] = argv0;
    109c:	05 83       	std	Z+5, r16	; 0x05
	fr->argv[1] = argv1;
    109e:	e6 82       	std	Z+6, r14	; 0x06
	fr->argv[2] = argv2;
    10a0:	c7 82       	std	Z+7, r12	; 0x07
	fr->argv[3] = argv3;
    10a2:	a0 86       	std	Z+8, r10	; 0x08

	return OK;
}
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0f 91       	pop	r16
    10a8:	ef 90       	pop	r14
    10aa:	cf 90       	pop	r12
    10ac:	af 90       	pop	r10
    10ae:	08 95       	ret

000010b0 <frame_set_5>:


u8 frame_set_5(frame_t* fr, u8 dest, u8 orig, fr_cmdes_t cmde, u8 argv0, u8 argv1, u8 argv2, u8 argv3, u8 argv4)
{
    10b0:	8f 92       	push	r8
    10b2:	af 92       	push	r10
    10b4:	cf 92       	push	r12
    10b6:	ef 92       	push	r14
    10b8:	0f 93       	push	r16
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	fc 01       	movw	r30, r24
	fr->dest = dest;
    10c4:	60 83       	st	Z, r22
	fr->orig = orig;
    10c6:	41 83       	std	Z+1, r20	; 0x01
	fr->cmde = cmde;
    10c8:	23 83       	std	Z+3, r18	; 0x03
	fr->status = 0;
    10ca:	14 82       	std	Z+4, r1	; 0x04
	fr->argv[0] = argv0;
    10cc:	05 83       	std	Z+5, r16	; 0x05
	fr->argv[1] = argv1;
    10ce:	e6 82       	std	Z+6, r14	; 0x06
	fr->argv[2] = argv2;
    10d0:	c7 82       	std	Z+7, r12	; 0x07
	fr->argv[3] = argv3;
    10d2:	a0 86       	std	Z+8, r10	; 0x08
	fr->argv[4] = argv4;
    10d4:	81 86       	std	Z+9, r8	; 0x09

	return OK;
}
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	0f 91       	pop	r16
    10de:	ef 90       	pop	r14
    10e0:	cf 90       	pop	r12
    10e2:	af 90       	pop	r10
    10e4:	8f 90       	pop	r8
    10e6:	08 95       	ret

000010e8 <BSC_frame_handling>:
//

// frame handling
//static
PT_THREAD(BSC_frame_handling(pt_t* pt))
{
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
	u32 time, delay;

	PT_BEGIN(pt);
    10f6:	e8 81       	ld	r30, Y
    10f8:	f9 81       	ldd	r31, Y+1	; 0x01
    10fa:	30 97       	sbiw	r30, 0x00	; 0
    10fc:	09 f0       	breq	.+2      	; 0x1100 <BSC_frame_handling+0x18>
    10fe:	09 94       	ijmp

	BSC.data = 0;
    1100:	10 92 4f 02 	sts	0x024F, r1
    1104:	10 92 4e 02 	sts	0x024E, r1
	BSC.is_running = TRUE;
    1108:	90 91 50 02 	lds	r25, 0x0250
    110c:	91 60       	ori	r25, 0x01	; 1
    110e:	90 93 50 02 	sts	0x0250, r25

	// if receiving a response or an error frame
	if ( BSC.in.resp || BSC.in.error ) {
    1112:	80 91 c6 01 	lds	r24, 0x01C6
    1116:	28 2f       	mov	r18, r24
    1118:	23 70       	andi	r18, 0x03	; 3
    111a:	21 f0       	breq	.+8      	; 0x1124 <BSC_frame_handling+0x3c>
		// ignore it
		BSC.is_running = FALSE;
    111c:	9e 7f       	andi	r25, 0xFE	; 254
    111e:	90 93 50 02 	sts	0x0250, r25
    1122:	8c c1       	rjmp	.+792    	; 0x143c <BSC_frame_handling+0x354>
		PT_EXIT(pt);
	}

	// build response frame
	BSC.resp.dest = BSC.in.orig;
    1124:	90 91 c3 01 	lds	r25, 0x01C3
    1128:	90 93 35 02 	sts	0x0235, r25
	BSC.resp.orig = BSC.in.dest;
    112c:	90 91 c2 01 	lds	r25, 0x01C2
    1130:	90 93 36 02 	sts	0x0236, r25
	BSC.resp.t_id = BSC.in.t_id;
    1134:	90 91 c4 01 	lds	r25, 0x01C4
    1138:	90 93 37 02 	sts	0x0237, r25
	BSC.resp.resp = 1;
    113c:	90 91 39 02 	lds	r25, 0x0239
	BSC.resp.error = BSC.in.error;
    1140:	92 60       	ori	r25, 0x02	; 2
    1142:	80 fb       	bst	r24, 0
    1144:	90 f9       	bld	r25, 0
	BSC.resp.cmde = BSC.in.cmde;
    1146:	40 91 c5 01 	lds	r20, 0x01C5
    114a:	40 93 38 02 	sts	0x0238, r20
	BSC.resp.eth = BSC.in.eth;
    114e:	83 fb       	bst	r24, 3
    1150:	22 27       	eor	r18, r18
    1152:	20 f9       	bld	r18, 0
    1154:	20 fb       	bst	r18, 0
    1156:	93 f9       	bld	r25, 3
	BSC.resp.serial = BSC.in.serial;
    1158:	82 95       	swap	r24
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	80 fb       	bst	r24, 0
    115e:	94 f9       	bld	r25, 4
    1160:	90 93 39 02 	sts	0x0239, r25
	BSC.resp.argv[0] = BSC.in.argv[0];
    1164:	30 91 c7 01 	lds	r19, 0x01C7
    1168:	30 93 3a 02 	sts	0x023A, r19
	BSC.resp.argv[1] = BSC.in.argv[1];
    116c:	20 91 c8 01 	lds	r18, 0x01C8
    1170:	20 93 3b 02 	sts	0x023B, r18
	BSC.resp.argv[2] = BSC.in.argv[2];
    1174:	b0 91 c9 01 	lds	r27, 0x01C9
    1178:	b0 93 3c 02 	sts	0x023C, r27
	BSC.resp.argv[3] = BSC.in.argv[3];
    117c:	a0 91 ca 01 	lds	r26, 0x01CA
    1180:	a0 93 3d 02 	sts	0x023D, r26
	BSC.resp.argv[4] = BSC.in.argv[4];
    1184:	80 91 cb 01 	lds	r24, 0x01CB
    1188:	80 93 3e 02 	sts	0x023E, r24
	BSC.resp.argv[5] = BSC.in.argv[5];
    118c:	80 91 cc 01 	lds	r24, 0x01CC
    1190:	80 93 3f 02 	sts	0x023F, r24

	// extract address (in most frames, the 2 first argv are an u16)
	BSC.addr = (u16*)( (u16)(BSC.in.argv[0] << 8) + BSC.in.argv[1] );
    1194:	93 2f       	mov	r25, r19
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	82 0f       	add	r24, r18
    119a:	91 1d       	adc	r25, r1
    119c:	90 93 4d 02 	sts	0x024D, r25
    11a0:	80 93 4c 02 	sts	0x024C, r24

	switch (BSC.in.cmde) {
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	42 50       	subi	r20, 0x02	; 2
    11a8:	51 09       	sbc	r21, r1
    11aa:	4b 30       	cpi	r20, 0x0B	; 11
    11ac:	51 05       	cpc	r21, r1
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <BSC_frame_handling+0xca>
    11b0:	40 c1       	rjmp	.+640    	; 0x1432 <BSC_frame_handling+0x34a>
    11b2:	4c 5c       	subi	r20, 0xCC	; 204
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	fa 01       	movw	r30, r20
    11b8:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>
			// nothing to do
			break;

		case FR_RAM_READ:
			// read data
			BSC.data = *BSC.addr;
    11bc:	fc 01       	movw	r30, r24
    11be:	20 81       	ld	r18, Z
    11c0:	81 81       	ldd	r24, Z+1	; 0x01
    11c2:	20 93 4e 02 	sts	0x024E, r18
    11c6:	80 93 4f 02 	sts	0x024F, r24
			BSC.resp.argv[2] = (BSC.data & 0xff00) >> 8;
    11ca:	80 93 3c 02 	sts	0x023C, r24
    11ce:	4a c0       	rjmp	.+148    	; 0x1264 <BSC_frame_handling+0x17c>

			break;

		case FR_RAM_WRITE:
			// extract data
			BSC.data = (BSC.in.argv[2] << 8) + BSC.in.argv[3];
    11d0:	3b 2f       	mov	r19, r27
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	2a 0f       	add	r18, r26
    11d6:	31 1d       	adc	r19, r1

			// write data
			*BSC.addr = BSC.data;
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
    11dc:	31 83       	std	Z+1, r19	; 0x01
    11de:	3c c0       	rjmp	.+120    	; 0x1258 <BSC_frame_handling+0x170>
			BSC.resp.argv[3] = (BSC.data & 0x00ff) >> 0;
			break;

		case FR_EEP_READ:
			// read data
			EEP_read((u16)BSC.addr, (u8*)&BSC.data, sizeof(u16));
    11e0:	42 e0       	ldi	r20, 0x02	; 2
    11e2:	6e e4       	ldi	r22, 0x4E	; 78
    11e4:	72 e0       	ldi	r23, 0x02	; 2
    11e6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <EEP_read>

			// wait until reading is done
			PT_WAIT_UNTIL(pt, EEP_is_fini());
    11ea:	85 ef       	ldi	r24, 0xF5	; 245
    11ec:	98 e0       	ldi	r25, 0x08	; 8
    11ee:	99 83       	std	Y+1, r25	; 0x01
    11f0:	88 83       	st	Y, r24
    11f2:	0e 94 e7 16 	call	0x2dce	; 0x2dce <EEP_is_fini>
    11f6:	81 11       	cpse	r24, r1
    11f8:	23 c0       	rjmp	.+70     	; 0x1240 <BSC_frame_handling+0x158>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	22 c1       	rjmp	.+580    	; 0x1442 <BSC_frame_handling+0x35a>
			BSC.resp.argv[3] = (BSC.data & 0x00ff) >> 0;
			break;

		case FR_EEP_WRITE:
			// extract data
			BSC.data = (BSC.in.argv[2] << 8) + BSC.in.argv[3];
    11fe:	3b 2f       	mov	r19, r27
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	2a 0f       	add	r18, r26
    1204:	31 1d       	adc	r19, r1
    1206:	30 93 4f 02 	sts	0x024F, r19
    120a:	20 93 4e 02 	sts	0x024E, r18

			// write data
			EEP_write((u16)BSC.addr, (u8*)&BSC.data, sizeof(u16));
    120e:	42 e0       	ldi	r20, 0x02	; 2
    1210:	6e e4       	ldi	r22, 0x4E	; 78
    1212:	72 e0       	ldi	r23, 0x02	; 2
    1214:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <EEP_write>

			// wait until writing is done
			PT_WAIT_UNTIL(pt, EEP_is_fini());
    1218:	8c e0       	ldi	r24, 0x0C	; 12
    121a:	99 e0       	ldi	r25, 0x09	; 9
    121c:	99 83       	std	Y+1, r25	; 0x01
    121e:	88 83       	st	Y, r24
    1220:	0e 94 e7 16 	call	0x2dce	; 0x2dce <EEP_is_fini>
    1224:	88 23       	and	r24, r24
    1226:	49 f3       	breq	.-46     	; 0x11fa <BSC_frame_handling+0x112>

			// read back data
			EEP_read((u16)BSC.addr, (u8*)&BSC.data, sizeof(u16));
    1228:	42 e0       	ldi	r20, 0x02	; 2
    122a:	6e e4       	ldi	r22, 0x4E	; 78
    122c:	72 e0       	ldi	r23, 0x02	; 2
    122e:	80 91 4c 02 	lds	r24, 0x024C
    1232:	90 91 4d 02 	lds	r25, 0x024D
    1236:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <EEP_read>

			// wait until reading is done
			PT_WAIT_UNTIL(pt, EEP_is_fini());
    123a:	8d e1       	ldi	r24, 0x1D	; 29
    123c:	99 e0       	ldi	r25, 0x09	; 9
    123e:	d7 cf       	rjmp	.-82     	; 0x11ee <BSC_frame_handling+0x106>

			BSC.resp.argv[2] = (BSC.data & 0xff00) >> 8;
    1240:	80 91 4e 02 	lds	r24, 0x024E
    1244:	90 91 4f 02 	lds	r25, 0x024F
    1248:	90 93 3c 02 	sts	0x023C, r25
			BSC.resp.argv[3] = (BSC.data & 0x00ff) >> 0;
    124c:	80 93 3d 02 	sts	0x023D, r24
			break;
    1250:	e3 c0       	rjmp	.+454    	; 0x1418 <BSC_frame_handling+0x330>

		case FR_FLH_READ:
			// read data
			BSC.data = pgm_read_word((u16)BSC.addr);
    1252:	fc 01       	movw	r30, r24
    1254:	25 91       	lpm	r18, Z+
    1256:	34 91       	lpm	r19, Z+
    1258:	20 93 4e 02 	sts	0x024E, r18
    125c:	30 93 4f 02 	sts	0x024F, r19
			BSC.resp.argv[2] = (BSC.data & 0xff00) >> 8;
    1260:	30 93 3c 02 	sts	0x023C, r19
			BSC.resp.argv[3] = (BSC.data & 0x00ff) >> 0;
    1264:	20 93 3d 02 	sts	0x023D, r18
			break;
    1268:	d7 c0       	rjmp	.+430    	; 0x1418 <BSC_frame_handling+0x330>
			// set response frame arguments
			break;

		case FR_WAIT:
			// get current time
			time = TIME_get();
    126a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
    126e:	6b 01       	movw	r12, r22
    1270:	7c 01       	movw	r14, r24

			// compute time at end of delay
			delay = (u16)BSC.addr;
    1272:	20 91 4c 02 	lds	r18, 0x024C
    1276:	30 91 4d 02 	lds	r19, 0x024D
			delay *= TIME_1_MSEC;
    127a:	aa e0       	ldi	r26, 0x0A	; 10
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__umulhisi3>
			delay += time;
    1282:	c6 0e       	add	r12, r22
    1284:	d7 1e       	adc	r13, r23
    1286:	e8 1e       	adc	r14, r24
    1288:	f9 1e       	adc	r15, r25
			BSC.time_out = delay;
    128a:	c0 92 8f 01 	sts	0x018F, r12
    128e:	d0 92 90 01 	sts	0x0190, r13
    1292:	e0 92 91 01 	sts	0x0191, r14
    1296:	f0 92 92 01 	sts	0x0192, r15

			break;
    129a:	be c0       	rjmp	.+380    	; 0x1418 <BSC_frame_handling+0x330>
			// container frames can hold other containers
			// even if this seems useless
			// except perhaps for eeprom size optimization

			// upon the memory storage zone
			switch (BSC.in.argv[3]) {
    129c:	aa 3a       	cpi	r26, 0xAA	; 170
    129e:	09 f4       	brne	.+2      	; 0x12a2 <BSC_frame_handling+0x1ba>
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <BSC_frame_handling+0x238>
    12a2:	20 f4       	brcc	.+8      	; 0x12ac <BSC_frame_handling+0x1c4>
    12a4:	a6 30       	cpi	r26, 0x06	; 6
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <BSC_frame_handling+0x1c2>
    12a8:	b2 c0       	rjmp	.+356    	; 0x140e <BSC_frame_handling+0x326>
    12aa:	91 c0       	rjmp	.+290    	; 0x13ce <BSC_frame_handling+0x2e6>
    12ac:	ae 3e       	cpi	r26, 0xEE	; 238
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <BSC_frame_handling+0x1d0>
    12b0:	af 3f       	cpi	r26, 0xFF	; 255
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <BSC_frame_handling+0x1ce>
    12b4:	ac c0       	rjmp	.+344    	; 0x140e <BSC_frame_handling+0x326>
    12b6:	60 c0       	rjmp	.+192    	; 0x1378 <BSC_frame_handling+0x290>
				case EEPROM_STORAGE:
					// for each frame in the container
					for ( BSC.i = 0; BSC.i < BSC.in.argv[2]; BSC.i++) {
    12b8:	10 92 4b 02 	sts	0x024B, r1
    12bc:	29 c0       	rjmp	.+82     	; 0x1310 <BSC_frame_handling+0x228>
						// extract the frames from EEPROM
						EEP_read((u16)((u8*)BSC.addr + BSC.i * sizeof(frame_t)), (u8*)&BSC.cont, sizeof(frame_t));
    12be:	80 91 4c 02 	lds	r24, 0x024C
    12c2:	90 91 4d 02 	lds	r25, 0x024D
    12c6:	4b e0       	ldi	r20, 0x0B	; 11
    12c8:	60 e4       	ldi	r22, 0x40	; 64
    12ca:	72 e0       	ldi	r23, 0x02	; 2
    12cc:	fb e0       	ldi	r31, 0x0B	; 11
    12ce:	2f 9f       	mul	r18, r31
    12d0:	80 0d       	add	r24, r0
    12d2:	91 1d       	adc	r25, r1
    12d4:	11 24       	eor	r1, r1
    12d6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <EEP_read>

						// wait until reading is done
						PT_WAIT_UNTIL(pt, EEP_is_fini());
    12da:	8d e6       	ldi	r24, 0x6D	; 109
    12dc:	99 e0       	ldi	r25, 0x09	; 9
    12de:	99 83       	std	Y+1, r25	; 0x01
    12e0:	88 83       	st	Y, r24
    12e2:	0e 94 e7 16 	call	0x2dce	; 0x2dce <EEP_is_fini>
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <BSC_frame_handling+0x204>
    12ea:	87 cf       	rjmp	.-242    	; 0x11fa <BSC_frame_handling+0x112>

						// enqueue the contained frame
						PT_WAIT_UNTIL(pt, FIFO_put(&BSC.out_fifo, &BSC.cont));
    12ec:	86 e7       	ldi	r24, 0x76	; 118
    12ee:	99 e0       	ldi	r25, 0x09	; 9
    12f0:	99 83       	std	Y+1, r25	; 0x01
    12f2:	88 83       	st	Y, r24
    12f4:	60 e4       	ldi	r22, 0x40	; 64
    12f6:	72 e0       	ldi	r23, 0x02	; 2
    12f8:	8f ec       	ldi	r24, 0xCF	; 207
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    1300:	88 23       	and	r24, r24
    1302:	09 f4       	brne	.+2      	; 0x1306 <BSC_frame_handling+0x21e>
    1304:	7a cf       	rjmp	.-268    	; 0x11fa <BSC_frame_handling+0x112>

			// upon the memory storage zone
			switch (BSC.in.argv[3]) {
				case EEPROM_STORAGE:
					// for each frame in the container
					for ( BSC.i = 0; BSC.i < BSC.in.argv[2]; BSC.i++) {
    1306:	80 91 4b 02 	lds	r24, 0x024B
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	80 93 4b 02 	sts	0x024B, r24
    1310:	20 91 4b 02 	lds	r18, 0x024B
    1314:	80 91 c9 01 	lds	r24, 0x01C9
    1318:	28 17       	cp	r18, r24
    131a:	08 f0       	brcs	.+2      	; 0x131e <BSC_frame_handling+0x236>
    131c:	7d c0       	rjmp	.+250    	; 0x1418 <BSC_frame_handling+0x330>
    131e:	cf cf       	rjmp	.-98     	; 0x12be <BSC_frame_handling+0x1d6>
					}
					break;

				case RAM_STORAGE:
					// for each frame in the container
					for ( BSC.i = 0; BSC.i < BSC.in.argv[2]; BSC.i++) {
    1320:	10 92 4b 02 	sts	0x024B, r1
    1324:	22 c0       	rjmp	.+68     	; 0x136a <BSC_frame_handling+0x282>
						// read the frame from RAM
						BSC.cont = *((frame_t *)((u8*)BSC.addr + BSC.i * sizeof(frame_t)));
    1326:	e0 91 4c 02 	lds	r30, 0x024C
    132a:	f0 91 4d 02 	lds	r31, 0x024D
    132e:	2b e0       	ldi	r18, 0x0B	; 11
    1330:	82 9f       	mul	r24, r18
    1332:	e0 0d       	add	r30, r0
    1334:	f1 1d       	adc	r31, r1
    1336:	11 24       	eor	r1, r1
    1338:	8b e0       	ldi	r24, 0x0B	; 11
    133a:	a0 e4       	ldi	r26, 0x40	; 64
    133c:	b2 e0       	ldi	r27, 0x02	; 2
    133e:	01 90       	ld	r0, Z+
    1340:	0d 92       	st	X+, r0
    1342:	8a 95       	dec	r24
    1344:	e1 f7       	brne	.-8      	; 0x133e <BSC_frame_handling+0x256>

						// enqueue the contained frame
						PT_WAIT_UNTIL(pt, FIFO_put(&BSC.out_fifo, &BSC.cont));
    1346:	83 ea       	ldi	r24, 0xA3	; 163
    1348:	99 e0       	ldi	r25, 0x09	; 9
    134a:	99 83       	std	Y+1, r25	; 0x01
    134c:	88 83       	st	Y, r24
    134e:	60 e4       	ldi	r22, 0x40	; 64
    1350:	72 e0       	ldi	r23, 0x02	; 2
    1352:	8f ec       	ldi	r24, 0xCF	; 207
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    135a:	88 23       	and	r24, r24
    135c:	09 f4       	brne	.+2      	; 0x1360 <BSC_frame_handling+0x278>
    135e:	4d cf       	rjmp	.-358    	; 0x11fa <BSC_frame_handling+0x112>
					}
					break;

				case RAM_STORAGE:
					// for each frame in the container
					for ( BSC.i = 0; BSC.i < BSC.in.argv[2]; BSC.i++) {
    1360:	80 91 4b 02 	lds	r24, 0x024B
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	80 93 4b 02 	sts	0x024B, r24
    136a:	80 91 4b 02 	lds	r24, 0x024B
    136e:	90 91 c9 01 	lds	r25, 0x01C9
    1372:	89 17       	cp	r24, r25
    1374:	c0 f2       	brcs	.-80     	; 0x1326 <BSC_frame_handling+0x23e>
    1376:	50 c0       	rjmp	.+160    	; 0x1418 <BSC_frame_handling+0x330>
					}
					break;

				case FLASH_STORAGE:
					// for each frame in the container
					for ( BSC.i = 0; BSC.i < BSC.in.argv[2]; BSC.i++) {
    1378:	10 92 4b 02 	sts	0x024B, r1
    137c:	21 c0       	rjmp	.+66     	; 0x13c0 <BSC_frame_handling+0x2d8>
						// extract the frame from FLASH
						memcpy_P(&BSC.cont, (const void *)((u8*)BSC.addr + BSC.i * sizeof(frame_t)), sizeof(frame_t));
    137e:	60 91 4c 02 	lds	r22, 0x024C
    1382:	70 91 4d 02 	lds	r23, 0x024D
    1386:	3b e0       	ldi	r19, 0x0B	; 11
    1388:	83 9f       	mul	r24, r19
    138a:	60 0d       	add	r22, r0
    138c:	71 1d       	adc	r23, r1
    138e:	11 24       	eor	r1, r1
    1390:	4b e0       	ldi	r20, 0x0B	; 11
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	80 e4       	ldi	r24, 0x40	; 64
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 1c 1b 	call	0x3638	; 0x3638 <memcpy_P>

						// enqueue the contained frame
						PT_WAIT_UNTIL(pt, FIFO_put(&BSC.out_fifo, &BSC.cont));
    139c:	8e ec       	ldi	r24, 0xCE	; 206
    139e:	99 e0       	ldi	r25, 0x09	; 9
    13a0:	99 83       	std	Y+1, r25	; 0x01
    13a2:	88 83       	st	Y, r24
    13a4:	60 e4       	ldi	r22, 0x40	; 64
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	8f ec       	ldi	r24, 0xCF	; 207
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    13b0:	88 23       	and	r24, r24
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <BSC_frame_handling+0x2ce>
    13b4:	22 cf       	rjmp	.-444    	; 0x11fa <BSC_frame_handling+0x112>
					}
					break;

				case FLASH_STORAGE:
					// for each frame in the container
					for ( BSC.i = 0; BSC.i < BSC.in.argv[2]; BSC.i++) {
    13b6:	80 91 4b 02 	lds	r24, 0x024B
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	80 93 4b 02 	sts	0x024B, r24
    13c0:	80 91 4b 02 	lds	r24, 0x024B
    13c4:	90 91 c9 01 	lds	r25, 0x01C9
    13c8:	89 17       	cp	r24, r25
    13ca:	30 f5       	brcc	.+76     	; 0x1418 <BSC_frame_handling+0x330>
    13cc:	d8 cf       	rjmp	.-80     	; 0x137e <BSC_frame_handling+0x296>
				case PRE_2_STORAGE:
				case PRE_3_STORAGE:
				case PRE_4_STORAGE:
				case PRE_5_STORAGE:
					// extract the frame from EEPROM
					EEP_read((u16)((u8*)BSC.addr + BSC.in.argv[3] * sizeof(frame_t)), (u8*)&BSC.cont, sizeof(frame_t));
    13ce:	4b e0       	ldi	r20, 0x0B	; 11
    13d0:	60 e4       	ldi	r22, 0x40	; 64
    13d2:	72 e0       	ldi	r23, 0x02	; 2
    13d4:	eb e0       	ldi	r30, 0x0B	; 11
    13d6:	ae 9f       	mul	r26, r30
    13d8:	80 0d       	add	r24, r0
    13da:	91 1d       	adc	r25, r1
    13dc:	11 24       	eor	r1, r1
    13de:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <EEP_read>

					// wait until reading is done
					PT_WAIT_UNTIL(pt, EEP_is_fini());
    13e2:	81 ef       	ldi	r24, 0xF1	; 241
    13e4:	99 e0       	ldi	r25, 0x09	; 9
    13e6:	99 83       	std	Y+1, r25	; 0x01
    13e8:	88 83       	st	Y, r24
    13ea:	0e 94 e7 16 	call	0x2dce	; 0x2dce <EEP_is_fini>
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <BSC_frame_handling+0x30c>
    13f2:	03 cf       	rjmp	.-506    	; 0x11fa <BSC_frame_handling+0x112>

					// enqueue the contained frame
					PT_WAIT_UNTIL(pt, FIFO_put(&BSC.out_fifo, &BSC.cont));
    13f4:	8a ef       	ldi	r24, 0xFA	; 250
    13f6:	99 e0       	ldi	r25, 0x09	; 9
    13f8:	99 83       	std	Y+1, r25	; 0x01
    13fa:	88 83       	st	Y, r24
    13fc:	60 e4       	ldi	r22, 0x40	; 64
    13fe:	72 e0       	ldi	r23, 0x02	; 2
    1400:	8f ec       	ldi	r24, 0xCF	; 207
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    1408:	81 11       	cpse	r24, r1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <BSC_frame_handling+0x330>
    140c:	f6 ce       	rjmp	.-532    	; 0x11fa <BSC_frame_handling+0x112>
					break;

				default:
					// frame format is invalid
					BSC.resp.error = 1;
    140e:	80 91 39 02 	lds	r24, 0x0239
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	80 93 39 02 	sts	0x0239, r24
			PT_EXIT(pt);
			break;
	}

	// enqueue response
	PT_WAIT_UNTIL(pt, FIFO_put(&BSC.out_fifo, &BSC.resp));
    1418:	8c e0       	ldi	r24, 0x0C	; 12
    141a:	9a e0       	ldi	r25, 0x0A	; 10
    141c:	99 83       	std	Y+1, r25	; 0x01
    141e:	88 83       	st	Y, r24
    1420:	65 e3       	ldi	r22, 0x35	; 53
    1422:	72 e0       	ldi	r23, 0x02	; 2
    1424:	8f ec       	ldi	r24, 0xCF	; 207
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <BSC_frame_handling+0x34a>
    1430:	e4 ce       	rjmp	.-568    	; 0x11fa <BSC_frame_handling+0x112>

	// let's process the next frame
	BSC.is_running = FALSE;
    1432:	80 91 50 02 	lds	r24, 0x0250
    1436:	8e 7f       	andi	r24, 0xFE	; 254
    1438:	80 93 50 02 	sts	0x0250, r24
	PT_EXIT(pt);
    143c:	19 82       	std	Y+1, r1	; 0x01
    143e:	18 82       	st	Y, r1
    1440:	82 e0       	ldi	r24, 0x02	; 2

	PT_END(pt);
}
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	08 95       	ret

00001450 <BSC_in>:


PT_THREAD(BSC_in(pt_t* pt))
{
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	ec 01       	movw	r28, r24
	PT_BEGIN(pt);
    145a:	e8 81       	ld	r30, Y
    145c:	f9 81       	ldd	r31, Y+1	; 0x01
    145e:	30 97       	sbiw	r30, 0x00	; 0
    1460:	09 f0       	breq	.+2      	; 0x1464 <BSC_in+0x14>
    1462:	09 94       	ijmp

	// dequeue the incomed frame if any
	PT_WAIT_WHILE(pt, KO == FIFO_get(&BSC.in_fifo, &BSC.in));
    1464:	82 e3       	ldi	r24, 0x32	; 50
    1466:	9a e0       	ldi	r25, 0x0A	; 10
    1468:	99 83       	std	Y+1, r25	; 0x01
    146a:	88 83       	st	Y, r24
    146c:	62 ec       	ldi	r22, 0xC2	; 194
    146e:	71 e0       	ldi	r23, 0x01	; 1
    1470:	85 e9       	ldi	r24, 0x95	; 149
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    1478:	88 23       	and	r24, r24
    147a:	c1 f1       	breq	.+112    	; 0x14ec <BSC_in+0x9c>

	// frame interpretation
	PT_SPAWN(pt, &BSC.handling_pt, BSC_frame_handling(&BSC.handling_pt));
    147c:	10 92 34 02 	sts	0x0234, r1
    1480:	10 92 33 02 	sts	0x0233, r1
    1484:	82 e4       	ldi	r24, 0x42	; 66
    1486:	9a e0       	ldi	r25, 0x0A	; 10
    1488:	99 83       	std	Y+1, r25	; 0x01
    148a:	88 83       	st	Y, r24
    148c:	83 e3       	ldi	r24, 0x33	; 51
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	0e 94 74 08 	call	0x10e8	; 0x10e8 <BSC_frame_handling>
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	50 f1       	brcs	.+84     	; 0x14ec <BSC_in+0x9c>

	// if the last handled frame was a wait one
	// no other one will be treated before the time-out elapses
	PT_WAIT_WHILE(pt, (0 != BSC.time_out) && (TIME_get() <= BSC.time_out));
    1498:	8c e4       	ldi	r24, 0x4C	; 76
    149a:	9a e0       	ldi	r25, 0x0A	; 10
    149c:	99 83       	std	Y+1, r25	; 0x01
    149e:	88 83       	st	Y, r24
    14a0:	40 91 8f 01 	lds	r20, 0x018F
    14a4:	50 91 90 01 	lds	r21, 0x0190
    14a8:	60 91 91 01 	lds	r22, 0x0191
    14ac:	70 91 92 01 	lds	r23, 0x0192
    14b0:	45 2b       	or	r20, r21
    14b2:	46 2b       	or	r20, r22
    14b4:	47 2b       	or	r20, r23
    14b6:	59 f4       	brne	.+22     	; 0x14ce <BSC_in+0x7e>

	// reset time-out was elapsed
	// this will unblock response sending
	BSC.time_out = 0;
    14b8:	10 92 8f 01 	sts	0x018F, r1
    14bc:	10 92 90 01 	sts	0x0190, r1
    14c0:	10 92 91 01 	sts	0x0191, r1
    14c4:	10 92 92 01 	sts	0x0192, r1

	// let's process the next frame
	PT_RESTART(pt);
    14c8:	19 82       	std	Y+1, r1	; 0x01
    14ca:	18 82       	st	Y, r1
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <BSC_in+0x9c>
	// frame interpretation
	PT_SPAWN(pt, &BSC.handling_pt, BSC_frame_handling(&BSC.handling_pt));

	// if the last handled frame was a wait one
	// no other one will be treated before the time-out elapses
	PT_WAIT_WHILE(pt, (0 != BSC.time_out) && (TIME_get() <= BSC.time_out));
    14ce:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
    14d2:	00 91 8f 01 	lds	r16, 0x018F
    14d6:	10 91 90 01 	lds	r17, 0x0190
    14da:	20 91 91 01 	lds	r18, 0x0191
    14de:	30 91 92 01 	lds	r19, 0x0192
    14e2:	06 17       	cp	r16, r22
    14e4:	17 07       	cpc	r17, r23
    14e6:	28 07       	cpc	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	30 f3       	brcs	.-52     	; 0x14b8 <BSC_in+0x68>

	// let's process the next frame
	PT_RESTART(pt);

	PT_END(pt);
}
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <BSC_out>:


PT_THREAD(BSC_out(pt_t* pt))
{
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	ec 01       	movw	r28, r24
	PT_BEGIN(pt);
    14fe:	e8 81       	ld	r30, Y
    1500:	f9 81       	ldd	r31, Y+1	; 0x01
    1502:	30 97       	sbiw	r30, 0x00	; 0
    1504:	09 f0       	breq	.+2      	; 0x1508 <BSC_out+0x10>
    1506:	09 94       	ijmp

	// if the last handled frame was a wait one
	// no other one will be sent before the time-out elapses
	PT_WAIT_WHILE(pt, 0 != BSC.time_out);
    1508:	84 e8       	ldi	r24, 0x84	; 132
    150a:	9a e0       	ldi	r25, 0x0A	; 10
    150c:	99 83       	std	Y+1, r25	; 0x01
    150e:	88 83       	st	Y, r24
    1510:	40 91 8f 01 	lds	r20, 0x018F
    1514:	50 91 90 01 	lds	r21, 0x0190
    1518:	60 91 91 01 	lds	r22, 0x0191
    151c:	70 91 92 01 	lds	r23, 0x0192
    1520:	45 2b       	or	r20, r21
    1522:	46 2b       	or	r20, r22
    1524:	47 2b       	or	r20, r23
    1526:	e1 f4       	brne	.+56     	; 0x1560 <BSC_out+0x68>

	// dequeue the response frame if any
	PT_WAIT_WHILE(pt, KO == FIFO_get(&BSC.out_fifo, &BSC.out));
    1528:	84 e9       	ldi	r24, 0x94	; 148
    152a:	9a e0       	ldi	r25, 0x0A	; 10
    152c:	99 83       	std	Y+1, r25	; 0x01
    152e:	88 83       	st	Y, r24
    1530:	68 e2       	ldi	r22, 0x28	; 40
    1532:	72 e0       	ldi	r23, 0x02	; 2
    1534:	8f ec       	ldi	r24, 0xCF	; 207
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    153c:	88 23       	and	r24, r24
    153e:	81 f0       	breq	.+32     	; 0x1560 <BSC_out+0x68>

	// be sure the response is sent
	if ( KO == DPT_tx(&BSC.interf, &BSC.out) ) {
    1540:	68 e2       	ldi	r22, 0x28	; 40
    1542:	72 e0       	ldi	r23, 0x02	; 2
    1544:	84 e8       	ldi	r24, 0x84	; 132
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	0e 94 46 10 	call	0x208c	; 0x208c <DPT_tx>
    154c:	81 11       	cpse	r24, r1
    154e:	06 c0       	rjmp	.+12     	; 0x155c <BSC_out+0x64>
		// else requeue the frame
		FIFO_unget(&BSC.out_fifo, &BSC.out);
    1550:	68 e2       	ldi	r22, 0x28	; 40
    1552:	72 e0       	ldi	r23, 0x02	; 2
    1554:	8f ec       	ldi	r24, 0xCF	; 207
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <FIFO_unget>
	}

	// let's wait the next response
	PT_RESTART(pt);
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	18 82       	st	Y, r1

	PT_END(pt);
}
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <BSC_init>:
// public functions
//

// basic module initialization
void BSC_init(void)
{
    1568:	ab e0       	ldi	r26, 0x0B	; 11
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea eb       	ldi	r30, 0xBA	; 186
    156e:	fa e0       	ldi	r31, 0x0A	; 10
    1570:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x20>
	frame_t fr;

	// fifoes init
	FIFO_init(&BSC.in_fifo, &BSC.in_buf, NB_IN_FRAMES, sizeof(frame_t));
    1574:	2b e0       	ldi	r18, 0x0B	; 11
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	43 e0       	ldi	r20, 0x03	; 3
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	61 ea       	ldi	r22, 0xA1	; 161
    157e:	71 e0       	ldi	r23, 0x01	; 1
    1580:	85 e9       	ldi	r24, 0x95	; 149
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	FIFO_init(&BSC.out_fifo, &BSC.out_buf, NB_OUT_FRAMES, sizeof(frame_t));
    1588:	2b e0       	ldi	r18, 0x0B	; 11
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	47 e0       	ldi	r20, 0x07	; 7
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	6b ed       	ldi	r22, 0xDB	; 219
    1592:	71 e0       	ldi	r23, 0x01	; 1
    1594:	8f ec       	ldi	r24, 0xCF	; 207
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>

	// thread init
	PT_INIT(&BSC.in_pt);
    159c:	10 92 94 01 	sts	0x0194, r1
    15a0:	10 92 93 01 	sts	0x0193, r1
	PT_INIT(&BSC.out_pt);
    15a4:	10 92 ce 01 	sts	0x01CE, r1
    15a8:	10 92 cd 01 	sts	0x01CD, r1

	// reset time-out
	BSC.time_out = 0;
    15ac:	10 92 8f 01 	sts	0x018F, r1
    15b0:	10 92 90 01 	sts	0x0190, r1
    15b4:	10 92 91 01 	sts	0x0191, r1
    15b8:	10 92 92 01 	sts	0x0192, r1
	BSC.is_running = FALSE;
    15bc:	80 91 50 02 	lds	r24, 0x0250
    15c0:	8e 7f       	andi	r24, 0xFE	; 254
    15c2:	80 93 50 02 	sts	0x0250, r24

	// register own call-back for specific commands
	BSC.interf.channel = 0;
    15c6:	10 92 84 01 	sts	0x0184, r1
	BSC.interf.cmde_mask = _CM(FR_NO_CMDE)
    15ca:	8c ef       	ldi	r24, 0xFC	; 252
    15cc:	80 93 85 01 	sts	0x0185, r24
    15d0:	89 e1       	ldi	r24, 0x19	; 25
    15d2:	80 93 86 01 	sts	0x0186, r24
    15d6:	10 92 87 01 	sts	0x0187, r1
    15da:	10 92 88 01 	sts	0x0188, r1
    15de:	10 92 89 01 	sts	0x0189, r1
    15e2:	10 92 8a 01 	sts	0x018A, r1
    15e6:	10 92 8b 01 	sts	0x018B, r1
    15ea:	10 92 8c 01 	sts	0x018C, r1
				| _CM(FR_EEP_WRITE)
				| _CM(FR_FLH_READ)
				| _CM(FR_FLH_WRITE)
				| _CM(FR_WAIT)
				| _CM(FR_CONTAINER);
	BSC.interf.queue = &BSC.in_fifo;
    15ee:	85 e9       	ldi	r24, 0x95	; 149
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	90 93 8e 01 	sts	0x018E, r25
    15f6:	80 93 8d 01 	sts	0x018D, r24
	DPT_register(&BSC.interf);
    15fa:	84 e8       	ldi	r24, 0x84	; 132
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DPT_register>

	EEP_init();
    1602:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <EEP_init>

	// read reset frame
	EEP_read(0x00, (u8*)&fr, sizeof(frame_t));
    1606:	4b e0       	ldi	r20, 0x0B	; 11
    1608:	be 01       	movw	r22, r28
    160a:	6f 5f       	subi	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <EEP_read>
	while ( ! EEP_is_fini() )
    1616:	0e 94 e7 16 	call	0x2dce	; 0x2dce <EEP_is_fini>
    161a:	88 23       	and	r24, r24
    161c:	e1 f3       	breq	.-8      	; 0x1616 <BSC_init+0xae>
		;

	// enqueue the reset frame
	FIFO_put(&BSC.out_fifo, &fr);
    161e:	be 01       	movw	r22, r28
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f ec       	ldi	r24, 0xCF	; 207
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>

	// lock the dispatcher to be able to treat the frame
	DPT_lock(&BSC.interf);
    162c:	84 e8       	ldi	r24, 0x84	; 132
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <DPT_lock>
}
    1634:	2b 96       	adiw	r28, 0x0b	; 11
    1636:	e2 e0       	ldi	r30, 0x02	; 2
    1638:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x20>

0000163c <BSC_run>:


void BSC_run(void)
{
	// incoming frames handling
	(void)PT_SCHEDULE(BSC_in(&BSC.in_pt));
    163c:	83 e9       	ldi	r24, 0x93	; 147
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	0e 94 28 0a 	call	0x1450	; 0x1450 <BSC_in>

	// reponse frames handling
	(void)PT_SCHEDULE(BSC_out(&BSC.out_pt));
    1644:	8d ec       	ldi	r24, 0xCD	; 205
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <BSC_out>

	// if all frames are handled
	if ( !BSC.is_running && ( FIFO_full(&BSC.out_fifo) == 0 ) && ( FIFO_full(&BSC.in_fifo) == 0 ) ) {
    164c:	80 91 50 02 	lds	r24, 0x0250
    1650:	80 fd       	sbrc	r24, 0
    1652:	10 c0       	rjmp	.+32     	; 0x1674 <BSC_run+0x38>
    1654:	8f ec       	ldi	r24, 0xCF	; 207
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <FIFO_full>
    165c:	89 2b       	or	r24, r25
    165e:	51 f4       	brne	.+20     	; 0x1674 <BSC_run+0x38>
    1660:	85 e9       	ldi	r24, 0x95	; 149
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <FIFO_full>
    1668:	89 2b       	or	r24, r25
    166a:	21 f4       	brne	.+8      	; 0x1674 <BSC_run+0x38>
		// unlock the dispatcher
		DPT_unlock(&BSC.interf);
    166c:	84 e8       	ldi	r24, 0x84	; 132
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 1d 10 	call	0x203a	; 0x203a <DPT_unlock>
    1674:	08 95       	ret

00001676 <CMN_in.constprop.2>:
	union {
		u8 part[4];
		u32 full;
	} time;

	PT_BEGIN(pt);
    1676:	e0 91 5c 02 	lds	r30, 0x025C
    167a:	f0 91 5d 02 	lds	r31, 0x025D
    167e:	30 97       	sbiw	r30, 0x00	; 0
    1680:	09 f0       	breq	.+2      	; 0x1684 <CMN_in.constprop.2+0xe>
    1682:	09 94       	ijmp

	// wait incoming frame
	PT_WAIT_UNTIL(pt, FIFO_get(&CMN.in_fifo, &CMN.fr));
    1684:	82 e4       	ldi	r24, 0x42	; 66
    1686:	9b e0       	ldi	r25, 0x0B	; 11
    1688:	90 93 5d 02 	sts	0x025D, r25
    168c:	80 93 5c 02 	sts	0x025C, r24
    1690:	62 eb       	ldi	r22, 0xB2	; 178
    1692:	72 e0       	ldi	r23, 0x02	; 2
    1694:	8b e9       	ldi	r24, 0x9B	; 155
    1696:	92 e0       	ldi	r25, 0x02	; 2
    1698:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <CMN_in.constprop.2+0x2c>
    16a0:	62 c0       	rjmp	.+196    	; 0x1766 <CMN_in.constprop.2+0xf0>

	// if frame is a response
	if (CMN.fr.resp) {
    16a2:	80 91 b6 02 	lds	r24, 0x02B6
    16a6:	81 fd       	sbrc	r24, 1
    16a8:	5a c0       	rjmp	.+180    	; 0x175e <CMN_in.constprop.2+0xe8>
		PT_RESTART(pt);
	}

	// update default response frame header
	CMN.fr.resp = 1;
	CMN.fr.error = 0;
    16aa:	82 60       	ori	r24, 0x02	; 2
    16ac:	8e 7f       	andi	r24, 0xFE	; 254
    16ae:	80 93 b6 02 	sts	0x02B6, r24

	switch (CMN.fr.cmde) {
    16b2:	90 91 b5 02 	lds	r25, 0x02B5
    16b6:	91 31       	cpi	r25, 0x11	; 17
    16b8:	61 f1       	breq	.+88     	; 0x1712 <CMN_in.constprop.2+0x9c>
    16ba:	92 31       	cpi	r25, 0x12	; 18
    16bc:	a9 f1       	breq	.+106    	; 0x1728 <CMN_in.constprop.2+0xb2>
    16be:	90 31       	cpi	r25, 0x10	; 16
    16c0:	e9 f5       	brne	.+122    	; 0x173c <CMN_in.constprop.2+0xc6>
		case FR_STATE:
			switch (CMN.fr.argv[0]) {
    16c2:	80 91 b7 02 	lds	r24, 0x02B7
    16c6:	8a 37       	cpi	r24, 0x7A	; 122
    16c8:	91 f0       	breq	.+36     	; 0x16ee <CMN_in.constprop.2+0x78>
    16ca:	18 f4       	brcc	.+6      	; 0x16d2 <CMN_in.constprop.2+0x5c>
    16cc:	88 23       	and	r24, r24
    16ce:	31 f0       	breq	.+12     	; 0x16dc <CMN_in.constprop.2+0x66>
    16d0:	1d c0       	rjmp	.+58     	; 0x170c <CMN_in.constprop.2+0x96>
    16d2:	8b 38       	cpi	r24, 0x8B	; 139
    16d4:	89 f0       	breq	.+34     	; 0x16f8 <CMN_in.constprop.2+0x82>
    16d6:	8c 39       	cpi	r24, 0x9C	; 156
    16d8:	c9 f4       	brne	.+50     	; 0x170c <CMN_in.constprop.2+0x96>
    16da:	13 c0       	rjmp	.+38     	; 0x1702 <CMN_in.constprop.2+0x8c>
				case FR_STATE_GET:	// get state
					// build the frame with the node state
					CMN.fr.argv[1] = CMN.state;
    16dc:	80 91 bd 02 	lds	r24, 0x02BD
    16e0:	80 93 b8 02 	sts	0x02B8, r24

					// and the bus state
					CMN.fr.argv[2] = CMN.bus;
    16e4:	80 91 be 02 	lds	r24, 0x02BE
    16e8:	80 93 b9 02 	sts	0x02B9, r24
    16ec:	2a c0       	rjmp	.+84     	; 0x1742 <CMN_in.constprop.2+0xcc>
					break;

				case FR_STATE_SET_BOTH:	// set state and bus
					// save new node state
					CMN.state = CMN.fr.argv[1];
    16ee:	80 91 b8 02 	lds	r24, 0x02B8
    16f2:	80 93 bd 02 	sts	0x02BD, r24
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <CMN_in.constprop.2+0x8c>
					CMN.bus = CMN.fr.argv[2];
					break;

				case FR_STATE_SET_STATE:	// set state only
					// save new node state
					CMN.state = CMN.fr.argv[1];
    16f8:	80 91 b8 02 	lds	r24, 0x02B8
    16fc:	80 93 bd 02 	sts	0x02BD, r24
    1700:	20 c0       	rjmp	.+64     	; 0x1742 <CMN_in.constprop.2+0xcc>
					break;

				case FR_STATE_SET_BUS:	// set bus state only
					// save new bus state
					CMN.bus = CMN.fr.argv[2];
    1702:	80 91 b9 02 	lds	r24, 0x02B9
    1706:	80 93 be 02 	sts	0x02BE, r24
    170a:	1b c0       	rjmp	.+54     	; 0x1742 <CMN_in.constprop.2+0xcc>
					break;

				default:
					CMN.fr.error = 1;
    170c:	80 91 b6 02 	lds	r24, 0x02B6
    1710:	15 c0       	rjmp	.+42     	; 0x173c <CMN_in.constprop.2+0xc6>
			}
			break;

		case FR_TIME_GET:
			// get local time
			time.full = TIME_get();
    1712:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>

			// build frame
			// (in AVR u32 representation is little endian)
			CMN.fr.argv[0] = time.part[3];
    1716:	90 93 b7 02 	sts	0x02B7, r25
			CMN.fr.argv[1] = time.part[2];
    171a:	80 93 b8 02 	sts	0x02B8, r24
			CMN.fr.argv[2] = time.part[1];
    171e:	70 93 b9 02 	sts	0x02B9, r23
			CMN.fr.argv[3] = time.part[0];
    1722:	60 93 ba 02 	sts	0x02BA, r22
    1726:	0d c0       	rjmp	.+26     	; 0x1742 <CMN_in.constprop.2+0xcc>
			break;

		case FR_MUX_RESET:
			switch (CMN.fr.argv[0]) {
    1728:	90 91 b7 02 	lds	r25, 0x02B7
    172c:	99 23       	and	r25, r25
    172e:	21 f0       	breq	.+8      	; 0x1738 <CMN_in.constprop.2+0xc2>
    1730:	9f 3f       	cpi	r25, 0xFF	; 255
    1732:	21 f4       	brne	.+8      	; 0x173c <CMN_in.constprop.2+0xc6>
				case FR_MUX_RESET_RESET:
					// reset PCA9543
					// drive gate to 0
					PORTD &= ~_BV(PD5);
    1734:	5d 98       	cbi	0x0b, 5	; 11
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <CMN_in.constprop.2+0xcc>
					break;

				case FR_MUX_RESET_UNRESET:
					// release PCA9543 reset pin
					// drive gate to 1
					PORTD |= _BV(PD5);
    1738:	5d 9a       	sbi	0x0b, 5	; 11
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <CMN_in.constprop.2+0xcc>
			}
			break;

		default:
			// reject frame
			CMN.fr.error = 1;
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	80 93 b6 02 	sts	0x02B6, r24
			break;
	}

	// enqueue the response
	PT_WAIT_UNTIL(pt, OK == FIFO_put(&CMN.out_fifo, &CMN.fr));
    1742:	81 ea       	ldi	r24, 0xA1	; 161
    1744:	9b e0       	ldi	r25, 0x0B	; 11
    1746:	90 93 5d 02 	sts	0x025D, r25
    174a:	80 93 5c 02 	sts	0x025C, r24
    174e:	62 eb       	ldi	r22, 0xB2	; 178
    1750:	72 e0       	ldi	r23, 0x02	; 2
    1752:	8e e6       	ldi	r24, 0x6E	; 110
    1754:	92 e0       	ldi	r25, 0x02	; 2
    1756:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	21 f4       	brne	.+8      	; 0x1766 <CMN_in.constprop.2+0xf0>

	PT_RESTART(pt);
    175e:	10 92 5d 02 	sts	0x025D, r1
    1762:	10 92 5c 02 	sts	0x025C, r1

	PT_END(pt);
}
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	08 95       	ret

0000176a <CMN_out.constprop.3>:
		LED_PORT &= ~b->led;
	}
}


static PT_THREAD( CMN_out(pt_t* pt) )
    176a:	ab e0       	ldi	r26, 0x0B	; 11
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	eb eb       	ldi	r30, 0xBB	; 187
    1770:	fb e0       	ldi	r31, 0x0B	; 11
    1772:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x20>
{
	frame_t fr;
	PT_BEGIN(pt);

	// dequeue a response if any
	PT_WAIT_UNTIL(pt, OK == FIFO_get(&CMN.out_fifo, &fr));
    1776:	8b eb       	ldi	r24, 0xBB	; 187
    1778:	9b e0       	ldi	r25, 0x0B	; 11
    177a:	90 93 5f 02 	sts	0x025F, r25
    177e:	80 93 5e 02 	sts	0x025E, r24
    1782:	be 01       	movw	r22, r28
    1784:	6f 5f       	subi	r22, 0xFF	; 255
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	8e e6       	ldi	r24, 0x6E	; 110
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	a1 f4       	brne	.+40     	; 0x17bc <CMN_out.constprop.3+0x52>

	// make sure to send the response
	if ( KO == DPT_tx(&CMN.interf, &fr)) {
    1794:	be 01       	movw	r22, r28
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	81 e5       	ldi	r24, 0x51	; 81
    179c:	92 e0       	ldi	r25, 0x02	; 2
    179e:	0e 94 46 10 	call	0x208c	; 0x208c <DPT_tx>
    17a2:	81 11       	cpse	r24, r1
    17a4:	07 c0       	rjmp	.+14     	; 0x17b4 <CMN_out.constprop.3+0x4a>
		// else requeue the frame
		FIFO_unget(&CMN.out_fifo, &fr);
    17a6:	be 01       	movw	r22, r28
    17a8:	6f 5f       	subi	r22, 0xFF	; 255
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8e e6       	ldi	r24, 0x6E	; 110
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <FIFO_unget>
	}

	// loop back
	PT_RESTART(pt);
    17b4:	10 92 5f 02 	sts	0x025F, r1
    17b8:	10 92 5e 02 	sts	0x025E, r1

	PT_END(pt);
}
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	2b 96       	adiw	r28, 0x0b	; 11
    17c0:	e2 e0       	ldi	r30, 0x02	; 2
    17c2:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x20>

000017c6 <blink_led>:
//----------------------------------------
// private functions
//

void blink_led(blink_t* const b)
{
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	ec 01       	movw	r28, r24
	u32 modulo = CMN.time % b->pseudo_period;
    17d0:	60 91 6a 02 	lds	r22, 0x026A
    17d4:	70 91 6b 02 	lds	r23, 0x026B
    17d8:	80 91 6c 02 	lds	r24, 0x026C
    17dc:	90 91 6d 02 	lds	r25, 0x026D
    17e0:	29 81       	ldd	r18, Y+1	; 0x01
    17e2:	3a 81       	ldd	r19, Y+2	; 0x02
    17e4:	4b 81       	ldd	r20, Y+3	; 0x03
    17e6:	5c 81       	ldd	r21, Y+4	; 0x04
    17e8:	0e 94 8e 1a 	call	0x351c	; 0x351c <__udivmodsi4>

	// led is ON between BOTTOM and TOP
	if ( (modulo >= b->bottom) && (modulo < b->top) ) {
    17ec:	09 85       	ldd	r16, Y+9	; 0x09
    17ee:	1a 85       	ldd	r17, Y+10	; 0x0a
    17f0:	2b 85       	ldd	r18, Y+11	; 0x0b
    17f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    17f4:	60 17       	cp	r22, r16
    17f6:	71 07       	cpc	r23, r17
    17f8:	82 07       	cpc	r24, r18
    17fa:	93 07       	cpc	r25, r19
    17fc:	68 f0       	brcs	.+26     	; 0x1818 <blink_led+0x52>
    17fe:	0d 81       	ldd	r16, Y+5	; 0x05
    1800:	1e 81       	ldd	r17, Y+6	; 0x06
    1802:	2f 81       	ldd	r18, Y+7	; 0x07
    1804:	38 85       	ldd	r19, Y+8	; 0x08
    1806:	60 17       	cp	r22, r16
    1808:	71 07       	cpc	r23, r17
    180a:	82 07       	cpc	r24, r18
    180c:	93 07       	cpc	r25, r19
    180e:	20 f4       	brcc	.+8      	; 0x1818 <blink_led+0x52>
		// led ON
		LED_PORT |= b->led;
    1810:	8b b1       	in	r24, 0x0b	; 11
    1812:	98 81       	ld	r25, Y
    1814:	89 2b       	or	r24, r25
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <blink_led+0x5a>
	}
	else {
		// led off
		LED_PORT &= ~b->led;
    1818:	9b b1       	in	r25, 0x0b	; 11
    181a:	88 81       	ld	r24, Y
    181c:	80 95       	com	r24
    181e:	89 23       	and	r24, r25
    1820:	8b b9       	out	0x0b, r24	; 11
	}
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	08 95       	ret

0000182c <CMN_blink.constprop.1>:

	PT_END(pt);
}


static PT_THREAD( CMN_blink(pt_t* pt) )
    182c:	cf 92       	push	r12
    182e:	df 92       	push	r13
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	2d 97       	sbiw	r28, 0x0d	; 13
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
{
	blink_t b;

	PT_BEGIN(pt);
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	e0 91 60 02 	lds	r30, 0x0260
    184e:	f0 91 61 02 	lds	r31, 0x0261
    1852:	30 97       	sbiw	r30, 0x00	; 0
    1854:	09 f0       	breq	.+2      	; 0x1858 <CMN_blink.constprop.1+0x2c>
    1856:	09 94       	ijmp

	PT_WAIT_UNTIL(pt, CMN.time + 250 * TIME_1_MSEC < TIME_get());
    1858:	8c e2       	ldi	r24, 0x2C	; 44
    185a:	9c e0       	ldi	r25, 0x0C	; 12
    185c:	90 93 61 02 	sts	0x0261, r25
    1860:	80 93 60 02 	sts	0x0260, r24
    1864:	c0 90 6a 02 	lds	r12, 0x026A
    1868:	d0 90 6b 02 	lds	r13, 0x026B
    186c:	e0 90 6c 02 	lds	r14, 0x026C
    1870:	f0 90 6d 02 	lds	r15, 0x026D
    1874:	84 ec       	ldi	r24, 0xC4	; 196
    1876:	c8 0e       	add	r12, r24
    1878:	89 e0       	ldi	r24, 0x09	; 9
    187a:	d8 1e       	adc	r13, r24
    187c:	e1 1c       	adc	r14, r1
    187e:	f1 1c       	adc	r15, r1
    1880:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
    1884:	c6 16       	cp	r12, r22
    1886:	d7 06       	cpc	r13, r23
    1888:	e8 06       	cpc	r14, r24
    188a:	f9 06       	cpc	r15, r25
    188c:	08 f0       	brcs	.+2      	; 0x1890 <CMN_blink.constprop.1+0x64>
    188e:	cf c0       	rjmp	.+414    	; 0x1a2e <CMN_blink.constprop.1+0x202>

	// get current time
	CMN.time += 250 * TIME_1_MSEC;
    1890:	80 91 6a 02 	lds	r24, 0x026A
    1894:	90 91 6b 02 	lds	r25, 0x026B
    1898:	a0 91 6c 02 	lds	r26, 0x026C
    189c:	b0 91 6d 02 	lds	r27, 0x026D
    18a0:	8c 53       	subi	r24, 0x3C	; 60
    18a2:	96 4f       	sbci	r25, 0xF6	; 246
    18a4:	af 4f       	sbci	r26, 0xFF	; 255
    18a6:	bf 4f       	sbci	r27, 0xFF	; 255
    18a8:	80 93 6a 02 	sts	0x026A, r24
    18ac:	90 93 6b 02 	sts	0x026B, r25
    18b0:	a0 93 6c 02 	sts	0x026C, r26
    18b4:	b0 93 6d 02 	sts	0x026D, r27

	// led blinking periods depend on the flight phase
	switch (CMN.state) {
    18b8:	e0 91 bd 02 	lds	r30, 0x02BD
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	e9 30       	cpi	r30, 0x09	; 9
    18c0:	f1 05       	cpc	r31, r1
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <CMN_blink.constprop.1+0x9a>
    18c4:	5c c0       	rjmp	.+184    	; 0x197e <CMN_blink.constprop.1+0x152>
    18c6:	e1 5c       	subi	r30, 0xC1	; 193
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>
		case FR_STATE_READY:
			CMN.green_led_period = 2 * TIME_1_SEC;
    18ce:	80 e2       	ldi	r24, 0x20	; 32
    18d0:	9e e4       	ldi	r25, 0x4E	; 78
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <CMN_blink.constprop.1+0xb4>
			CMN.orange_led_period = TIME_MAX;
			break;

		case FR_STATE_WAIT_TAKE_OFF:
			CMN.green_led_period = 500 * TIME_1_MSEC;
    18d8:	88 e8       	ldi	r24, 0x88	; 136
    18da:	93 e1       	ldi	r25, 0x13	; 19
    18dc:	a0 e0       	ldi	r26, 0x00	; 0
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	80 93 62 02 	sts	0x0262, r24
    18e4:	90 93 63 02 	sts	0x0263, r25
    18e8:	a0 93 64 02 	sts	0x0264, r26
    18ec:	b0 93 65 02 	sts	0x0265, r27
			CMN.orange_led_period = TIME_MAX;
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	9f ef       	ldi	r25, 0xFF	; 255
    18f4:	dc 01       	movw	r26, r24
    18f6:	3b c0       	rjmp	.+118    	; 0x196e <CMN_blink.constprop.1+0x142>
			break;

		case FR_STATE_WAIT_TAKE_OFF_CONF:
			CMN.green_led_period = TIME_MAX;
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	9f ef       	ldi	r25, 0xFF	; 255
    18fc:	dc 01       	movw	r26, r24
    18fe:	80 93 62 02 	sts	0x0262, r24
    1902:	90 93 63 02 	sts	0x0263, r25
    1906:	a0 93 64 02 	sts	0x0264, r26
    190a:	b0 93 65 02 	sts	0x0265, r27
			CMN.orange_led_period = 500 * TIME_1_MSEC;
    190e:	88 e8       	ldi	r24, 0x88	; 136
    1910:	93 e1       	ldi	r25, 0x13	; 19
    1912:	a0 e0       	ldi	r26, 0x00	; 0
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	2b c0       	rjmp	.+86     	; 0x196e <CMN_blink.constprop.1+0x142>
			break;

		case FR_STATE_FLYING:
			CMN.green_led_period = TIME_MAX;
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	dc 01       	movw	r26, r24
    191e:	80 93 62 02 	sts	0x0262, r24
    1922:	90 93 63 02 	sts	0x0263, r25
    1926:	a0 93 64 02 	sts	0x0264, r26
    192a:	b0 93 65 02 	sts	0x0265, r27
			CMN.orange_led_period = 1 * TIME_1_SEC;
    192e:	80 e1       	ldi	r24, 0x10	; 16
    1930:	97 e2       	ldi	r25, 0x27	; 39
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	1b c0       	rjmp	.+54     	; 0x196e <CMN_blink.constprop.1+0x142>
			break;

		case FR_STATE_WAIT_DOOR_OPEN:
			CMN.green_led_period = TIME_MAX;
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	9f ef       	ldi	r25, 0xFF	; 255
    193c:	dc 01       	movw	r26, r24
    193e:	80 93 62 02 	sts	0x0262, r24
    1942:	90 93 63 02 	sts	0x0263, r25
    1946:	a0 93 64 02 	sts	0x0264, r26
    194a:	b0 93 65 02 	sts	0x0265, r27
			CMN.orange_led_period = 250 * TIME_1_MSEC;
    194e:	84 ec       	ldi	r24, 0xC4	; 196
    1950:	99 e0       	ldi	r25, 0x09	; 9
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	0b c0       	rjmp	.+22     	; 0x196e <CMN_blink.constprop.1+0x142>
			CMN.green_led_period = TIME_MAX;
			CMN.orange_led_period = TIME_MAX;
			break;

		case FR_STATE_DOOR_CLOSING:
			CMN.green_led_period = TIME_MAX;
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9f ef       	ldi	r25, 0xFF	; 255
    195c:	dc 01       	movw	r26, r24
    195e:	80 93 62 02 	sts	0x0262, r24
    1962:	90 93 63 02 	sts	0x0263, r25
    1966:	a0 93 64 02 	sts	0x0264, r26
    196a:	b0 93 65 02 	sts	0x0265, r27
			CMN.orange_led_period = TIME_MAX;
    196e:	80 93 66 02 	sts	0x0266, r24
    1972:	90 93 67 02 	sts	0x0267, r25
    1976:	a0 93 68 02 	sts	0x0268, r26
    197a:	b0 93 69 02 	sts	0x0269, r27
			break;
	}

	b.led = GREEN_LED;
    197e:	84 e0       	ldi	r24, 0x04	; 4
    1980:	89 83       	std	Y+1, r24	; 0x01
	b.pseudo_period = CMN.green_led_period;
    1982:	80 91 62 02 	lds	r24, 0x0262
    1986:	90 91 63 02 	lds	r25, 0x0263
    198a:	a0 91 64 02 	lds	r26, 0x0264
    198e:	b0 91 65 02 	lds	r27, 0x0265
    1992:	8a 83       	std	Y+2, r24	; 0x02
    1994:	9b 83       	std	Y+3, r25	; 0x03
    1996:	ac 83       	std	Y+4, r26	; 0x04
    1998:	bd 83       	std	Y+5, r27	; 0x05
	b.top = GREEN_TOP;
    199a:	80 ed       	ldi	r24, 0xD0	; 208
    199c:	97 e0       	ldi	r25, 0x07	; 7
    199e:	a0 e0       	ldi	r26, 0x00	; 0
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	8e 83       	std	Y+6, r24	; 0x06
    19a4:	9f 83       	std	Y+7, r25	; 0x07
    19a6:	a8 87       	std	Y+8, r26	; 0x08
    19a8:	b9 87       	std	Y+9, r27	; 0x09
	b.bottom = GREEN_BOTTOM;
    19aa:	1a 86       	std	Y+10, r1	; 0x0a
    19ac:	1b 86       	std	Y+11, r1	; 0x0b
    19ae:	1c 86       	std	Y+12, r1	; 0x0c
    19b0:	1d 86       	std	Y+13, r1	; 0x0d
	blink_led(&b);
    19b2:	ce 01       	movw	r24, r28
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <blink_led>
	PT_YIELD(pt);
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	8e ed       	ldi	r24, 0xDE	; 222
    19be:	9c e0       	ldi	r25, 0x0C	; 12
    19c0:	90 93 61 02 	sts	0x0261, r25
    19c4:	80 93 60 02 	sts	0x0260, r24
    19c8:	21 11       	cpse	r18, r1
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <CMN_blink.constprop.1+0x1a4>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	30 c0       	rjmp	.+96     	; 0x1a30 <CMN_blink.constprop.1+0x204>

	b.led = ORANGE_LED;
    19d0:	88 e0       	ldi	r24, 0x08	; 8
    19d2:	89 83       	std	Y+1, r24	; 0x01
	b.pseudo_period = CMN.orange_led_period;
    19d4:	80 91 66 02 	lds	r24, 0x0266
    19d8:	90 91 67 02 	lds	r25, 0x0267
    19dc:	a0 91 68 02 	lds	r26, 0x0268
    19e0:	b0 91 69 02 	lds	r27, 0x0269
    19e4:	8a 83       	std	Y+2, r24	; 0x02
    19e6:	9b 83       	std	Y+3, r25	; 0x03
    19e8:	ac 83       	std	Y+4, r26	; 0x04
    19ea:	bd 83       	std	Y+5, r27	; 0x05
	b.top = ORANGE_TOP;
    19ec:	80 ea       	ldi	r24, 0xA0	; 160
    19ee:	9f e0       	ldi	r25, 0x0F	; 15
    19f0:	a0 e0       	ldi	r26, 0x00	; 0
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	8e 83       	std	Y+6, r24	; 0x06
    19f6:	9f 83       	std	Y+7, r25	; 0x07
    19f8:	a8 87       	std	Y+8, r26	; 0x08
    19fa:	b9 87       	std	Y+9, r27	; 0x09
	b.bottom = ORANGE_BOTTOM;
    19fc:	80 ed       	ldi	r24, 0xD0	; 208
    19fe:	97 e0       	ldi	r25, 0x07	; 7
    1a00:	a0 e0       	ldi	r26, 0x00	; 0
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	8a 87       	std	Y+10, r24	; 0x0a
    1a06:	9b 87       	std	Y+11, r25	; 0x0b
    1a08:	ac 87       	std	Y+12, r26	; 0x0c
    1a0a:	bd 87       	std	Y+13, r27	; 0x0d
	blink_led(&b);
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <blink_led>
	PT_YIELD(pt);
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	8b e0       	ldi	r24, 0x0B	; 11
    1a18:	9d e0       	ldi	r25, 0x0D	; 13
    1a1a:	90 93 61 02 	sts	0x0261, r25
    1a1e:	80 93 60 02 	sts	0x0260, r24
    1a22:	22 23       	and	r18, r18
    1a24:	99 f2       	breq	.-90     	; 0x19cc <CMN_blink.constprop.1+0x1a0>

	PT_RESTART(pt);
    1a26:	10 92 61 02 	sts	0x0261, r1
    1a2a:	10 92 60 02 	sts	0x0260, r1
{
	blink_t b;

	PT_BEGIN(pt);

	PT_WAIT_UNTIL(pt, CMN.time + 250 * TIME_1_MSEC < TIME_get());
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
	PT_YIELD(pt);

	PT_RESTART(pt);

	PT_END(pt);
}
    1a30:	2d 96       	adiw	r28, 0x0d	; 13
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	ff 90       	pop	r15
    1a42:	ef 90       	pop	r14
    1a44:	df 90       	pop	r13
    1a46:	cf 90       	pop	r12
    1a48:	08 95       	ret

00001a4a <CMN_init>:

// common module initialization
void CMN_init(void)
{
	// fifo init
	FIFO_init(&CMN.out_fifo, &CMN.out_buf, OUT_SIZE, sizeof(CMN.out_buf[0]));	
    1a4a:	2b e0       	ldi	r18, 0x0B	; 11
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	43 e0       	ldi	r20, 0x03	; 3
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	6a e7       	ldi	r22, 0x7A	; 122
    1a54:	72 e0       	ldi	r23, 0x02	; 2
    1a56:	8e e6       	ldi	r24, 0x6E	; 110
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	FIFO_init(&CMN.in_fifo, &CMN.in_buf, IN_SIZE, sizeof(CMN.in_buf[0]));	
    1a5e:	2b e0       	ldi	r18, 0x0B	; 11
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	67 ea       	ldi	r22, 0xA7	; 167
    1a68:	72 e0       	ldi	r23, 0x02	; 2
    1a6a:	8b e9       	ldi	r24, 0x9B	; 155
    1a6c:	92 e0       	ldi	r25, 0x02	; 2
    1a6e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>

	// thread context init
	PT_INIT(&CMN.out_pt);
    1a72:	10 92 5f 02 	sts	0x025F, r1
    1a76:	10 92 5e 02 	sts	0x025E, r1
	PT_INIT(&CMN.in_pt);
    1a7a:	10 92 5d 02 	sts	0x025D, r1
    1a7e:	10 92 5c 02 	sts	0x025C, r1
	PT_INIT(&CMN.blink_pt);
    1a82:	10 92 61 02 	sts	0x0261, r1
    1a86:	10 92 60 02 	sts	0x0260, r1

	// variables init
	CMN.state = READY;
    1a8a:	10 92 bd 02 	sts	0x02BD, r1
	CMN.bus = NONE;
    1a8e:	10 92 be 02 	sts	0x02BE, r1
	CMN.green_led_period = TIME_MAX;
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	dc 01       	movw	r26, r24
    1a98:	80 93 62 02 	sts	0x0262, r24
    1a9c:	90 93 63 02 	sts	0x0263, r25
    1aa0:	a0 93 64 02 	sts	0x0264, r26
    1aa4:	b0 93 65 02 	sts	0x0265, r27
	CMN.orange_led_period = TIME_MAX;
    1aa8:	80 93 66 02 	sts	0x0266, r24
    1aac:	90 93 67 02 	sts	0x0267, r25
    1ab0:	a0 93 68 02 	sts	0x0268, r26
    1ab4:	b0 93 69 02 	sts	0x0269, r27
	CMN.time = 0;
    1ab8:	10 92 6a 02 	sts	0x026A, r1
    1abc:	10 92 6b 02 	sts	0x026B, r1
    1ac0:	10 92 6c 02 	sts	0x026C, r1
    1ac4:	10 92 6d 02 	sts	0x026D, r1

	// register own call-back for specific commands
	CMN.interf.channel = 3;
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	80 93 51 02 	sts	0x0251, r24
	CMN.interf.cmde_mask = _CM(FR_STATE) | _CM(FR_TIME_GET) | _CM(FR_MUX_RESET);
    1ace:	e2 e5       	ldi	r30, 0x52	; 82
    1ad0:	f2 e0       	ldi	r31, 0x02	; 2
    1ad2:	10 82       	st	Z, r1
    1ad4:	11 82       	std	Z+1, r1	; 0x01
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	82 83       	std	Z+2, r24	; 0x02
    1ada:	13 82       	std	Z+3, r1	; 0x03
    1adc:	14 82       	std	Z+4, r1	; 0x04
    1ade:	15 82       	std	Z+5, r1	; 0x05
    1ae0:	16 82       	std	Z+6, r1	; 0x06
    1ae2:	17 82       	std	Z+7, r1	; 0x07
	CMN.interf.queue = &CMN.in_fifo;
    1ae4:	8b e9       	ldi	r24, 0x9B	; 155
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	90 93 5b 02 	sts	0x025B, r25
    1aec:	80 93 5a 02 	sts	0x025A, r24
	DPT_register(&CMN.interf);
    1af0:	81 e5       	ldi	r24, 0x51	; 81
    1af2:	92 e0       	ldi	r25, 0x02	; 2
    1af4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DPT_register>

	// set led port direction
	LED_DDR |= GREEN_LED | ORANGE_LED;
    1af8:	8a b1       	in	r24, 0x0a	; 10
    1afa:	8c 60       	ori	r24, 0x0C	; 12
    1afc:	8a b9       	out	0x0a, r24	; 10

	// set I2C cmde direction and force the I2C bus low
	DDRD |= _BV(PD5);
    1afe:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~_BV(PD5);
    1b00:	5d 98       	cbi	0x0b, 5	; 11
    1b02:	08 95       	ret

00001b04 <CMN_run>:

// common module run method
void CMN_run(void)
{
	// handle command if any
	(void)PT_SCHEDULE(CMN_in(&CMN.in_pt));
    1b04:	0e 94 3b 0b 	call	0x1676	; 0x1676 <CMN_in.constprop.2>

	// send response if any
	(void)PT_SCHEDULE(CMN_out(&CMN.out_pt));
    1b08:	0e 94 b5 0b 	call	0x176a	; 0x176a <CMN_out.constprop.3>

	// if all frames are handled
	if ( ( FIFO_full(&CMN.out_fifo) == 0 ) && ( FIFO_full(&CMN.in_fifo) == 0 ) ) {
    1b0c:	8e e6       	ldi	r24, 0x6E	; 110
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <FIFO_full>
    1b14:	89 2b       	or	r24, r25
    1b16:	51 f4       	brne	.+20     	; 0x1b2c <CMN_run+0x28>
    1b18:	8b e9       	ldi	r24, 0x9B	; 155
    1b1a:	92 e0       	ldi	r25, 0x02	; 2
    1b1c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <FIFO_full>
    1b20:	89 2b       	or	r24, r25
    1b22:	21 f4       	brne	.+8      	; 0x1b2c <CMN_run+0x28>
		// unlock the dispatcher
		DPT_unlock(&CMN.interf);
    1b24:	81 e5       	ldi	r24, 0x51	; 81
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	0e 94 1d 10 	call	0x203a	; 0x203a <DPT_unlock>
	}

	// blink the leds
	(void)PT_SCHEDULE(CMN_blink(&CMN.blink_pt));
    1b2c:	0e 94 16 0c 	call	0x182c	; 0x182c <CMN_blink.constprop.1>
    1b30:	08 95       	ret

00001b32 <DPT_I2C_call_back>:
}


// I2C reception call-back
static void DPT_I2C_call_back(twi_state_t state, u8 nb_data, void* misc)
{
    1b32:	26 2f       	mov	r18, r22
	(void)misc;

	// reset tx time-out because the driver is signalling an event
	DPT.time_out = TIME_MAX;
    1b34:	4f ef       	ldi	r20, 0xFF	; 255
    1b36:	5f ef       	ldi	r21, 0xFF	; 255
    1b38:	ba 01       	movw	r22, r20
    1b3a:	40 93 b0 03 	sts	0x03B0, r20
    1b3e:	50 93 b1 03 	sts	0x03B1, r21
    1b42:	60 93 b2 03 	sts	0x03B2, r22
    1b46:	70 93 b3 03 	sts	0x03B3, r23

	// upon the state
	switch ( state ) {
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	31 97       	sbiw	r30, 0x01	; 1
    1b50:	eb 30       	cpi	r30, 0x0B	; 11
    1b52:	f1 05       	cpc	r31, r1
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <DPT_I2C_call_back+0x26>
    1b56:	40 c0       	rjmp	.+128    	; 0x1bd8 <DPT_I2C_call_back+0xa6>
    1b58:	e8 5b       	subi	r30, 0xB8	; 184
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>
			// whether the I2C address is free, so take it
			// or the slave has crached
			// whatever the problem, put a failed resp in rx frame
			// as the comm was locally initiated
			// all the fields are those of DPT.hard frame
			DPT.hard.dest = DPT.sl_addr;
    1b60:	80 91 af 03 	lds	r24, 0x03AF
    1b64:	80 93 a3 03 	sts	0x03A3, r24
			DPT.hard.resp = 1;
    1b68:	80 91 a7 03 	lds	r24, 0x03A7
			DPT.hard.error = 1;
    1b6c:	82 60       	ori	r24, 0x02	; 2
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	3b c0       	rjmp	.+118    	; 0x1be8 <DPT_I2C_call_back+0xb6>
		case TWI_MS_TX_END:
			// writing data ends

			// simple I2C actions are directly handled
			// communications with other nodes will received a response later
			if ( (DPT.hard.cmde == FR_I2C_READ) || (DPT.hard.cmde == FR_I2C_WRITE) ) {
    1b72:	80 91 a6 03 	lds	r24, 0x03A6
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	48 f5       	brcc	.+82     	; 0x1bcc <DPT_I2C_call_back+0x9a>
				// update header
				DPT.hard.orig = DPT.hard.dest;
    1b7a:	80 91 a3 03 	lds	r24, 0x03A3
    1b7e:	80 93 a4 03 	sts	0x03A4, r24
				DPT.hard.dest = DPT_SELF_ADDR;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	80 93 a3 03 	sts	0x03A3, r24
				DPT.hard.resp = 1;
    1b88:	80 91 a7 03 	lds	r24, 0x03A7
				DPT.hard.error = 0;
    1b8c:	82 60       	ori	r24, 0x02	; 2
    1b8e:	8e 7f       	andi	r24, 0xFE	; 254
    1b90:	2b c0       	rjmp	.+86     	; 0x1be8 <DPT_I2C_call_back+0xb6>

			break;

		case TWI_SL_TX_BEGIN:
			// don't want to send a single byte
			TWI_sl_tx(0, NULL);
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <TWI_sl_tx>

			break;
    1b9c:	08 95       	ret

		case TWI_SL_TX_END:
			// release the bus
			TWI_stop();
    1b9e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <TWI_stop>

			break;
    1ba2:	08 95       	ret

		case TWI_GENCALL_BEGIN:
			// just provide a buffer to store the incoming frame
			// only the origin, the cmde/resp and the arguments are received
			DPT.hard_fini = KO;
    1ba4:	10 92 ae 03 	sts	0x03AE, r1
			DPT.hard.dest = DPT.sl_addr;
    1ba8:	80 91 af 03 	lds	r24, 0x03AF
    1bac:	80 93 a3 03 	sts	0x03A3, r24
			TWI_sl_rx(sizeof(frame_t) - FRAME_ORIG_OFFSET, (u8*)&DPT.hard + FRAME_ORIG_OFFSET);
    1bb0:	64 ea       	ldi	r22, 0xA4	; 164
    1bb2:	73 e0       	ldi	r23, 0x03	; 3
    1bb4:	8a e0       	ldi	r24, 0x0A	; 10
    1bb6:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <TWI_sl_rx>

			break;
    1bba:	08 95       	ret

		case TWI_GENCALL_END:
			// if the msg len is correct
			if ( nb_data == (sizeof(frame_t) - FRAME_ORIG_OFFSET)) {
    1bbc:	2a 30       	cpi	r18, 0x0A	; 10
    1bbe:	31 f4       	brne	.+12     	; 0x1bcc <DPT_I2C_call_back+0x9a>
				// enqueue the incoming frame
				FIFO_put(&DPT.in_fifo, &DPT.hard);
    1bc0:	63 ea       	ldi	r22, 0xA3	; 163
    1bc2:	73 e0       	ldi	r23, 0x03	; 3
    1bc4:	85 e0       	ldi	r24, 0x05	; 5
    1bc6:	93 e0       	ldi	r25, 0x03	; 3
    1bc8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
			}
			// else it is ignored

			// release the bus
			TWI_stop();
    1bcc:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <TWI_stop>
			DPT.hard_fini = OK;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	80 93 ae 03 	sts	0x03AE, r24

			break;
    1bd6:	08 95       	ret

		default:
			// error or time-out state
			DPT.hard.dest = DPT.sl_addr;
    1bd8:	80 91 af 03 	lds	r24, 0x03AF
    1bdc:	80 93 a3 03 	sts	0x03A3, r24
			DPT.hard.resp = 1;
    1be0:	80 91 a7 03 	lds	r24, 0x03A7
			DPT.hard.time_out = 1;
    1be4:	82 60       	ori	r24, 0x02	; 2
    1be6:	84 60       	ori	r24, 0x04	; 4
    1be8:	80 93 a7 03 	sts	0x03A7, r24
    1bec:	e9 cf       	rjmp	.-46     	; 0x1bc0 <DPT_I2C_call_back+0x8e>

00001bee <DPT_out.constprop.0>:

static PT_THREAD( DPT_out(pt_t* pt) )
{
	u8 twi_res;

	PT_BEGIN(pt);
    1bee:	e0 91 53 03 	lds	r30, 0x0353
    1bf2:	f0 91 54 03 	lds	r31, 0x0354
    1bf6:	30 97       	sbiw	r30, 0x00	; 0
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <DPT_out.constprop.0+0xe>
    1bfa:	09 94       	ijmp

	// if no twi transfer running
	if ( DPT.hard_fini == OK ) {
    1bfc:	80 91 ae 03 	lds	r24, 0x03AE
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	f9 f4       	brne	.+62     	; 0x1c42 <DPT_out.constprop.0+0x54>
		// read any available frame
		PT_WAIT_UNTIL(pt, FIFO_get(&DPT.out_fifo, &DPT.hard));
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	9e e0       	ldi	r25, 0x0E	; 14
    1c08:	90 93 54 03 	sts	0x0354, r25
    1c0c:	80 93 53 03 	sts	0x0353, r24
    1c10:	63 ea       	ldi	r22, 0xA3	; 163
    1c12:	73 e0       	ldi	r23, 0x03	; 3
    1c14:	85 e5       	ldi	r24, 0x55	; 85
    1c16:	93 e0       	ldi	r25, 0x03	; 3
    1c18:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <DPT_out.constprop.0+0x34>
    1c20:	48 c0       	rjmp	.+144    	; 0x1cb2 <DPT_out.constprop.0+0xc4>

		// compute and save time-out limit
		// byte transmission is typically 100 us
		DPT.time_out = TIME_get() + TIME_1_MSEC * sizeof(frame_t);
    1c22:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
    1c26:	62 59       	subi	r22, 0x92	; 146
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	60 93 b0 03 	sts	0x03B0, r22
    1c32:	70 93 b1 03 	sts	0x03B1, r23
    1c36:	80 93 b2 03 	sts	0x03B2, r24
    1c3a:	90 93 b3 03 	sts	0x03B3, r25

		// now a twi transfer shall begin
		DPT.hard_fini = KO;
    1c3e:	10 92 ae 03 	sts	0x03AE, r1
	}

	// read from and write to an I2C component are handled specificly
	// the frame characteristics to correctly complete the fields of the response
	// in case of I2C read or write are taken from the DPT.hard frame
	switch ( DPT.hard.cmde ) {
    1c42:	80 91 a6 03 	lds	r24, 0x03A6
    1c46:	88 23       	and	r24, r24
    1c48:	19 f0       	breq	.+6      	; 0x1c50 <DPT_out.constprop.0+0x62>
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	79 f4       	brne	.+30     	; 0x1c6c <DPT_out.constprop.0+0x7e>
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <DPT_out.constprop.0+0x74>
		case FR_I2C_READ:
			twi_res = TWI_ms_rx(DPT.hard.dest, DPT.hard.argv[0], (u8*)&DPT.hard + FRAME_ARGV_OFFSET + 1);
    1c50:	48 ea       	ldi	r20, 0xA8	; 168
    1c52:	53 e0       	ldi	r21, 0x03	; 3
    1c54:	60 91 a8 03 	lds	r22, 0x03A8
    1c58:	80 91 a3 03 	lds	r24, 0x03A3
    1c5c:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <TWI_ms_rx>
    1c60:	0c c0       	rjmp	.+24     	; 0x1c7a <DPT_out.constprop.0+0x8c>
			break;

		case FR_I2C_WRITE:
			twi_res = TWI_ms_tx(DPT.hard.dest, DPT.hard.argv[0], (u8*)&DPT.hard + FRAME_ARGV_OFFSET + 1);
    1c62:	48 ea       	ldi	r20, 0xA8	; 168
    1c64:	53 e0       	ldi	r21, 0x03	; 3
    1c66:	60 91 a8 03 	lds	r22, 0x03A8
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <DPT_out.constprop.0+0x84>
			break;

		default:
			twi_res = TWI_ms_tx(DPT.hard.dest, sizeof(frame_t) - FRAME_ORIG_OFFSET, (u8*)&DPT.hard + FRAME_ORIG_OFFSET);
    1c6c:	44 ea       	ldi	r20, 0xA4	; 164
    1c6e:	53 e0       	ldi	r21, 0x03	; 3
    1c70:	6a e0       	ldi	r22, 0x0A	; 10
    1c72:	80 91 a3 03 	lds	r24, 0x03A3
    1c76:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_ms_tx>
			break;
	}

	// if the TWI is not able to sent the frame
	if ( twi_res == KO ) {
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	0c c0       	rjmp	.+24     	; 0x1c96 <DPT_out.constprop.0+0xa8>
		// prevent time-out signalling
		DPT.time_out = TIME_MAX;
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	dc 01       	movw	r26, r24
    1c84:	80 93 b0 03 	sts	0x03B0, r24
    1c88:	90 93 b1 03 	sts	0x03B1, r25
    1c8c:	a0 93 b2 03 	sts	0x03B2, r26
    1c90:	b0 93 b3 03 	sts	0x03B3, r27
    1c94:	0a c0       	rjmp	.+20     	; 0x1caa <DPT_out.constprop.0+0xbc>
		// retry sending the frame
		PT_RESTART(pt);
	}

	// wait until the twi transfer is done
	PT_WAIT_UNTIL(pt, DPT.hard_fini != OK);
    1c96:	8b e4       	ldi	r24, 0x4B	; 75
    1c98:	9e e0       	ldi	r25, 0x0E	; 14
    1c9a:	90 93 54 03 	sts	0x0354, r25
    1c9e:	80 93 53 03 	sts	0x0353, r24
    1ca2:	80 91 ae 03 	lds	r24, 0x03AE
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	21 f0       	breq	.+8      	; 0x1cb2 <DPT_out.constprop.0+0xc4>

	// and loop back for another transfer
	PT_RESTART(pt);
    1caa:	10 92 54 03 	sts	0x0354, r1
    1cae:	10 92 53 03 	sts	0x0353, r1

	PT_END(pt);
}
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	08 95       	ret

00001cb6 <DPT_in.constprop.1>:

	PT_END(pt);
}


static PT_THREAD( DPT_in(pt_t* pt) )
    1cb6:	ac e0       	ldi	r26, 0x0C	; 12
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e1 e6       	ldi	r30, 0x61	; 97
    1cbc:	fe e0       	ldi	r31, 0x0E	; 14
    1cbe:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__prologue_saves__>
	frame_t fr;

	PT_BEGIN(pt);

	// if any awaiting incoming frames
	PT_WAIT_UNTIL(pt, FIFO_get(&DPT.in_fifo, &fr));
    1cc2:	81 e6       	ldi	r24, 0x61	; 97
    1cc4:	9e e0       	ldi	r25, 0x0E	; 14
    1cc6:	90 93 04 03 	sts	0x0304, r25
    1cca:	80 93 03 03 	sts	0x0303, r24
    1cce:	ee 24       	eor	r14, r14
    1cd0:	e3 94       	inc	r14
    1cd2:	f1 2c       	mov	r15, r1
    1cd4:	ec 0e       	add	r14, r28
    1cd6:	fd 1e       	adc	r15, r29
    1cd8:	b7 01       	movw	r22, r14
    1cda:	85 e0       	ldi	r24, 0x05	; 5
    1cdc:	93 e0       	ldi	r25, 0x03	; 3
    1cde:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    1ce2:	88 23       	and	r24, r24
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <DPT_in.constprop.1+0x32>
    1ce6:	80 c0       	rjmp	.+256    	; 0x1de8 <DPT_in.constprop.1+0x132>
#if 0
		mask.raw = DPT.channels[i]->cmde_mask;
		mask.raw = mask.raw & _CM(cmde);
		if ( mask.hi || mask.lo ) {
#else
		if ( DPT.channels[i]->cmde_mask & _CM(cmde) ) {
    1ce8:	0c 81       	ldd	r16, Y+4	; 0x04
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 ed 1a 	call	0x35da	; 0x35da <__ashldi3>
    1cfe:	b2 2e       	mov	r11, r18
    1d00:	a3 2e       	mov	r10, r19
    1d02:	94 2e       	mov	r9, r20
    1d04:	85 2e       	mov	r8, r21
    1d06:	76 2e       	mov	r7, r22
    1d08:	67 2e       	mov	r6, r23
    1d0a:	58 2e       	mov	r5, r24
    1d0c:	49 2e       	mov	r4, r25
    1d0e:	8f eb       	ldi	r24, 0xBF	; 191
    1d10:	c8 2e       	mov	r12, r24
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	d8 2e       	mov	r13, r24
    1d16:	00 e0       	ldi	r16, 0x00	; 0
    1d18:	10 e0       	ldi	r17, 0x00	; 0
#endif
			// enqueue it if a queue is available
			if ( DPT.channels[i]->queue && (OK == FIFO_put(DPT.channels[i]->queue, fr)) ) {
    1d1a:	3e 2c       	mov	r3, r14
    1d1c:	2f 2c       	mov	r2, r15
				// if a success, lock the channel
				DPT.lock |= 1 << i;
    1d1e:	ee 24       	eor	r14, r14
    1d20:	e3 94       	inc	r14
    1d22:	f1 2c       	mov	r15, r1
#endif

	// for each registered commands ranges
	for (i = 0; i < DPT_CHAN_NB; i++) {
		// if channel is not registered
		if ( DPT.channels[i] == NULL )
    1d24:	0c 87       	std	Y+12, r16	; 0x0c
    1d26:	d6 01       	movw	r26, r12
    1d28:	ed 91       	ld	r30, X+
    1d2a:	fd 91       	ld	r31, X+
    1d2c:	6d 01       	movw	r12, r26
    1d2e:	30 97       	sbiw	r30, 0x00	; 0
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <DPT_in.constprop.1+0x7e>
    1d32:	50 c0       	rjmp	.+160    	; 0x1dd4 <DPT_in.constprop.1+0x11e>
#if 0
		mask.raw = DPT.channels[i]->cmde_mask;
		mask.raw = mask.raw & _CM(cmde);
		if ( mask.hi || mask.lo ) {
#else
		if ( DPT.channels[i]->cmde_mask & _CM(cmde) ) {
    1d34:	21 81       	ldd	r18, Z+1	; 0x01
    1d36:	2b 21       	and	r18, r11
    1d38:	32 81       	ldd	r19, Z+2	; 0x02
    1d3a:	3a 21       	and	r19, r10
    1d3c:	43 81       	ldd	r20, Z+3	; 0x03
    1d3e:	49 21       	and	r20, r9
    1d40:	54 81       	ldd	r21, Z+4	; 0x04
    1d42:	58 21       	and	r21, r8
    1d44:	65 81       	ldd	r22, Z+5	; 0x05
    1d46:	67 21       	and	r22, r7
    1d48:	76 81       	ldd	r23, Z+6	; 0x06
    1d4a:	76 21       	and	r23, r6
    1d4c:	87 81       	ldd	r24, Z+7	; 0x07
    1d4e:	90 85       	ldd	r25, Z+8	; 0x08
    1d50:	85 21       	and	r24, r5
    1d52:	94 21       	and	r25, r4
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__cmpdi2_s8>
    1d5a:	e1 f1       	breq	.+120    	; 0x1dd4 <DPT_in.constprop.1+0x11e>
#endif
			// enqueue it if a queue is available
			if ( DPT.channels[i]->queue && (OK == FIFO_put(DPT.channels[i]->queue, fr)) ) {
    1d5c:	81 85       	ldd	r24, Z+9	; 0x09
    1d5e:	92 85       	ldd	r25, Z+10	; 0x0a
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	c1 f1       	breq	.+112    	; 0x1dd4 <DPT_in.constprop.1+0x11e>
    1d64:	63 2d       	mov	r22, r3
    1d66:	72 2d       	mov	r23, r2
    1d68:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	91 f5       	brne	.+100    	; 0x1dd4 <DPT_in.constprop.1+0x11e>
				// if a success, lock the channel
				DPT.lock |= 1 << i;
    1d70:	f7 01       	movw	r30, r14
    1d72:	0c 84       	ldd	r0, Y+12	; 0x0c
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DPT_in.constprop.1+0xc4>
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DPT_in.constprop.1+0xc0>
    1d7e:	8f 2f       	mov	r24, r31
    1d80:	88 0f       	add	r24, r24
    1d82:	88 0b       	sbc	r24, r24
    1d84:	a0 91 d7 02 	lds	r26, 0x02D7
    1d88:	ae 2b       	or	r26, r30
    1d8a:	70 91 d8 02 	lds	r23, 0x02D8
    1d8e:	7f 2b       	or	r23, r31
    1d90:	60 91 d9 02 	lds	r22, 0x02D9
    1d94:	68 2b       	or	r22, r24
    1d96:	50 91 da 02 	lds	r21, 0x02DA
    1d9a:	58 2b       	or	r21, r24
    1d9c:	40 91 db 02 	lds	r20, 0x02DB
    1da0:	48 2b       	or	r20, r24
    1da2:	30 91 dc 02 	lds	r19, 0x02DC
    1da6:	38 2b       	or	r19, r24
    1da8:	20 91 dd 02 	lds	r18, 0x02DD
    1dac:	28 2b       	or	r18, r24
    1dae:	90 91 de 02 	lds	r25, 0x02DE
    1db2:	98 2b       	or	r25, r24
    1db4:	a0 93 d7 02 	sts	0x02D7, r26
    1db8:	70 93 d8 02 	sts	0x02D8, r23
    1dbc:	60 93 d9 02 	sts	0x02D9, r22
    1dc0:	50 93 da 02 	sts	0x02DA, r21
    1dc4:	40 93 db 02 	sts	0x02DB, r20
    1dc8:	30 93 dc 02 	sts	0x02DC, r19
    1dcc:	20 93 dd 02 	sts	0x02DD, r18
    1dd0:	90 93 de 02 	sts	0x02DE, r25
    1dd4:	0f 5f       	subi	r16, 0xFF	; 255
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
#else
	u64 mask;
#endif

	// for each registered commands ranges
	for (i = 0; i < DPT_CHAN_NB; i++) {
    1dd8:	0c 30       	cpi	r16, 0x0C	; 12
    1dda:	11 05       	cpc	r17, r1
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <DPT_in.constprop.1+0x12a>
    1dde:	a2 cf       	rjmp	.-188    	; 0x1d24 <DPT_in.constprop.1+0x6e>
	// dispatch the frame
	DPT_dispatch(&fr);

	// the frame has been sent to its destination
	// so loop back for the next frame
	PT_RESTART(pt);
    1de0:	10 92 04 03 	sts	0x0304, r1
    1de4:	10 92 03 03 	sts	0x0303, r1

	PT_END(pt);
}
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	2c 96       	adiw	r28, 0x0c	; 12
    1dec:	e2 e1       	ldi	r30, 0x12	; 18
    1dee:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__epilogue_restores__>

00001df2 <DPT_appli.constprop.2>:
		}
	}
}


static PT_THREAD( DPT_appli(pt_t* pt) )
    1df2:	a6 e1       	ldi	r26, 0x16	; 22
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ef ef       	ldi	r30, 0xFF	; 255
    1df8:	fe e0       	ldi	r31, 0x0E	; 14
    1dfa:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__+0x1e>
	u8 i;

	PT_BEGIN(pt);

	// if any awaiting incoming frames
	PT_WAIT_UNTIL(pt, FIFO_get(&DPT.appli_fifo, &fr));
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	9e e0       	ldi	r25, 0x0E	; 14
    1e02:	90 93 e0 02 	sts	0x02E0, r25
    1e06:	80 93 df 02 	sts	0x02DF, r24
    1e0a:	be 01       	movw	r22, r28
    1e0c:	6f 5f       	subi	r22, 0xFF	; 255
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	81 ee       	ldi	r24, 0xE1	; 225
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    1e18:	88 23       	and	r24, r24
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <DPT_appli.constprop.2+0x2c>
    1e1c:	40 c0       	rjmp	.+128    	; 0x1e9e <DPT_appli.constprop.2+0xac>

	// route the frame
	ROUT_route(fr.dest, routes, &nb_routes);
    1e1e:	ae 01       	movw	r20, r28
    1e20:	4a 5e       	subi	r20, 0xEA	; 234
    1e22:	5f 4f       	sbci	r21, 0xFF	; 255
    1e24:	be 01       	movw	r22, r28
    1e26:	64 5f       	subi	r22, 0xF4	; 244
    1e28:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	0e 94 be 11 	call	0x237c	; 0x237c <ROUT_route>

	// no route
	if ( nb_routes == 0 ) {
    1e30:	8e 89       	ldd	r24, Y+22	; 0x16
    1e32:	81 11       	cpse	r24, r1
    1e34:	04 c0       	rjmp	.+8      	; 0x1e3e <DPT_appli.constprop.2+0x4c>
		// so we will send it unmodify
		// but twicking the resulting route
		nb_routes = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	8e 8b       	std	Y+22, r24	; 0x16
		routes[0] = fr.dest;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8c 87       	std	Y+12, r24	; 0x0c
		}
	}
}


static PT_THREAD( DPT_appli(pt_t* pt) )
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	27 c0       	rjmp	.+78     	; 0x1e90 <DPT_appli.constprop.2+0x9e>
		nb_routes = 1;
		routes[0] = fr.dest;
	}

	for ( i = 0; i < nb_routes; i++ ) {
		fr.dest = routes[i];
    1e42:	ec e0       	ldi	r30, 0x0C	; 12
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	ec 0f       	add	r30, r28
    1e48:	fd 1f       	adc	r31, r29
    1e4a:	e1 0f       	add	r30, r17
    1e4c:	f1 1d       	adc	r31, r1
    1e4e:	80 81       	ld	r24, Z
    1e50:	89 83       	std	Y+1, r24	; 0x01
		// if the frame destination is only local
		if ( (fr.dest == DPT_SELF_ADDR) || (fr.dest == DPT.sl_addr) ) {
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <DPT_appli.constprop.2+0x6c>
    1e56:	90 91 af 03 	lds	r25, 0x03AF
    1e5a:	89 13       	cpse	r24, r25
    1e5c:	08 c0       	rjmp	.+16     	; 0x1e6e <DPT_appli.constprop.2+0x7c>
			FIFO_put(&DPT.in_fifo, &fr);
    1e5e:	be 01       	movw	r22, r28
    1e60:	6f 5f       	subi	r22, 0xFF	; 255
    1e62:	7f 4f       	sbci	r23, 0xFF	; 255
    1e64:	85 e0       	ldi	r24, 0x05	; 5
    1e66:	93 e0       	ldi	r25, 0x03	; 3
    1e68:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <DPT_appli.constprop.2+0xa4>
			// short cut the handling to speed up
			break;
		}

		// if broadcasting
		if (fr.dest == DPT_BROADCAST_ADDR) {
    1e6e:	81 11       	cpse	r24, r1
    1e70:	07 c0       	rjmp	.+14     	; 0x1e80 <DPT_appli.constprop.2+0x8e>
			// also goes to local node
			FIFO_put(&DPT.in_fifo, &fr);
    1e72:	be 01       	movw	r22, r28
    1e74:	6f 5f       	subi	r22, 0xFF	; 255
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	85 e0       	ldi	r24, 0x05	; 5
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
		}

		// and finally goes to distant node
		FIFO_put(&DPT.out_fifo, &fr);
    1e80:	be 01       	movw	r22, r28
    1e82:	6f 5f       	subi	r22, 0xFF	; 255
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	85 e5       	ldi	r24, 0x55	; 85
    1e88:	93 e0       	ldi	r25, 0x03	; 3
    1e8a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
		// but twicking the resulting route
		nb_routes = 1;
		routes[0] = fr.dest;
	}

	for ( i = 0; i < nb_routes; i++ ) {
    1e8e:	1f 5f       	subi	r17, 0xFF	; 255
    1e90:	8e 89       	ldd	r24, Y+22	; 0x16
    1e92:	18 17       	cp	r17, r24
    1e94:	b0 f2       	brcs	.-84     	; 0x1e42 <DPT_appli.constprop.2+0x50>
		// and finally goes to distant node
		FIFO_put(&DPT.out_fifo, &fr);
	}

	// so loop back for the next frame
	PT_RESTART(pt);
    1e96:	10 92 e0 02 	sts	0x02E0, r1
    1e9a:	10 92 df 02 	sts	0x02DF, r1

	PT_END(pt);
}
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	66 96       	adiw	r28, 0x16	; 22
    1ea2:	e3 e0       	ldi	r30, 0x03	; 3
    1ea4:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__+0x1e>

00001ea8 <DPT_init>:
// public functions
//

// dispatcher initialization
void DPT_init(void)
{
    1ea8:	cf 93       	push	r28
    1eaa:	ef eb       	ldi	r30, 0xBF	; 191
    1eac:	f2 e0       	ldi	r31, 0x02	; 2
	u8 i;

	// channels and lock reset
	for ( i = 0; i < DPT_CHAN_NB; i++ ) {
		DPT.channels[i] = NULL;
    1eae:	11 92       	st	Z+, r1
    1eb0:	11 92       	st	Z+, r1
void DPT_init(void)
{
	u8 i;

	// channels and lock reset
	for ( i = 0; i < DPT_CHAN_NB; i++ ) {
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	e7 3d       	cpi	r30, 0xD7	; 215
    1eb6:	f8 07       	cpc	r31, r24
    1eb8:	d1 f7       	brne	.-12     	; 0x1eae <DPT_init+0x6>
		DPT.channels[i] = NULL;
	}
	DPT.lock = 0;
    1eba:	10 92 d7 02 	sts	0x02D7, r1
    1ebe:	10 92 d8 02 	sts	0x02D8, r1
    1ec2:	10 92 d9 02 	sts	0x02D9, r1
    1ec6:	10 92 da 02 	sts	0x02DA, r1
    1eca:	10 92 db 02 	sts	0x02DB, r1
    1ece:	10 92 dc 02 	sts	0x02DC, r1
    1ed2:	10 92 dd 02 	sts	0x02DD, r1
    1ed6:	10 92 de 02 	sts	0x02DE, r1

	// appli thread init
	FIFO_init(&DPT.appli_fifo, &DPT.appli_buf, NB_APPLI_FRAMES, sizeof(frame_t));
    1eda:	2b e0       	ldi	r18, 0x0B	; 11
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	6d ee       	ldi	r22, 0xED	; 237
    1ee4:	72 e0       	ldi	r23, 0x02	; 2
    1ee6:	81 ee       	ldi	r24, 0xE1	; 225
    1ee8:	92 e0       	ldi	r25, 0x02	; 2
    1eea:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	PT_INIT(&DPT.appli_pt);
    1eee:	10 92 e0 02 	sts	0x02E0, r1
    1ef2:	10 92 df 02 	sts	0x02DF, r1

	// in thread init
	FIFO_init(&DPT.in_fifo, &DPT.in_buf, NB_IN_FRAMES, sizeof(frame_t));
    1ef6:	2b e0       	ldi	r18, 0x0B	; 11
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	45 e0       	ldi	r20, 0x05	; 5
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	61 e1       	ldi	r22, 0x11	; 17
    1f00:	73 e0       	ldi	r23, 0x03	; 3
    1f02:	85 e0       	ldi	r24, 0x05	; 5
    1f04:	93 e0       	ldi	r25, 0x03	; 3
    1f06:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	PT_INIT(&DPT.in_pt);
    1f0a:	10 92 04 03 	sts	0x0304, r1
    1f0e:	10 92 03 03 	sts	0x0303, r1

	// out thread init
	DPT.sl_addr = DPT_SELF_ADDR;
    1f12:	c1 e0       	ldi	r28, 0x01	; 1
    1f14:	c0 93 af 03 	sts	0x03AF, r28
	DPT.time_out = TIME_MAX;
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	9f ef       	ldi	r25, 0xFF	; 255
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	80 93 b0 03 	sts	0x03B0, r24
    1f22:	90 93 b1 03 	sts	0x03B1, r25
    1f26:	a0 93 b2 03 	sts	0x03B2, r26
    1f2a:	b0 93 b3 03 	sts	0x03B3, r27
	FIFO_init(&DPT.out_fifo, &DPT.out_buf, NB_OUT_FRAMES, sizeof(frame_t));
    1f2e:	2b e0       	ldi	r18, 0x0B	; 11
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	45 e0       	ldi	r20, 0x05	; 5
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	61 e6       	ldi	r22, 0x61	; 97
    1f38:	73 e0       	ldi	r23, 0x03	; 3
    1f3a:	85 e5       	ldi	r24, 0x55	; 85
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	PT_INIT(&DPT.out_pt);
    1f42:	10 92 54 03 	sts	0x0354, r1
    1f46:	10 92 53 03 	sts	0x0353, r1
	DPT.hard_fini = OK;
    1f4a:	c0 93 ae 03 	sts	0x03AE, r28

	// start TWI layer
	TWI_init(DPT_I2C_call_back, NULL);
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	89 e9       	ldi	r24, 0x99	; 153
    1f54:	9d e0       	ldi	r25, 0x0D	; 13
    1f56:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TWI_init>
}
    1f5a:	cf 91       	pop	r28
    1f5c:	08 95       	ret

00001f5e <DPT_run>:


// dispatcher time-out handling
void DPT_run(void)
{
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
	// if current time is above the computed time-out
	if ( (TIME_get() > DPT.time_out) && (DPT.hard_fini != OK) ) {
    1f62:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
    1f66:	00 91 b0 03 	lds	r16, 0x03B0
    1f6a:	10 91 b1 03 	lds	r17, 0x03B1
    1f6e:	20 91 b2 03 	lds	r18, 0x03B2
    1f72:	30 91 b3 03 	lds	r19, 0x03B3
    1f76:	06 17       	cp	r16, r22
    1f78:	17 07       	cpc	r17, r23
    1f7a:	28 07       	cpc	r18, r24
    1f7c:	39 07       	cpc	r19, r25
    1f7e:	88 f4       	brcc	.+34     	; 0x1fa2 <DPT_run+0x44>
    1f80:	80 91 ae 03 	lds	r24, 0x03AE
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	69 f0       	breq	.+26     	; 0x1fa2 <DPT_run+0x44>
		cli();
    1f88:	f8 94       	cli
		DPT.hard.time_out = 1;
    1f8a:	80 91 a7 03 	lds	r24, 0x03A7
    1f8e:	84 60       	ori	r24, 0x04	; 4
    1f90:	80 93 a7 03 	sts	0x03A7, r24
		// fake an interrupt with twi layer error
		DPT_I2C_call_back(TWI_ERROR, 0, NULL);
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	8c e0       	ldi	r24, 0x0C	; 12
    1f9c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <DPT_I2C_call_back>
		sei();
    1fa0:	78 94       	sei
	}

	(void)PT_SCHEDULE(DPT_out(&DPT.out_pt));
    1fa2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <DPT_out.constprop.0>
	(void)PT_SCHEDULE(DPT_in(&DPT.in_pt));
    1fa6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <DPT_in.constprop.1>
	(void)PT_SCHEDULE(DPT_appli(&DPT.appli_pt));
    1faa:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DPT_appli.constprop.2>
}
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <DPT_register>:
//  - the status function is called to give the transmission status
//
// the available channel is directly set in the structure
// if it is 0xff, it means no more channel are available
void DPT_register(dpt_interface_t* interf)
{
    1fb4:	fc 01       	movw	r30, r24
	u8 i;

	// check if interface is invalid
	if ( interf == NULL ) {
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	c1 f0       	breq	.+48     	; 0x1fea <DPT_register+0x36>
		// then quit immediatly
		return;
	}

	// check if channel is invalid
	if ( interf->channel >= DPT_CHAN_NB ) {
    1fba:	20 81       	ld	r18, Z
    1fbc:	2c 30       	cpi	r18, 0x0C	; 12
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <DPT_register+0xe>
    1fc0:	0e c0       	rjmp	.+28     	; 0x1fde <DPT_register+0x2a>
	}

	// check if requested channel is free
	// else find and use the next free
	for ( i = interf->channel; i < DPT_CHAN_NB; i++ ) {
		if ( DPT.channels[i] == NULL ) {
    1fc2:	a2 2f       	mov	r26, r18
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	aa 0f       	add	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	a1 54       	subi	r26, 0x41	; 65
    1fcc:	bd 4f       	sbci	r27, 0xFD	; 253
    1fce:	8d 91       	ld	r24, X+
    1fd0:	9c 91       	ld	r25, X
    1fd2:	11 97       	sbiw	r26, 0x01	; 1
    1fd4:	89 2b       	or	r24, r25
    1fd6:	31 f0       	breq	.+12     	; 0x1fe4 <DPT_register+0x30>
		return;
	}

	// check if requested channel is free
	// else find and use the next free
	for ( i = interf->channel; i < DPT_CHAN_NB; i++ ) {
    1fd8:	2f 5f       	subi	r18, 0xFF	; 255
    1fda:	2c 30       	cpi	r18, 0x0C	; 12
    1fdc:	91 f7       	brne	.-28     	; 0x1fc2 <DPT_register+0xe>
			break;
		}
	}
	// if none free, return error (0xff)
	if ( i == DPT_CHAN_NB ) {
		interf->channel = 0xff;
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	80 83       	st	Z, r24
		return;
    1fe2:	08 95       	ret
	}

	// store interface for used channel
	DPT.channels[i] = interf;
    1fe4:	ed 93       	st	X+, r30
    1fe6:	fc 93       	st	X, r31

	// set the available channel
	interf->channel = i;
    1fe8:	20 83       	st	Z, r18
    1fea:	08 95       	ret

00001fec <DPT_lock>:


void DPT_lock(dpt_interface_t* interf)
{
	// set the lock bit associated to the channel
	DPT.lock |= 1 << interf->channel;
    1fec:	21 e0       	ldi	r18, 0x01	; 1
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	00 80       	ld	r0, Z
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <DPT_lock+0xe>
    1ff6:	22 0f       	add	r18, r18
    1ff8:	33 1f       	adc	r19, r19
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <DPT_lock+0xa>
    1ffe:	83 2f       	mov	r24, r19
    2000:	88 0f       	add	r24, r24
    2002:	88 0b       	sbc	r24, r24
    2004:	e7 ed       	ldi	r30, 0xD7	; 215
    2006:	f2 e0       	ldi	r31, 0x02	; 2
    2008:	a0 81       	ld	r26, Z
    200a:	a2 2b       	or	r26, r18
    200c:	71 81       	ldd	r23, Z+1	; 0x01
    200e:	73 2b       	or	r23, r19
    2010:	62 81       	ldd	r22, Z+2	; 0x02
    2012:	68 2b       	or	r22, r24
    2014:	53 81       	ldd	r21, Z+3	; 0x03
    2016:	58 2b       	or	r21, r24
    2018:	44 81       	ldd	r20, Z+4	; 0x04
    201a:	48 2b       	or	r20, r24
    201c:	35 81       	ldd	r19, Z+5	; 0x05
    201e:	38 2b       	or	r19, r24
    2020:	26 81       	ldd	r18, Z+6	; 0x06
    2022:	28 2b       	or	r18, r24
    2024:	97 81       	ldd	r25, Z+7	; 0x07
    2026:	98 2b       	or	r25, r24
    2028:	a0 83       	st	Z, r26
    202a:	71 83       	std	Z+1, r23	; 0x01
    202c:	62 83       	std	Z+2, r22	; 0x02
    202e:	53 83       	std	Z+3, r21	; 0x03
    2030:	44 83       	std	Z+4, r20	; 0x04
    2032:	35 83       	std	Z+5, r19	; 0x05
    2034:	26 83       	std	Z+6, r18	; 0x06
    2036:	97 83       	std	Z+7, r25	; 0x07
    2038:	08 95       	ret

0000203a <DPT_unlock>:


void DPT_unlock(dpt_interface_t* interf)
{
	// reset the lock bit associated to the channel
	DPT.lock &= ~(1 << interf->channel);
    203a:	21 e0       	ldi	r18, 0x01	; 1
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	fc 01       	movw	r30, r24
    2040:	00 80       	ld	r0, Z
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <DPT_unlock+0xe>
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <DPT_unlock+0xa>
    204c:	20 95       	com	r18
    204e:	30 95       	com	r19
    2050:	83 2f       	mov	r24, r19
    2052:	88 0f       	add	r24, r24
    2054:	88 0b       	sbc	r24, r24
    2056:	e7 ed       	ldi	r30, 0xD7	; 215
    2058:	f2 e0       	ldi	r31, 0x02	; 2
    205a:	a0 81       	ld	r26, Z
    205c:	a2 23       	and	r26, r18
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	73 23       	and	r23, r19
    2062:	62 81       	ldd	r22, Z+2	; 0x02
    2064:	68 23       	and	r22, r24
    2066:	53 81       	ldd	r21, Z+3	; 0x03
    2068:	58 23       	and	r21, r24
    206a:	44 81       	ldd	r20, Z+4	; 0x04
    206c:	48 23       	and	r20, r24
    206e:	35 81       	ldd	r19, Z+5	; 0x05
    2070:	38 23       	and	r19, r24
    2072:	26 81       	ldd	r18, Z+6	; 0x06
    2074:	28 23       	and	r18, r24
    2076:	97 81       	ldd	r25, Z+7	; 0x07
    2078:	98 23       	and	r25, r24
    207a:	a0 83       	st	Z, r26
    207c:	71 83       	std	Z+1, r23	; 0x01
    207e:	62 83       	std	Z+2, r22	; 0x02
    2080:	53 83       	std	Z+3, r21	; 0x03
    2082:	44 83       	std	Z+4, r20	; 0x04
    2084:	35 83       	std	Z+5, r19	; 0x05
    2086:	26 83       	std	Z+6, r18	; 0x06
    2088:	97 83       	std	Z+7, r25	; 0x07
    208a:	08 95       	ret

0000208c <DPT_tx>:
}


u8 DPT_tx(dpt_interface_t* interf, frame_t* fr)
{
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	ec e4       	ldi	r30, 0x4C	; 76
    2092:	f0 e1       	ldi	r31, 0x10	; 16
    2094:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__prologue_saves__+0xa>
    2098:	eb 01       	movw	r28, r22
	u8 i;

	// if the tx is locked by a channel of higher priority
	for ( i = 0; (i < DPT_CHAN_NB) && (i < interf->channel); i++ ) {
    209a:	fc 01       	movw	r30, r24
    209c:	f0 80       	ld	r15, Z
		if ( DPT.lock & (1 << i) ) {
    209e:	e0 90 d7 02 	lds	r14, 0x02D7
    20a2:	d0 90 d8 02 	lds	r13, 0x02D8
    20a6:	c0 90 d9 02 	lds	r12, 0x02D9
    20aa:	b0 90 da 02 	lds	r11, 0x02DA
    20ae:	a0 90 db 02 	lds	r10, 0x02DB
    20b2:	90 90 dc 02 	lds	r9, 0x02DC
    20b6:	80 90 dd 02 	lds	r8, 0x02DD
    20ba:	70 90 de 02 	lds	r7, 0x02DE
    20be:	e0 e0       	ldi	r30, 0x00	; 0
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	01 e0       	ldi	r16, 0x01	; 1
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	40 c0       	rjmp	.+128    	; 0x2148 <DPT_tx+0xbc>
    20c8:	d8 01       	movw	r26, r16
    20ca:	0e 2e       	mov	r0, r30
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DPT_tx+0x46>
    20ce:	aa 0f       	add	r26, r26
    20d0:	bb 1f       	adc	r27, r27
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DPT_tx+0x42>
    20d6:	9b 2f       	mov	r25, r27
    20d8:	99 0f       	add	r25, r25
    20da:	99 0b       	sbc	r25, r25
    20dc:	2e 2d       	mov	r18, r14
    20de:	2a 23       	and	r18, r26
    20e0:	3d 2d       	mov	r19, r13
    20e2:	3b 23       	and	r19, r27
    20e4:	49 2f       	mov	r20, r25
    20e6:	4c 21       	and	r20, r12
    20e8:	59 2f       	mov	r21, r25
    20ea:	5b 21       	and	r21, r11
    20ec:	69 2f       	mov	r22, r25
    20ee:	6a 21       	and	r22, r10
    20f0:	79 2f       	mov	r23, r25
    20f2:	79 21       	and	r23, r9
    20f4:	89 2f       	mov	r24, r25
    20f6:	88 21       	and	r24, r8
    20f8:	97 21       	and	r25, r7
    20fa:	a0 e0       	ldi	r26, 0x00	; 0
    20fc:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__cmpdi2_s8>
    2100:	b1 f5       	brne	.+108    	; 0x216e <DPT_tx+0xe2>
    2102:	31 96       	adiw	r30, 0x01	; 1
u8 DPT_tx(dpt_interface_t* interf, frame_t* fr)
{
	u8 i;

	// if the tx is locked by a channel of higher priority
	for ( i = 0; (i < DPT_CHAN_NB) && (i < interf->channel); i++ ) {
    2104:	ec 30       	cpi	r30, 0x0C	; 12
    2106:	f1 05       	cpc	r31, r1
    2108:	f9 f4       	brne	.+62     	; 0x2148 <DPT_tx+0xbc>
			return KO;
		}
	}

	// if the sender didn't lock the channel
	if ( !(DPT.lock & (1 << interf->channel)) ) {
    210a:	e1 e0       	ldi	r30, 0x01	; 1
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	0f 2c       	mov	r0, r15
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DPT_tx+0x8a>
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DPT_tx+0x86>
    211a:	9f 2f       	mov	r25, r31
    211c:	99 0f       	add	r25, r25
    211e:	99 0b       	sbc	r25, r25
    2120:	2e 2d       	mov	r18, r14
    2122:	2e 23       	and	r18, r30
    2124:	3d 2d       	mov	r19, r13
    2126:	3f 23       	and	r19, r31
    2128:	49 2f       	mov	r20, r25
    212a:	4c 21       	and	r20, r12
    212c:	59 2f       	mov	r21, r25
    212e:	5b 21       	and	r21, r11
    2130:	69 2f       	mov	r22, r25
    2132:	6a 21       	and	r22, r10
    2134:	79 2f       	mov	r23, r25
    2136:	79 21       	and	r23, r9
    2138:	89 2f       	mov	r24, r25
    213a:	88 21       	and	r24, r8
    213c:	97 21       	and	r25, r7
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__cmpdi2_s8>
    2144:	29 f4       	brne	.+10     	; 0x2150 <DPT_tx+0xc4>
    2146:	13 c0       	rjmp	.+38     	; 0x216e <DPT_tx+0xe2>
u8 DPT_tx(dpt_interface_t* interf, frame_t* fr)
{
	u8 i;

	// if the tx is locked by a channel of higher priority
	for ( i = 0; (i < DPT_CHAN_NB) && (i < interf->channel); i++ ) {
    2148:	ef 15       	cp	r30, r15
    214a:	08 f4       	brcc	.+2      	; 0x214e <DPT_tx+0xc2>
    214c:	bd cf       	rjmp	.-134    	; 0x20c8 <DPT_tx+0x3c>
    214e:	dd cf       	rjmp	.-70     	; 0x210a <DPT_tx+0x7e>
		// it can't send the frame
		return KO;
	}

	// if the frame is not a response
	if ( !fr->resp ) {
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	81 fd       	sbrc	r24, 1
    2154:	06 c0       	rjmp	.+12     	; 0x2162 <DPT_tx+0xd6>
		// increment transaction id
		DPT.t_id++;
    2156:	80 91 b4 03 	lds	r24, 0x03B4
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	80 93 b4 03 	sts	0x03B4, r24

		// and set it in the current frame
		fr->t_id = DPT.t_id;
    2160:	8a 83       	std	Y+2, r24	; 0x02
	}

	// try to enqueue the frame
	return FIFO_put(&DPT.appli_fifo, fr);
    2162:	be 01       	movw	r22, r28
    2164:	81 ee       	ldi	r24, 0xE1	; 225
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <FIFO_put>
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <DPT_tx+0xe4>
	// if the tx is locked by a channel of higher priority
	for ( i = 0; (i < DPT_CHAN_NB) && (i < interf->channel); i++ ) {
		if ( DPT.lock & (1 << i) ) {
			// the sender shall retry
			// so return KO
			return KO;
    216e:	80 e0       	ldi	r24, 0x00	; 0
		fr->t_id = DPT.t_id;
	}

	// try to enqueue the frame
	return FIFO_put(&DPT.appli_fifo, fr);
}
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	ed e0       	ldi	r30, 0x0D	; 13
    2176:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__epilogue_restores__+0xa>

0000217a <DPT_set_sl_addr>:


void DPT_set_sl_addr(u8 addr)
{
	// save slave address
	DPT.sl_addr = addr;
    217a:	80 93 af 03 	sts	0x03AF, r24

	// set slave address at TWI level
	TWI_set_sl_addr(addr);
    217e:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <TWI_set_sl_addr>
    2182:	08 95       	ret

00002184 <DPT_gen_call>:


void DPT_gen_call(u8 flag)
{
	// just set the general call recognition mode
	TWI_gen_call(flag);
    2184:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TWI_gen_call>
    2188:	08 95       	ret

0000218a <ROUT_rout.constprop.0>:
	return OK;
}

static PT_THREAD( ROUT_rout(pt_t* pt) )
{
	PT_BEGIN(pt);
    218a:	e0 91 0d 04 	lds	r30, 0x040D
    218e:	f0 91 0e 04 	lds	r31, 0x040E
    2192:	30 97       	sbiw	r30, 0x00	; 0
    2194:	09 f0       	breq	.+2      	; 0x2198 <ROUT_rout.constprop.0+0xe>
    2196:	09 94       	ijmp

	// if a frame is received
	PT_WAIT_UNTIL(pt, FIFO_get(&ROUT.in_fifo, &ROUT.fr));
    2198:	8c ec       	ldi	r24, 0xCC	; 204
    219a:	90 e1       	ldi	r25, 0x10	; 16
    219c:	90 93 0e 04 	sts	0x040E, r25
    21a0:	80 93 0d 04 	sts	0x040D, r24
    21a4:	67 ef       	ldi	r22, 0xF7	; 247
    21a6:	73 e0       	ldi	r23, 0x03	; 3
    21a8:	8a ec       	ldi	r24, 0xCA	; 202
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    21b0:	88 23       	and	r24, r24
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <ROUT_rout.constprop.0+0x2c>
    21b4:	b4 c0       	rjmp	.+360    	; 0x231e <ROUT_rout.constprop.0+0x194>

	// if it is a response
	if ( ROUT.fr.resp ) {
    21b6:	80 91 fb 03 	lds	r24, 0x03FB
    21ba:	81 fd       	sbrc	r24, 1
    21bc:	ac c0       	rjmp	.+344    	; 0x2316 <ROUT_rout.constprop.0+0x18c>
		// ignore it
		PT_RESTART(pt);
	}

	// treat it
	switch ( ROUT.fr.cmde ) {
    21be:	80 91 fa 03 	lds	r24, 0x03FA
    21c2:	8e 31       	cpi	r24, 0x1E	; 30
    21c4:	81 f0       	breq	.+32     	; 0x21e6 <ROUT_rout.constprop.0+0x5c>
    21c6:	20 f4       	brcc	.+8      	; 0x21d0 <ROUT_rout.constprop.0+0x46>
    21c8:	8d 31       	cpi	r24, 0x1D	; 29
    21ca:	09 f0       	breq	.+2      	; 0x21ce <ROUT_rout.constprop.0+0x44>
    21cc:	82 c0       	rjmp	.+260    	; 0x22d2 <ROUT_rout.constprop.0+0x148>
    21ce:	06 c0       	rjmp	.+12     	; 0x21dc <ROUT_rout.constprop.0+0x52>
    21d0:	8f 31       	cpi	r24, 0x1F	; 31
    21d2:	31 f1       	breq	.+76     	; 0x2220 <ROUT_rout.constprop.0+0x96>
    21d4:	80 32       	cpi	r24, 0x20	; 32
    21d6:	09 f0       	breq	.+2      	; 0x21da <ROUT_rout.constprop.0+0x50>
    21d8:	7c c0       	rjmp	.+248    	; 0x22d2 <ROUT_rout.constprop.0+0x148>
    21da:	3d c0       	rjmp	.+122    	; 0x2256 <ROUT_rout.constprop.0+0xcc>
//

// retrieve the number of registered pairs
static void ROUT_list(u8* nb_pairs)
{
	*nb_pairs = ROUT.nb_pairs;
    21dc:	80 91 b5 03 	lds	r24, 0x03B5
    21e0:	80 93 fd 03 	sts	0x03FD, r24
    21e4:	7b c0       	rjmp	.+246    	; 0x22dc <ROUT_rout.constprop.0+0x152>
		case FR_ROUT_LIST:
			ROUT_list(&ROUT.fr.argv[1]);
			break;

		case FR_ROUT_LINE:
			ROUT.fr.argv[3] = ROUT_line(ROUT.fr.argv[0], &ROUT.fr.argv[1], &ROUT.fr.argv[2]);
    21e6:	e0 91 fc 03 	lds	r30, 0x03FC

// retrieve the content of the given line if it exists
static u8 ROUT_line(const u8 line, u8* virtual_addr, u8* routed_addr)
{
	// check if the required line exists
	if ( line > ROUT.nb_pairs ) {
    21ea:	80 91 b5 03 	lds	r24, 0x03B5
    21ee:	8e 17       	cp	r24, r30
    21f0:	98 f0       	brcs	.+38     	; 0x2218 <ROUT_rout.constprop.0+0x8e>
		return KO;
	}

	// retrieve the line
	*virtual_addr = ROUT.table[line].virtual_addr;
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	df 01       	movw	r26, r30
    21f6:	aa 0f       	add	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	ab 54       	subi	r26, 0x4B	; 75
    21fc:	bc 4f       	sbci	r27, 0xFC	; 252
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	8c 91       	ld	r24, X
    2202:	80 93 fd 03 	sts	0x03FD, r24
	*routed_addr = ROUT.table[line].routed_addr;
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	e9 54       	subi	r30, 0x49	; 73
    220c:	fc 4f       	sbci	r31, 0xFC	; 252
    220e:	80 81       	ld	r24, Z
    2210:	80 93 fe 03 	sts	0x03FE, r24

	return OK;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	01 c0       	rjmp	.+2      	; 0x221a <ROUT_rout.constprop.0+0x90>
// retrieve the content of the given line if it exists
static u8 ROUT_line(const u8 line, u8* virtual_addr, u8* routed_addr)
{
	// check if the required line exists
	if ( line > ROUT.nb_pairs ) {
		return KO;
    2218:	80 e0       	ldi	r24, 0x00	; 0
		case FR_ROUT_LIST:
			ROUT_list(&ROUT.fr.argv[1]);
			break;

		case FR_ROUT_LINE:
			ROUT.fr.argv[3] = ROUT_line(ROUT.fr.argv[0], &ROUT.fr.argv[1], &ROUT.fr.argv[2]);
    221a:	80 93 ff 03 	sts	0x03FF, r24
    221e:	5e c0       	rjmp	.+188    	; 0x22dc <ROUT_rout.constprop.0+0x152>
			break;

		case FR_ROUT_ADD:
			ROUT.fr.argv[2] = ROUT_add(ROUT.fr.argv[0], ROUT.fr.argv[1]);
    2220:	90 91 fd 03 	lds	r25, 0x03FD
    2224:	20 91 fc 03 	lds	r18, 0x03FC

// add a new pair if possible
static u8 ROUT_add(const u8 virtual_addr, const u8 routed_addr)
{
	// check if there is no more place left
	if ( ROUT.nb_pairs >= MAX_ROUTES ) {
    2228:	80 91 b5 03 	lds	r24, 0x03B5
    222c:	8a 30       	cpi	r24, 0x0A	; 10
    222e:	08 f0       	brcs	.+2      	; 0x2232 <ROUT_rout.constprop.0+0xa8>
    2230:	4c c0       	rjmp	.+152    	; 0x22ca <ROUT_rout.constprop.0+0x140>
		return KO;
	}

	// add the new pair at the end of the list
	ROUT.table[ROUT.nb_pairs].virtual_addr = virtual_addr;
    2232:	e8 2f       	mov	r30, r24
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	df 01       	movw	r26, r30
    2238:	aa 0f       	add	r26, r26
    223a:	bb 1f       	adc	r27, r27
    223c:	ab 54       	subi	r26, 0x4B	; 75
    223e:	bc 4f       	sbci	r27, 0xFC	; 252
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	2c 93       	st	X, r18
	ROUT.table[ROUT.nb_pairs].routed_addr = routed_addr;
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	e9 54       	subi	r30, 0x49	; 73
    224a:	fc 4f       	sbci	r31, 0xFC	; 252
    224c:	90 83       	st	Z, r25

	// update the pairs counter
	ROUT.nb_pairs++;
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	80 93 b5 03 	sts	0x03B5, r24
    2254:	38 c0       	rjmp	.+112    	; 0x22c6 <ROUT_rout.constprop.0+0x13c>
		case FR_ROUT_ADD:
			ROUT.fr.argv[2] = ROUT_add(ROUT.fr.argv[0], ROUT.fr.argv[1]);
			break;

		case FR_ROUT_DEL:
			ROUT.fr.argv[2] = ROUT_del(ROUT.fr.argv[0], ROUT.fr.argv[1]);
    2256:	80 91 fd 03 	lds	r24, 0x03FD
    225a:	90 91 fc 03 	lds	r25, 0x03FC
{
	u8 match_index = MAX_ROUTES;
	u8 i;

	// scan the table to find the matching pair
	for ( i = 0; i < ROUT.nb_pairs; i++ ) {
    225e:	50 91 b5 03 	lds	r21, 0x03B5
    2262:	e7 eb       	ldi	r30, 0xB7	; 183
    2264:	f3 e0       	ldi	r31, 0x03	; 3
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0a c0       	rjmp	.+20     	; 0x227e <ROUT_rout.constprop.0+0xf4>
	ROUT.nb_pairs--;

	return OK;
}

static PT_THREAD( ROUT_rout(pt_t* pt) )
    226a:	df 01       	movw	r26, r30
    226c:	11 97       	sbiw	r26, 0x01	; 1
	u8 match_index = MAX_ROUTES;
	u8 i;

	// scan the table to find the matching pair
	for ( i = 0; i < ROUT.nb_pairs; i++ ) {
		if ( (ROUT.table[i].virtual_addr == virtual_addr) && (ROUT.table[i].routed_addr == routed_addr) ) {
    226e:	2c 91       	ld	r18, X
    2270:	29 13       	cpse	r18, r25
    2272:	03 c0       	rjmp	.+6      	; 0x227a <ROUT_rout.constprop.0+0xf0>
    2274:	20 81       	ld	r18, Z
    2276:	28 17       	cp	r18, r24
    2278:	29 f0       	breq	.+10     	; 0x2284 <ROUT_rout.constprop.0+0xfa>
{
	u8 match_index = MAX_ROUTES;
	u8 i;

	// scan the table to find the matching pair
	for ( i = 0; i < ROUT.nb_pairs; i++ ) {
    227a:	4f 5f       	subi	r20, 0xFF	; 255
    227c:	32 96       	adiw	r30, 0x02	; 2
    227e:	45 13       	cpse	r20, r21
    2280:	f4 cf       	rjmp	.-24     	; 0x226a <ROUT_rout.constprop.0+0xe0>
    2282:	23 c0       	rjmp	.+70     	; 0x22ca <ROUT_rout.constprop.0+0x140>
			break;
		}
	}

	// if no matching pair is found
	if ( match_index == MAX_ROUTES ) {
    2284:	4a 30       	cpi	r20, 0x0A	; 10
    2286:	99 f4       	brne	.+38     	; 0x22ae <ROUT_rout.constprop.0+0x124>
    2288:	20 c0       	rjmp	.+64     	; 0x22ca <ROUT_rout.constprop.0+0x140>
	}

	// if a matching pair is found
	// it is deleted by shifting the end of the table by one
	for ( i = match_index; i < ROUT.nb_pairs - 1; i++ ) {
		ROUT.table[i] = ROUT.table[i + 1];
    228a:	fc 01       	movw	r30, r24
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	eb 54       	subi	r30, 0x4B	; 75
    2292:	fc 4f       	sbci	r31, 0xFC	; 252
    2294:	dc 01       	movw	r26, r24
    2296:	aa 0f       	add	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	a9 54       	subi	r26, 0x49	; 73
    229c:	bc 4f       	sbci	r27, 0xFC	; 252
    229e:	11 96       	adiw	r26, 0x01	; 1
    22a0:	8d 91       	ld	r24, X+
    22a2:	9c 91       	ld	r25, X
    22a4:	12 97       	sbiw	r26, 0x02	; 2
    22a6:	92 83       	std	Z+2, r25	; 0x02
    22a8:	81 83       	std	Z+1, r24	; 0x01
		return KO;
	}

	// if a matching pair is found
	// it is deleted by shifting the end of the table by one
	for ( i = match_index; i < ROUT.nb_pairs - 1; i++ ) {
    22aa:	4f 5f       	subi	r20, 0xFF	; 255
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <ROUT_rout.constprop.0+0x12c>
    22ae:	25 2f       	mov	r18, r21
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	21 50       	subi	r18, 0x01	; 1
    22b4:	31 09       	sbc	r19, r1
    22b6:	84 2f       	mov	r24, r20
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	82 17       	cp	r24, r18
    22bc:	93 07       	cpc	r25, r19
    22be:	2c f3       	brlt	.-54     	; 0x228a <ROUT_rout.constprop.0+0x100>
		ROUT.table[i] = ROUT.table[i + 1];
	}	

	// there is now one less pair
	ROUT.nb_pairs--;
    22c0:	51 50       	subi	r21, 0x01	; 1
    22c2:	50 93 b5 03 	sts	0x03B5, r21

	return OK;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <ROUT_rout.constprop.0+0x142>
		}
	}

	// if no matching pair is found
	if ( match_index == MAX_ROUTES ) {
		return KO;
    22ca:	80 e0       	ldi	r24, 0x00	; 0
		case FR_ROUT_ADD:
			ROUT.fr.argv[2] = ROUT_add(ROUT.fr.argv[0], ROUT.fr.argv[1]);
			break;

		case FR_ROUT_DEL:
			ROUT.fr.argv[2] = ROUT_del(ROUT.fr.argv[0], ROUT.fr.argv[1]);
    22cc:	80 93 fe 03 	sts	0x03FE, r24
    22d0:	05 c0       	rjmp	.+10     	; 0x22dc <ROUT_rout.constprop.0+0x152>
			break;

		default:
			ROUT.fr.error = 1;
    22d2:	80 91 fb 03 	lds	r24, 0x03FB
    22d6:	81 60       	ori	r24, 0x01	; 1
    22d8:	80 93 fb 03 	sts	0x03FB, r24
			break;
	}

	// and send the response
	ROUT.fr.resp = 1;
    22dc:	80 91 fb 03 	lds	r24, 0x03FB
    22e0:	82 60       	ori	r24, 0x02	; 2
    22e2:	80 93 fb 03 	sts	0x03FB, r24
	PT_WAIT_UNTIL(pt, DPT_tx(&ROUT.interf, &ROUT.fr));
    22e6:	83 e7       	ldi	r24, 0x73	; 115
    22e8:	91 e1       	ldi	r25, 0x11	; 17
    22ea:	90 93 0e 04 	sts	0x040E, r25
    22ee:	80 93 0d 04 	sts	0x040D, r24
    22f2:	67 ef       	ldi	r22, 0xF7	; 247
    22f4:	73 e0       	ldi	r23, 0x03	; 3
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	94 e0       	ldi	r25, 0x04	; 4
    22fa:	0e 94 46 10 	call	0x208c	; 0x208c <DPT_tx>
    22fe:	88 23       	and	r24, r24
    2300:	71 f0       	breq	.+28     	; 0x231e <ROUT_rout.constprop.0+0x194>

	// unlock the channel if no more frame are unqueued
	if ( FIFO_full(&ROUT.in_fifo) == 0 ) {
    2302:	8a ec       	ldi	r24, 0xCA	; 202
    2304:	93 e0       	ldi	r25, 0x03	; 3
    2306:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <FIFO_full>
    230a:	89 2b       	or	r24, r25
    230c:	21 f4       	brne	.+8      	; 0x2316 <ROUT_rout.constprop.0+0x18c>
		DPT_unlock(&ROUT.interf);
    230e:	82 e0       	ldi	r24, 0x02	; 2
    2310:	94 e0       	ldi	r25, 0x04	; 4
    2312:	0e 94 1d 10 	call	0x203a	; 0x203a <DPT_unlock>
	}

	// loop back for next frame
	PT_RESTART(pt);
    2316:	10 92 0e 04 	sts	0x040E, r1
    231a:	10 92 0d 04 	sts	0x040D, r1

	PT_END(pt);
}
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	08 95       	ret

00002322 <ROUT_init>:
//

void ROUT_init(void)
{
	// reset internals
	ROUT.nb_pairs = 0;
    2322:	10 92 b5 03 	sts	0x03B5, r1
	FIFO_init(&ROUT.in_fifo, &ROUT.in_buf, ROUT_NB_RX, sizeof(ROUT.in_buf[0]));
    2326:	2b e0       	ldi	r18, 0x0B	; 11
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	43 e0       	ldi	r20, 0x03	; 3
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	66 ed       	ldi	r22, 0xD6	; 214
    2330:	73 e0       	ldi	r23, 0x03	; 3
    2332:	8a ec       	ldi	r24, 0xCA	; 202
    2334:	93 e0       	ldi	r25, 0x03	; 3
    2336:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>
	PT_INIT(&ROUT.pt);
    233a:	10 92 0e 04 	sts	0x040E, r1
    233e:	10 92 0d 04 	sts	0x040D, r1

	// register to dispatcher
	ROUT.interf.channel = 9;
    2342:	89 e0       	ldi	r24, 0x09	; 9
    2344:	80 93 02 04 	sts	0x0402, r24
	ROUT.interf.cmde_mask = _CM(FR_ROUT_LIST) | _CM(FR_ROUT_LINE) | _CM(FR_ROUT_ADD) | _CM(FR_ROUT_DEL);
    2348:	e3 e0       	ldi	r30, 0x03	; 3
    234a:	f4 e0       	ldi	r31, 0x04	; 4
    234c:	10 82       	st	Z, r1
    234e:	11 82       	std	Z+1, r1	; 0x01
    2350:	12 82       	std	Z+2, r1	; 0x02
    2352:	80 ee       	ldi	r24, 0xE0	; 224
    2354:	83 83       	std	Z+3, r24	; 0x03
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	84 83       	std	Z+4, r24	; 0x04
    235a:	15 82       	std	Z+5, r1	; 0x05
    235c:	16 82       	std	Z+6, r1	; 0x06
    235e:	17 82       	std	Z+7, r1	; 0x07
	ROUT.interf.queue = &ROUT.in_fifo;
    2360:	8a ec       	ldi	r24, 0xCA	; 202
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	90 93 0c 04 	sts	0x040C, r25
    2368:	80 93 0b 04 	sts	0x040B, r24
	DPT_register(&ROUT.interf);
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	94 e0       	ldi	r25, 0x04	; 4
    2370:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DPT_register>
    2374:	08 95       	ret

00002376 <ROUT_run>:


void ROUT_run(void)
{
	// just handle the frame requests
	(void)PT_SCHEDULE(ROUT_rout(&ROUT.pt));
    2376:	0e 94 c5 10 	call	0x218a	; 0x218a <ROUT_rout.constprop.0>
    237a:	08 95       	ret

0000237c <ROUT_route>:

// retrieve the routed addresses from the specified address
void ROUT_route(const u8 addr, u8 list[MAX_ROUTES], u8* list_len)
{
	u8 i;
	u8 j = 0;
    237c:	90 e0       	ldi	r25, 0x00	; 0

	// scan the routing table
	for ( i = 0; i < ROUT.nb_pairs; i++ ) {
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	1a c0       	rjmp	.+52     	; 0x23b6 <ROUT_route+0x3a>
		// append the routed address to the list up to the list size
		if ( ROUT.table[i].virtual_addr == addr ) {
    2382:	e2 2f       	mov	r30, r18
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	df 01       	movw	r26, r30
    2388:	aa 0f       	add	r26, r26
    238a:	bb 1f       	adc	r27, r27
    238c:	ab 54       	subi	r26, 0x4B	; 75
    238e:	bc 4f       	sbci	r27, 0xFC	; 252
    2390:	11 96       	adiw	r26, 0x01	; 1
    2392:	3c 91       	ld	r19, X
    2394:	38 13       	cpse	r19, r24
    2396:	0e c0       	rjmp	.+28     	; 0x23b4 <ROUT_route+0x38>
			if ( j < *list_len ) {
    2398:	da 01       	movw	r26, r20
    239a:	3c 91       	ld	r19, X
    239c:	93 17       	cp	r25, r19
    239e:	50 f4       	brcc	.+20     	; 0x23b4 <ROUT_route+0x38>
				list[j] = ROUT.table[i].routed_addr;
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	e9 54       	subi	r30, 0x49	; 73
    23a6:	fc 4f       	sbci	r31, 0xFC	; 252
    23a8:	30 81       	ld	r19, Z
    23aa:	fb 01       	movw	r30, r22
    23ac:	e9 0f       	add	r30, r25
    23ae:	f1 1d       	adc	r31, r1
    23b0:	30 83       	st	Z, r19
				j++;
    23b2:	9f 5f       	subi	r25, 0xFF	; 255
{
	u8 i;
	u8 j = 0;

	// scan the routing table
	for ( i = 0; i < ROUT.nb_pairs; i++ ) {
    23b4:	2f 5f       	subi	r18, 0xFF	; 255
    23b6:	30 91 b5 03 	lds	r19, 0x03B5
    23ba:	23 17       	cp	r18, r19
    23bc:	10 f3       	brcs	.-60     	; 0x2382 <ROUT_route+0x6>
			}
		}
	}

	// return the number of routed addresses
	*list_len = j;
    23be:	fa 01       	movw	r30, r20
    23c0:	90 83       	st	Z, r25
    23c2:	08 95       	ret

000023c4 <CPU_com.constprop.0>:

static PT_THREAD(CPU_com(pt_t* pt))
{
	u8 index;

	PT_BEGIN(pt);
    23c4:	e0 91 3c 04 	lds	r30, 0x043C
    23c8:	f0 91 3d 04 	lds	r31, 0x043D
    23cc:	30 97       	sbiw	r30, 0x00	; 0
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <CPU_com.constprop.0+0xe>
    23d0:	09 94       	ijmp

	// wait until a new frame is received
	PT_WAIT_UNTIL(pt, FIFO_get(&CPU.fifo, &CPU.fr) && !CPU.fr.resp);
    23d2:	89 ee       	ldi	r24, 0xE9	; 233
    23d4:	91 e1       	ldi	r25, 0x11	; 17
    23d6:	90 93 3d 04 	sts	0x043D, r25
    23da:	80 93 3c 04 	sts	0x043C, r24
    23de:	61 e3       	ldi	r22, 0x31	; 49
    23e0:	74 e0       	ldi	r23, 0x04	; 4
    23e2:	8a e1       	ldi	r24, 0x1A	; 26
    23e4:	94 e0       	ldi	r25, 0x04	; 4
    23e6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <FIFO_get>
    23ea:	88 23       	and	r24, r24
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <CPU_com.constprop.0+0x2c>
    23ee:	47 c0       	rjmp	.+142    	; 0x247e <CPU_com.constprop.0+0xba>
    23f0:	80 91 35 04 	lds	r24, 0x0435
    23f4:	81 fd       	sbrc	r24, 1
    23f6:	43 c0       	rjmp	.+134    	; 0x247e <CPU_com.constprop.0+0xba>

	// build the response
	CPU.fr.resp = 1;
    23f8:	82 60       	ori	r24, 0x02	; 2
    23fa:	80 93 35 04 	sts	0x0435, r24
	index = (CPU.index - 1) % NB_HIST;
    23fe:	80 91 46 04 	lds	r24, 0x0446
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	62 e0       	ldi	r22, 0x02	; 2
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divmodhi4>
	CPU.fr.argv[0] = (CPU.hist[index].cnt >> 8) & 0x00ff;
    240e:	99 27       	eor	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	89 5b       	subi	r24, 0xB9	; 185
    241a:	9b 4f       	sbci	r25, 0xFB	; 251
    241c:	fc 01       	movw	r30, r24
    241e:	20 81       	ld	r18, Z
    2420:	81 81       	ldd	r24, Z+1	; 0x01
    2422:	80 93 36 04 	sts	0x0436, r24
	CPU.fr.argv[1] = (CPU.hist[index].cnt >> 0) & 0x00ff;
    2426:	20 93 37 04 	sts	0x0437, r18
	CPU.fr.argv[2] = (CPU.max >> 8) & 0x00ff;
    242a:	80 91 51 04 	lds	r24, 0x0451
    242e:	90 91 52 04 	lds	r25, 0x0452
    2432:	90 93 38 04 	sts	0x0438, r25
	CPU.fr.argv[3] = (CPU.max >> 0) & 0x00ff;
    2436:	80 93 39 04 	sts	0x0439, r24
	CPU.fr.argv[4] = (CPU.min >> 8) & 0x00ff;
    243a:	80 91 4f 04 	lds	r24, 0x044F
    243e:	90 91 50 04 	lds	r25, 0x0450
    2442:	90 93 3a 04 	sts	0x043A, r25
	CPU.fr.argv[5] = (CPU.min >> 0) & 0x00ff;
    2446:	80 93 3b 04 	sts	0x043B, r24

	// send the response
	DPT_lock(&CPU.interf);
    244a:	8f e0       	ldi	r24, 0x0F	; 15
    244c:	94 e0       	ldi	r25, 0x04	; 4
    244e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <DPT_lock>
	PT_WAIT_UNTIL(pt, DPT_tx(&CPU.interf, &CPU.fr));
    2452:	89 e2       	ldi	r24, 0x29	; 41
    2454:	92 e1       	ldi	r25, 0x12	; 18
    2456:	90 93 3d 04 	sts	0x043D, r25
    245a:	80 93 3c 04 	sts	0x043C, r24
    245e:	61 e3       	ldi	r22, 0x31	; 49
    2460:	74 e0       	ldi	r23, 0x04	; 4
    2462:	8f e0       	ldi	r24, 0x0F	; 15
    2464:	94 e0       	ldi	r25, 0x04	; 4
    2466:	0e 94 46 10 	call	0x208c	; 0x208c <DPT_tx>
    246a:	88 23       	and	r24, r24
    246c:	41 f0       	breq	.+16     	; 0x247e <CPU_com.constprop.0+0xba>
	DPT_unlock(&CPU.interf);
    246e:	8f e0       	ldi	r24, 0x0F	; 15
    2470:	94 e0       	ldi	r25, 0x04	; 4
    2472:	0e 94 1d 10 	call	0x203a	; 0x203a <DPT_unlock>

	// loop back for next frame
	PT_RESTART(pt);
    2476:	10 92 3d 04 	sts	0x043D, r1
    247a:	10 92 3c 04 	sts	0x043C, r1

	PT_END(pt);
}
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	08 95       	ret

00002482 <CPU_init>:

void CPU_init(void)
{
	u8 i;

	CPU.time = 0;
    2482:	10 92 3e 04 	sts	0x043E, r1
    2486:	10 92 3f 04 	sts	0x043F, r1
    248a:	10 92 40 04 	sts	0x0440, r1
    248e:	10 92 41 04 	sts	0x0441, r1
	CPU.stat.cnt = 0;
    2492:	10 92 43 04 	sts	0x0443, r1
    2496:	10 92 42 04 	sts	0x0442, r1
	CPU.stat.slp = 0;
    249a:	10 92 45 04 	sts	0x0445, r1
    249e:	10 92 44 04 	sts	0x0444, r1

	// reset stats
	for (i = 0; i < NB_HIST; i++) {
		CPU.hist[i].cnt = 0;
    24a2:	10 92 48 04 	sts	0x0448, r1
    24a6:	10 92 47 04 	sts	0x0447, r1
		CPU.hist[i].slp = 0;
    24aa:	10 92 4a 04 	sts	0x044A, r1
    24ae:	10 92 49 04 	sts	0x0449, r1
	CPU.stat.cnt = 0;
	CPU.stat.slp = 0;

	// reset stats
	for (i = 0; i < NB_HIST; i++) {
		CPU.hist[i].cnt = 0;
    24b2:	10 92 4c 04 	sts	0x044C, r1
    24b6:	10 92 4b 04 	sts	0x044B, r1
		CPU.hist[i].slp = 0;
    24ba:	10 92 4e 04 	sts	0x044E, r1
    24be:	10 92 4d 04 	sts	0x044D, r1
	}
	CPU.index = 0;
    24c2:	10 92 46 04 	sts	0x0446, r1
	CPU.max = 0;
    24c6:	10 92 52 04 	sts	0x0452, r1
    24ca:	10 92 51 04 	sts	0x0451, r1
	CPU.min = 0xffff;
    24ce:	8f ef       	ldi	r24, 0xFF	; 255
    24d0:	9f ef       	ldi	r25, 0xFF	; 255
    24d2:	90 93 50 04 	sts	0x0450, r25
    24d6:	80 93 4f 04 	sts	0x044F, r24
	// it will prevent any switch to sleep mode
	// sometime must be done in CPU_run()
	// to call SLP_request() 
	// and to remind the numbers of sleeps
	// during a full period of stats
	CPU.slp = SLP_register();
    24da:	0e 94 30 16 	call	0x2c60	; 0x2c60 <SLP_register>
    24de:	90 93 54 04 	sts	0x0454, r25
    24e2:	80 93 53 04 	sts	0x0453, r24

	FIFO_init(&CPU.fifo, &CPU.buf, FIFO_SIZE, sizeof(CPU.buf[0]));
    24e6:	2b e0       	ldi	r18, 0x0B	; 11
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	66 e2       	ldi	r22, 0x26	; 38
    24f0:	74 e0       	ldi	r23, 0x04	; 4
    24f2:	8a e1       	ldi	r24, 0x1A	; 26
    24f4:	94 e0       	ldi	r25, 0x04	; 4
    24f6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <FIFO_init>

	// register to dispatcher
	CPU.interf.channel = 10;
    24fa:	8a e0       	ldi	r24, 0x0A	; 10
    24fc:	80 93 0f 04 	sts	0x040F, r24
	CPU.interf.queue = &CPU.fifo;
    2500:	8a e1       	ldi	r24, 0x1A	; 26
    2502:	94 e0       	ldi	r25, 0x04	; 4
    2504:	90 93 19 04 	sts	0x0419, r25
    2508:	80 93 18 04 	sts	0x0418, r24
	CPU.interf.cmde_mask = _CM(FR_CPU);
    250c:	e0 e1       	ldi	r30, 0x10	; 16
    250e:	f4 e0       	ldi	r31, 0x04	; 4
    2510:	10 82       	st	Z, r1
    2512:	11 82       	std	Z+1, r1	; 0x01
    2514:	12 82       	std	Z+2, r1	; 0x02
    2516:	13 82       	std	Z+3, r1	; 0x03
    2518:	14 82       	std	Z+4, r1	; 0x04
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	85 83       	std	Z+5, r24	; 0x05
    251e:	16 82       	std	Z+6, r1	; 0x06
    2520:	17 82       	std	Z+7, r1	; 0x07
	DPT_register(&CPU.interf);
    2522:	8f e0       	ldi	r24, 0x0F	; 15
    2524:	94 e0       	ldi	r25, 0x04	; 4
    2526:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DPT_register>

	PT_INIT(&CPU.pt);
    252a:	10 92 3d 04 	sts	0x043D, r1
    252e:	10 92 3c 04 	sts	0x043C, r1
    2532:	08 95       	ret

00002534 <CPU_run>:
}


void CPU_run(void)
{
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
static void CPU_stats(void)
{
	u32 time;

	// check if time loop is elapsed
	time = TIME_get();
    2538:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
	if (time > CPU.time) {
    253c:	00 91 3e 04 	lds	r16, 0x043E
    2540:	10 91 3f 04 	lds	r17, 0x043F
    2544:	20 91 40 04 	lds	r18, 0x0440
    2548:	30 91 41 04 	lds	r19, 0x0441
    254c:	06 17       	cp	r16, r22
    254e:	17 07       	cpc	r17, r23
    2550:	28 07       	cpc	r18, r24
    2552:	39 07       	cpc	r19, r25
    2554:	08 f0       	brcs	.+2      	; 0x2558 <CPU_run+0x24>
    2556:	4d c0       	rjmp	.+154    	; 0x25f2 <CPU_run+0xbe>
		// update new time loop end
		CPU.time = TIME_get() + 100 * TIME_1_MSEC;
    2558:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIME_get>
    255c:	68 51       	subi	r22, 0x18	; 24
    255e:	7c 4f       	sbci	r23, 0xFC	; 252
    2560:	8f 4f       	sbci	r24, 0xFF	; 255
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	60 93 3e 04 	sts	0x043E, r22
    2568:	70 93 3f 04 	sts	0x043F, r23
    256c:	80 93 40 04 	sts	0x0440, r24
    2570:	90 93 41 04 	sts	0x0441, r25

		// save last loop count
		CPU.hist[CPU.index] = CPU.stat;
    2574:	20 91 46 04 	lds	r18, 0x0446
    2578:	84 e0       	ldi	r24, 0x04	; 4
    257a:	28 9f       	mul	r18, r24
    257c:	f0 01       	movw	r30, r0
    257e:	11 24       	eor	r1, r1
    2580:	e9 5b       	subi	r30, 0xB9	; 185
    2582:	fb 4f       	sbci	r31, 0xFB	; 251
    2584:	80 91 42 04 	lds	r24, 0x0442
    2588:	90 91 43 04 	lds	r25, 0x0443
    258c:	a0 91 44 04 	lds	r26, 0x0444
    2590:	b0 91 45 04 	lds	r27, 0x0445
    2594:	80 83       	st	Z, r24
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	a2 83       	std	Z+2, r26	; 0x02
    259a:	b3 83       	std	Z+3, r27	; 0x03
		CPU.index++;
    259c:	82 2f       	mov	r24, r18
    259e:	8f 5f       	subi	r24, 0xFF	; 255
		if (CPU.index >= NB_HIST)
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	18 f4       	brcc	.+6      	; 0x25aa <CPU_run+0x76>
		// update new time loop end
		CPU.time = TIME_get() + 100 * TIME_1_MSEC;

		// save last loop count
		CPU.hist[CPU.index] = CPU.stat;
		CPU.index++;
    25a4:	80 93 46 04 	sts	0x0446, r24
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <CPU_run+0x7a>
		if (CPU.index >= NB_HIST)
			CPU.index = 0;
    25aa:	10 92 46 04 	sts	0x0446, r1

		// update stats
		if (CPU.stat.cnt > CPU.max)
    25ae:	80 91 42 04 	lds	r24, 0x0442
    25b2:	90 91 43 04 	lds	r25, 0x0443
    25b6:	20 91 51 04 	lds	r18, 0x0451
    25ba:	30 91 52 04 	lds	r19, 0x0452
    25be:	28 17       	cp	r18, r24
    25c0:	39 07       	cpc	r19, r25
    25c2:	20 f4       	brcc	.+8      	; 0x25cc <CPU_run+0x98>
			CPU.max = CPU.stat.cnt;
    25c4:	90 93 52 04 	sts	0x0452, r25
    25c8:	80 93 51 04 	sts	0x0451, r24
		if (CPU.stat.cnt < CPU.min)
    25cc:	20 91 4f 04 	lds	r18, 0x044F
    25d0:	30 91 50 04 	lds	r19, 0x0450
    25d4:	82 17       	cp	r24, r18
    25d6:	93 07       	cpc	r25, r19
    25d8:	20 f4       	brcc	.+8      	; 0x25e2 <CPU_run+0xae>
			CPU.min = CPU.stat.cnt;
    25da:	90 93 50 04 	sts	0x0450, r25
    25de:	80 93 4f 04 	sts	0x044F, r24

		// reset stat
		CPU.stat.cnt = 0;
    25e2:	10 92 43 04 	sts	0x0443, r1
    25e6:	10 92 42 04 	sts	0x0442, r1
		CPU.stat.slp = 0;
    25ea:	10 92 45 04 	sts	0x0445, r1
    25ee:	10 92 44 04 	sts	0x0444, r1
	}

	CPU.stat.cnt++;
    25f2:	80 91 42 04 	lds	r24, 0x0442
    25f6:	90 91 43 04 	lds	r25, 0x0443
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	90 93 43 04 	sts	0x0443, r25
    2600:	80 93 42 04 	sts	0x0442, r24
	if (SLP_request(CPU.slp) == OK) {
    2604:	80 91 53 04 	lds	r24, 0x0453
    2608:	90 91 54 04 	lds	r25, 0x0454
    260c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <SLP_request>
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	49 f4       	brne	.+18     	; 0x2626 <CPU_run+0xf2>
		CPU.stat.slp++;
    2614:	80 91 44 04 	lds	r24, 0x0444
    2618:	90 91 45 04 	lds	r25, 0x0445
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	90 93 45 04 	sts	0x0445, r25
    2622:	80 93 44 04 	sts	0x0444, r24

void CPU_run(void)
{
	CPU_stats();

	(void)PT_SCHEDULE(CPU_com(&CPU.pt));
    2626:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <CPU_com.constprop.0>
}
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	08 95       	ret

00002630 <__vector_16>:
//-----------------------
// private functions
//

ISR(TIMER0_OVF_vect)
{
    2630:	1f 92       	push	r1
    2632:	0f 92       	push	r0
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	0f 92       	push	r0
    2638:	11 24       	eor	r1, r1
    263a:	2f 93       	push	r18
    263c:	3f 93       	push	r19
    263e:	4f 93       	push	r20
    2640:	5f 93       	push	r21
    2642:	6f 93       	push	r22
    2644:	7f 93       	push	r23
    2646:	8f 93       	push	r24
    2648:	9f 93       	push	r25
    264a:	af 93       	push	r26
    264c:	bf 93       	push	r27
    264e:	ef 93       	push	r30
    2650:	ff 93       	push	r31
	// call the provided call back if any
	if ( TMR0.call_back != NULL )
    2652:	80 91 56 04 	lds	r24, 0x0456
    2656:	90 91 57 04 	lds	r25, 0x0457
    265a:	89 2b       	or	r24, r25
    265c:	51 f0       	breq	.+20     	; 0x2672 <__vector_16+0x42>
		(TMR0.call_back)(TMR0.misc);
    265e:	e0 91 56 04 	lds	r30, 0x0456
    2662:	f0 91 57 04 	lds	r31, 0x0457
    2666:	80 91 58 04 	lds	r24, 0x0458
    266a:	90 91 59 04 	lds	r25, 0x0459
    266e:	09 95       	icall
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <__vector_16+0x44>
	else
		// stop by applying 0 prescaler
		TCCR0B = TMR0_STOP;
    2672:	15 bc       	out	0x25, r1	; 37

}
    2674:	ff 91       	pop	r31
    2676:	ef 91       	pop	r30
    2678:	bf 91       	pop	r27
    267a:	af 91       	pop	r26
    267c:	9f 91       	pop	r25
    267e:	8f 91       	pop	r24
    2680:	7f 91       	pop	r23
    2682:	6f 91       	pop	r22
    2684:	5f 91       	pop	r21
    2686:	4f 91       	pop	r20
    2688:	3f 91       	pop	r19
    268a:	2f 91       	pop	r18
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

00002696 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
    2696:	1f 92       	push	r1
    2698:	0f 92       	push	r0
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	0f 92       	push	r0
    269e:	11 24       	eor	r1, r1
    26a0:	2f 93       	push	r18
    26a2:	3f 93       	push	r19
    26a4:	4f 93       	push	r20
    26a6:	5f 93       	push	r21
    26a8:	6f 93       	push	r22
    26aa:	7f 93       	push	r23
    26ac:	8f 93       	push	r24
    26ae:	9f 93       	push	r25
    26b0:	af 93       	push	r26
    26b2:	bf 93       	push	r27
    26b4:	ef 93       	push	r30
    26b6:	ff 93       	push	r31
	// call the provided call back if any
	if ( TMR0.call_back != NULL )
    26b8:	80 91 56 04 	lds	r24, 0x0456
    26bc:	90 91 57 04 	lds	r25, 0x0457
    26c0:	89 2b       	or	r24, r25
    26c2:	51 f0       	breq	.+20     	; 0x26d8 <__vector_14+0x42>
		(TMR0.call_back)(TMR0.misc);
    26c4:	e0 91 56 04 	lds	r30, 0x0456
    26c8:	f0 91 57 04 	lds	r31, 0x0457
    26cc:	80 91 58 04 	lds	r24, 0x0458
    26d0:	90 91 59 04 	lds	r25, 0x0459
    26d4:	09 95       	icall
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <__vector_14+0x44>
	else
		// stop by applying 0 prescaler
		TCCR0B = TMR0_STOP;
    26d8:	15 bc       	out	0x25, r1	; 37
}
    26da:	ff 91       	pop	r31
    26dc:	ef 91       	pop	r30
    26de:	bf 91       	pop	r27
    26e0:	af 91       	pop	r26
    26e2:	9f 91       	pop	r25
    26e4:	8f 91       	pop	r24
    26e6:	7f 91       	pop	r23
    26e8:	6f 91       	pop	r22
    26ea:	5f 91       	pop	r21
    26ec:	4f 91       	pop	r20
    26ee:	3f 91       	pop	r19
    26f0:	2f 91       	pop	r18
    26f2:	0f 90       	pop	r0
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	0f 90       	pop	r0
    26f8:	1f 90       	pop	r1
    26fa:	18 95       	reti

000026fc <TMR0_init>:
//-----------------------
// public functions
//

void TMR0_init(tmr0_int_mode_t mode, u8 config, u8 compare, void (*call_back)(void* misc), void* misc)
{
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
	// stop counter
	TCCR0B = TMR0_STOP;
    2700:	15 bc       	out	0x25, r1	; 37

	// save configuration
	TMR0.config = config;
    2702:	60 93 55 04 	sts	0x0455, r22

	// reset counter
	TCNT0 = 0x00;
    2706:	16 bc       	out	0x26, r1	; 38

	// Output Compare Register can be set immediatly
	OCR0A = compare;
    2708:	47 bd       	out	0x27, r20	; 39

	// reset any pending interrupt
	TIFR0 |= _BV(OCF0A);
    270a:	a9 9a       	sbi	0x15, 1	; 21
	TIFR0 |= _BV(TOV0);
    270c:	a8 9a       	sbi	0x15, 0	; 21

	// set interrupt mode
	switch (mode) {
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	59 f0       	breq	.+22     	; 0x2728 <TMR0_init+0x2c>
    2712:	82 30       	cpi	r24, 0x02	; 2
    2714:	91 f0       	breq	.+36     	; 0x273a <TMR0_init+0x3e>
		case TMR0_WITHOUT_INTERRUPT:
		default:
			TIMSK0 &= ~_BV(OCIE0A);
    2716:	80 91 6e 00 	lds	r24, 0x006E
    271a:	8d 7f       	andi	r24, 0xFD	; 253
    271c:	80 93 6e 00 	sts	0x006E, r24
			TIMSK0 &= ~_BV(TOIE0);
    2720:	80 91 6e 00 	lds	r24, 0x006E
    2724:	8e 7f       	andi	r24, 0xFE	; 254
    2726:	11 c0       	rjmp	.+34     	; 0x274a <TMR0_init+0x4e>
			break;

		case TMR0_WITH_OVERFLOW_INT:
			TIMSK0 &= ~_BV(OCIE0A);
    2728:	80 91 6e 00 	lds	r24, 0x006E
    272c:	8d 7f       	andi	r24, 0xFD	; 253
    272e:	80 93 6e 00 	sts	0x006E, r24
			TIMSK0 |= _BV(TOIE0);
    2732:	80 91 6e 00 	lds	r24, 0x006E
    2736:	81 60       	ori	r24, 0x01	; 1
    2738:	08 c0       	rjmp	.+16     	; 0x274a <TMR0_init+0x4e>
			break;

		case TMR0_WITH_COMPARE_INT:
			TIMSK0 &= ~_BV(TOIE0);
    273a:	80 91 6e 00 	lds	r24, 0x006E
    273e:	8e 7f       	andi	r24, 0xFE	; 254
    2740:	80 93 6e 00 	sts	0x006E, r24
			TIMSK0 |= _BV(OCIE0A);
    2744:	80 91 6e 00 	lds	r24, 0x006E
    2748:	82 60       	ori	r24, 0x02	; 2
    274a:	80 93 6e 00 	sts	0x006E, r24
			break;
	}

	// set timeout call_back function
	TMR0.call_back = call_back;
    274e:	30 93 57 04 	sts	0x0457, r19
    2752:	20 93 56 04 	sts	0x0456, r18
	TMR0.misc = misc;
    2756:	10 93 59 04 	sts	0x0459, r17
    275a:	00 93 58 04 	sts	0x0458, r16
}
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	08 95       	ret

00002764 <TMR0_reset>:

void TMR0_reset(void)
{
	// stop counter
	TCCR0B = TMR0_STOP;
    2764:	15 bc       	out	0x25, r1	; 37

	// reset counter
	TCNT0 = 0x00;
    2766:	16 bc       	out	0x26, r1	; 38
    2768:	08 95       	ret

0000276a <TMR0_start>:
}

void TMR0_start(void)
{
	// start by applying configuration
	TCCR0B = TMR0.config;
    276a:	80 91 55 04 	lds	r24, 0x0455
    276e:	85 bd       	out	0x25, r24	; 37
    2770:	08 95       	ret

00002772 <TMR0_stop>:
}

void TMR0_stop(void)
{
	// stop by applying 0 prescaler
	TCCR0B = TMR0_STOP;
    2772:	15 bc       	out	0x25, r1	; 37
    2774:	08 95       	ret

00002776 <TMR0_get_value>:
}

u8 TMR0_get_value(void)
{
	return TCNT0;
    2776:	86 b5       	in	r24, 0x26	; 38
}
    2778:	08 95       	ret

0000277a <__vector_9>:
//-----------------------
// private functions
//

ISR(TIMER2_OVF_vect)
{
    277a:	1f 92       	push	r1
    277c:	0f 92       	push	r0
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	0f 92       	push	r0
    2782:	11 24       	eor	r1, r1
    2784:	2f 93       	push	r18
    2786:	3f 93       	push	r19
    2788:	4f 93       	push	r20
    278a:	5f 93       	push	r21
    278c:	6f 93       	push	r22
    278e:	7f 93       	push	r23
    2790:	8f 93       	push	r24
    2792:	9f 93       	push	r25
    2794:	af 93       	push	r26
    2796:	bf 93       	push	r27
    2798:	ef 93       	push	r30
    279a:	ff 93       	push	r31
	// call the provided call back if any
	if ( TMR2.call_back != NULL )
    279c:	e0 91 5b 04 	lds	r30, 0x045B
    27a0:	f0 91 5c 04 	lds	r31, 0x045C
    27a4:	30 97       	sbiw	r30, 0x00	; 0
    27a6:	31 f0       	breq	.+12     	; 0x27b4 <__vector_9+0x3a>
		(TMR2.call_back)(TMR2.misc);
    27a8:	80 91 5d 04 	lds	r24, 0x045D
    27ac:	90 91 5e 04 	lds	r25, 0x045E
    27b0:	09 95       	icall
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <__vector_9+0x3e>
	else
		// stop by applying 0 prescaler
		TCCR2B = TMR2_STOP;
    27b4:	10 92 b1 00 	sts	0x00B1, r1
}
    27b8:	ff 91       	pop	r31
    27ba:	ef 91       	pop	r30
    27bc:	bf 91       	pop	r27
    27be:	af 91       	pop	r26
    27c0:	9f 91       	pop	r25
    27c2:	8f 91       	pop	r24
    27c4:	7f 91       	pop	r23
    27c6:	6f 91       	pop	r22
    27c8:	5f 91       	pop	r21
    27ca:	4f 91       	pop	r20
    27cc:	3f 91       	pop	r19
    27ce:	2f 91       	pop	r18
    27d0:	0f 90       	pop	r0
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	0f 90       	pop	r0
    27d6:	1f 90       	pop	r1
    27d8:	18 95       	reti

000027da <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
    27da:	1f 92       	push	r1
    27dc:	0f 92       	push	r0
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	0f 92       	push	r0
    27e2:	11 24       	eor	r1, r1
    27e4:	2f 93       	push	r18
    27e6:	3f 93       	push	r19
    27e8:	4f 93       	push	r20
    27ea:	5f 93       	push	r21
    27ec:	6f 93       	push	r22
    27ee:	7f 93       	push	r23
    27f0:	8f 93       	push	r24
    27f2:	9f 93       	push	r25
    27f4:	af 93       	push	r26
    27f6:	bf 93       	push	r27
    27f8:	ef 93       	push	r30
    27fa:	ff 93       	push	r31
	// call the provided call back if any
	if ( TMR2.call_back != NULL )
    27fc:	e0 91 5b 04 	lds	r30, 0x045B
    2800:	f0 91 5c 04 	lds	r31, 0x045C
    2804:	30 97       	sbiw	r30, 0x00	; 0
    2806:	31 f0       	breq	.+12     	; 0x2814 <__vector_7+0x3a>
		(TMR2.call_back)(TMR2.misc);
    2808:	80 91 5d 04 	lds	r24, 0x045D
    280c:	90 91 5e 04 	lds	r25, 0x045E
    2810:	09 95       	icall
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <__vector_7+0x3e>
	else
		// stop by applying 0 prescaler
		TCCR2B = TMR2_STOP;
    2814:	10 92 b1 00 	sts	0x00B1, r1
}
    2818:	ff 91       	pop	r31
    281a:	ef 91       	pop	r30
    281c:	bf 91       	pop	r27
    281e:	af 91       	pop	r26
    2820:	9f 91       	pop	r25
    2822:	8f 91       	pop	r24
    2824:	7f 91       	pop	r23
    2826:	6f 91       	pop	r22
    2828:	5f 91       	pop	r21
    282a:	4f 91       	pop	r20
    282c:	3f 91       	pop	r19
    282e:	2f 91       	pop	r18
    2830:	0f 90       	pop	r0
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	0f 90       	pop	r0
    2836:	1f 90       	pop	r1
    2838:	18 95       	reti

0000283a <TMR2_init>:
//-----------------------
// public functions
//

void TMR2_init(tmr2_int_mode_t int_mode, tmr2_prescaler_t prescaler, tmr2_wgm_t wgm, u8 compare, void (*call_back)(void* misc), void* misc)
{
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
	// stop counter
	TCCR2B = TMR2_STOP;
    2842:	10 92 b1 00 	sts	0x00B1, r1

	// save configuration
	TMR2.prescaler = prescaler;
    2846:	60 93 5a 04 	sts	0x045A, r22

	// reset counter
	TCNT2 = 0x00;
    284a:	10 92 b2 00 	sts	0x00B2, r1

	// set mode
	TCCR2A = wgm;
    284e:	40 93 b0 00 	sts	0x00B0, r20

	// Output Compare Register can be set immediatly
	OCR2A = compare;
    2852:	20 93 b3 00 	sts	0x00B3, r18

	// reset any pending interrupt
	TIFR2 |= _BV(OCF2B);
    2856:	ba 9a       	sbi	0x17, 2	; 23
	TIFR2 |= _BV(OCF2A);
    2858:	b9 9a       	sbi	0x17, 1	; 23
	TIFR2 |= _BV(TOV2);
    285a:	b8 9a       	sbi	0x17, 0	; 23

	// set interrupt mode
	switch (int_mode) {
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	59 f0       	breq	.+22     	; 0x2876 <TMR2_init+0x3c>
    2860:	82 30       	cpi	r24, 0x02	; 2
    2862:	91 f0       	breq	.+36     	; 0x2888 <TMR2_init+0x4e>
		default:
		case TMR2_WITHOUT_INTERRUPT:
			TIMSK2 &= ~_BV(OCIE2A);
    2864:	80 91 70 00 	lds	r24, 0x0070
    2868:	8d 7f       	andi	r24, 0xFD	; 253
    286a:	80 93 70 00 	sts	0x0070, r24
			TIMSK2 &= ~_BV(TOIE2);
    286e:	80 91 70 00 	lds	r24, 0x0070
    2872:	8e 7f       	andi	r24, 0xFE	; 254
    2874:	11 c0       	rjmp	.+34     	; 0x2898 <TMR2_init+0x5e>
			break;

		case TMR2_WITH_OVERFLOW_INT:
			TIMSK2 &= ~_BV(OCIE2A);
    2876:	80 91 70 00 	lds	r24, 0x0070
    287a:	8d 7f       	andi	r24, 0xFD	; 253
    287c:	80 93 70 00 	sts	0x0070, r24
			TIMSK2 |= _BV(TOIE2);
    2880:	80 91 70 00 	lds	r24, 0x0070
    2884:	81 60       	ori	r24, 0x01	; 1
    2886:	08 c0       	rjmp	.+16     	; 0x2898 <TMR2_init+0x5e>
			break;

		case TMR2_WITH_COMPARE_INT:
			TIMSK2 &= ~_BV(TOIE2);
    2888:	80 91 70 00 	lds	r24, 0x0070
    288c:	8e 7f       	andi	r24, 0xFE	; 254
    288e:	80 93 70 00 	sts	0x0070, r24
			TIMSK2 |= _BV(OCIE2A);
    2892:	80 91 70 00 	lds	r24, 0x0070
    2896:	82 60       	ori	r24, 0x02	; 2
    2898:	80 93 70 00 	sts	0x0070, r24
			break;
	}

	// set timeout call_back function
	TMR2.call_back = call_back;
    289c:	10 93 5c 04 	sts	0x045C, r17
    28a0:	00 93 5b 04 	sts	0x045B, r16
	TMR2.misc = misc;
    28a4:	f0 92 5e 04 	sts	0x045E, r15
    28a8:	e0 92 5d 04 	sts	0x045D, r14
}
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	08 95       	ret

000028b6 <TMR2_reset>:

void TMR2_reset(void)
{
	// stop counter
	TCCR2B = TMR2_STOP;
    28b6:	10 92 b1 00 	sts	0x00B1, r1

	// reset counter
	TCNT2 = 0x00;
    28ba:	10 92 b2 00 	sts	0x00B2, r1
    28be:	08 95       	ret

000028c0 <TMR2_start>:
}

void TMR2_start(void)
{
	// start by applying configuration
	TCCR2B = TMR2.prescaler;
    28c0:	80 91 5a 04 	lds	r24, 0x045A
    28c4:	80 93 b1 00 	sts	0x00B1, r24
    28c8:	08 95       	ret

000028ca <TMR2_stop>:
}

void TMR2_stop(void)
{
	// stop by applying 0 prescaler
	TCCR2B = TMR2_STOP;
    28ca:	10 92 b1 00 	sts	0x00B1, r1
    28ce:	08 95       	ret

000028d0 <TMR2_get_value>:
}

u8 TMR2_get_value(void)
{
	return TCNT2;
    28d0:	80 91 b2 00 	lds	r24, 0x00B2
}
    28d4:	08 95       	ret

000028d6 <TWI_call_back_call>:
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

static void TWI_call_back_call(twi_state_t state)
{
	TWI.state = state;
    28d6:	80 93 5f 04 	sts	0x045F, r24
	(*TWI.call_back)(state, TWI.nb_data, TWI.misc);
    28da:	e0 91 68 04 	lds	r30, 0x0468
    28de:	f0 91 69 04 	lds	r31, 0x0469
    28e2:	40 91 6a 04 	lds	r20, 0x046A
    28e6:	50 91 6b 04 	lds	r21, 0x046B
    28ea:	60 91 61 04 	lds	r22, 0x0461
    28ee:	09 95       	icall
    28f0:	08 95       	ret

000028f2 <__vector_24>:
}

// TWI_isr
ISR(TWI_vect)
{
    28f2:	1f 92       	push	r1
    28f4:	0f 92       	push	r0
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	0f 92       	push	r0
    28fa:	11 24       	eor	r1, r1
    28fc:	2f 93       	push	r18
    28fe:	3f 93       	push	r19
    2900:	4f 93       	push	r20
    2902:	5f 93       	push	r21
    2904:	6f 93       	push	r22
    2906:	7f 93       	push	r23
    2908:	8f 93       	push	r24
    290a:	9f 93       	push	r25
    290c:	af 93       	push	r26
    290e:	bf 93       	push	r27
    2910:	ef 93       	push	r30
    2912:	ff 93       	push	r31

	u8 buf;
	void* action;

	// check status
	buf = TW_STATUS;
    2914:	e0 91 b9 00 	lds	r30, 0x00B9
    2918:	e8 7f       	andi	r30, 0xF8	; 248

	if ( buf == TW_NO_INFO )	// 0xf8
    291a:	e8 3f       	cpi	r30, 0xF8	; 248
    291c:	09 f4       	brne	.+2      	; 0x2920 <__vector_24+0x2e>
    291e:	e0 c0       	rjmp	.+448    	; 0x2ae0 <__vector_24+0x1ee>
		goto _TW_NO_INFO;

	if ( buf > TW_ST_LAST_DATA )	// unknown value
    2920:	e9 3c       	cpi	r30, 0xC9	; 201
    2922:	08 f0       	brcs	.+2      	; 0x2926 <__vector_24+0x34>
    2924:	da c0       	rjmp	.+436    	; 0x2ada <__vector_24+0x1e8>
		goto other;

	// the TWI status is only the 5 MSB bits of the register
	// shifting it, makes it fit the jump table 
	buf = buf >> 3;
    2926:	e6 95       	lsr	r30
    2928:	e6 95       	lsr	r30
    292a:	e6 95       	lsr	r30

	// jump to the routine associated to the TWI status
	// goto *status_action[buf]; can't be done directly, since the table is in flash
	action = (void*)pgm_read_word(&(status_action[buf]));
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	ee 0f       	add	r30, r30
    2930:	ff 1f       	adc	r31, r31
    2932:	ea 55       	subi	r30, 0x5A	; 90
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	85 91       	lpm	r24, Z+
    2938:	94 91       	lpm	r25, Z+
    293a:	8f 93       	push	r24
    293c:	9f 93       	push	r25
    293e:	08 95       	ret
	_TW_START:			// 0x08 : start
	_TW_REP_START:			// 0x10 : repeated start
		// start or restart correctly generated

		// reset nb_data to zero
		TWI.nb_data = 0;
    2940:	10 92 61 04 	sts	0x0461, r1
		
		// send slave addr
		TWI_write(TWI.addr);
    2944:	80 91 60 04 	lds	r24, 0x0460
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <__vector_24+0x80>
	// Master transmitter
	_TW_MT_SLA_ACK:			// 0x18 : slave addr ack
		// slave present and ready to receive

		// if more data to send
		if ( TWI.nb_data < TWI.ms_buf_len ) {
    294a:	90 91 61 04 	lds	r25, 0x0461
    294e:	80 91 62 04 	lds	r24, 0x0462
    2952:	98 17       	cp	r25, r24
    2954:	98 f4       	brcc	.+38     	; 0x297c <__vector_24+0x8a>
			buf = TWI.nb_data;
    2956:	90 91 61 04 	lds	r25, 0x0461
			TWI.nb_data++;
    295a:	80 91 61 04 	lds	r24, 0x0461
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	80 93 61 04 	sts	0x0461, r24
			TWI_write( *(TWI.ms_buf + buf) );
    2964:	e0 91 63 04 	lds	r30, 0x0463
    2968:	f0 91 64 04 	lds	r31, 0x0464
    296c:	e9 0f       	add	r30, r25
    296e:	f1 1d       	adc	r31, r1
    2970:	80 81       	ld	r24, Z
	return TWDR;
}

static void TWI_write(u8 data)
{
	TWDR = data;
    2972:	80 93 bb 00 	sts	0x00BB, r24
    2976:	93 c0       	rjmp	.+294    	; 0x2a9e <__vector_24+0x1ac>
    2978:	07 c0       	rjmp	.+14     	; 0x2988 <__vector_24+0x96>
    297a:	e7 cf       	rjmp	.-50     	; 0x294a <__vector_24+0x58>

	_TW_MT_DATA_NACK:		// 0x30 : slave data nack
		// transmission finish from slave point of view or slave disconnected

		// reset len to prevent data resending
		TWI.ms_buf_len = 0;
    297c:	10 92 62 04 	sts	0x0462, r1

		// signal it to the application
		TWI_call_back_call(TWI_MS_TX_END);
    2980:	85 e0       	ldi	r24, 0x05	; 5
    2982:	ac c0       	rjmp	.+344    	; 0x2adc <__vector_24+0x1ea>
    2984:	a4 c0       	rjmp	.+328    	; 0x2ace <__vector_24+0x1dc>
    2986:	14 c0       	rjmp	.+40     	; 0x29b0 <__vector_24+0xbe>

	_TW_MR_SLA_NACK:		// 0x48 : slave addr nack
		// slave not present

		// reset len to prevent data resending
		TWI.ms_buf_len = 0;
    2988:	10 92 62 04 	sts	0x0462, r1

		// signal it to the application
		TWI_call_back_call(TWI_NO_SL);
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	a6 c0       	rjmp	.+332    	; 0x2adc <__vector_24+0x1ea>

	_TW_MR_DATA_ACK:		// 0x50 : slave data ack
		// one more byte received from slave

		// store it
		*(TWI.ms_buf + TWI.nb_data) = TWI_read();
    2990:	e0 91 63 04 	lds	r30, 0x0463
    2994:	f0 91 64 04 	lds	r31, 0x0464
    2998:	90 91 61 04 	lds	r25, 0x0461
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

static u8 TWI_read(void)
{
	return TWDR;
    299c:	80 91 bb 00 	lds	r24, 0x00BB

	_TW_MR_DATA_ACK:		// 0x50 : slave data ack
		// one more byte received from slave

		// store it
		*(TWI.ms_buf + TWI.nb_data) = TWI_read();
    29a0:	e9 0f       	add	r30, r25
    29a2:	f1 1d       	adc	r31, r1
    29a4:	80 83       	st	Z, r24
		TWI.nb_data++;
    29a6:	80 91 61 04 	lds	r24, 0x0461
    29aa:	8f 5f       	subi	r24, 0xFF	; 255
    29ac:	80 93 61 04 	sts	0x0461, r24

		// if more data to receive
		if ( (TWI.nb_data + 1) < TWI.ms_buf_len ) {
    29b0:	20 91 61 04 	lds	r18, 0x0461
    29b4:	80 91 62 04 	lds	r24, 0x0462
    29b8:	6a c0       	rjmp	.+212    	; 0x2a8e <__vector_24+0x19c>

	_TW_MR_DATA_NACK:		// 0x58 : slave data nack
		// last byte received

		// store it
		*(TWI.ms_buf + TWI.nb_data) = TWI_read();
    29ba:	e0 91 63 04 	lds	r30, 0x0463
    29be:	f0 91 64 04 	lds	r31, 0x0464
    29c2:	90 91 61 04 	lds	r25, 0x0461
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

static u8 TWI_read(void)
{
	return TWDR;
    29c6:	80 91 bb 00 	lds	r24, 0x00BB

	_TW_MR_DATA_NACK:		// 0x58 : slave data nack
		// last byte received

		// store it
		*(TWI.ms_buf + TWI.nb_data) = TWI_read();
    29ca:	e9 0f       	add	r30, r25
    29cc:	f1 1d       	adc	r31, r1
    29ce:	80 83       	st	Z, r24
		TWI.nb_data++;
    29d0:	80 91 61 04 	lds	r24, 0x0461
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	80 93 61 04 	sts	0x0461, r24

		// reset len to prevent data resending
		TWI.ms_buf_len = 0;
    29da:	10 92 62 04 	sts	0x0462, r1

		// no more data to read (reception finished)
		TWI_call_back_call(TWI_MS_RX_END);
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	7d c0       	rjmp	.+250    	; 0x2adc <__vector_24+0x1ea>
	_TW_ST_SLA_ACK:			// 0xa8 : own slave addr + R
	_TW_ST_ARB_LOST_SLA_ACK:	// 0xb0 : arb lost as master, own slave addr + R
		// adressed as slave (whether or not the arbitration was lost)

		// reset nb_data to zero
		TWI.nb_data = 0;
    29e2:	10 92 61 04 	sts	0x0461, r1

		// need support from application
		// a buffer to transmit shall be provided
		TWI_call_back_call(TWI_SL_TX_BEGIN);
    29e6:	88 e0       	ldi	r24, 0x08	; 8
    29e8:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <TWI_call_back_call>

	_TW_ST_DATA_ACK:		// 0xb8 : byte transmit, ack received
		// byte sent to the master and it wants more
		
		// send data if any
		if ( TWI.nb_data < TWI.sl_buf_len ) {
    29ec:	90 91 61 04 	lds	r25, 0x0461
    29f0:	80 91 65 04 	lds	r24, 0x0465
    29f4:	98 17       	cp	r25, r24
    29f6:	a0 f4       	brcc	.+40     	; 0x2a20 <__vector_24+0x12e>
			buf = TWI.nb_data;
    29f8:	90 91 61 04 	lds	r25, 0x0461
			TWI.nb_data++;
    29fc:	80 91 61 04 	lds	r24, 0x0461
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	80 93 61 04 	sts	0x0461, r24
			TWI_write( *(TWI.sl_buf + buf) );
    2a06:	e0 91 66 04 	lds	r30, 0x0466
    2a0a:	f0 91 67 04 	lds	r31, 0x0467
    2a0e:	e9 0f       	add	r30, r25
    2a10:	f1 1d       	adc	r31, r1
    2a12:	80 81       	ld	r24, Z
	return TWDR;
}

static void TWI_write(u8 data)
{
	TWDR = data;
    2a14:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    2a18:	85 e8       	ldi	r24, 0x85	; 133
    2a1a:	80 93 bc 00 	sts	0x00BC, r24
    2a1e:	59 c0       	rjmp	.+178    	; 0x2ad2 <__vector_24+0x1e0>
	return TWDR;
}

static void TWI_write(u8 data)
{
	TWDR = data;
    2a20:	83 e3       	ldi	r24, 0x33	; 51
    2a22:	a7 cf       	rjmp	.-178    	; 0x2972 <__vector_24+0x80>
	_TW_ST_DATA_NACK:		// 0xc0 : byte transmit, nack received
	_TW_ST_LAST_DATA:		// 0xc8 : last data transmit, ack received
		// master nack, so tx is finished

		// signal it to the application
		TWI_call_back_call(TWI_SL_TX_END);
    2a24:	89 e0       	ldi	r24, 0x09	; 9
    2a26:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <TWI_call_back_call>
    2a2a:	4d c0       	rjmp	.+154    	; 0x2ac6 <__vector_24+0x1d4>
	_TW_SR_SLA_ACK:			// 0x60 : own slave addr + W
	_TW_SR_ARB_LOST_SLA_ACK:	// 0x68 : arb lost, own slave addr +W
		// addressed as slave for rx (whether or not the arbitration was lost)

		// reset nb_data to zero
		TWI.nb_data = 0;
    2a2c:	10 92 61 04 	sts	0x0461, r1

		// need support from application
		// a buffer to received the data shall be provided
		TWI_call_back_call(TWI_SL_RX_BEGIN);
    2a30:	86 e0       	ldi	r24, 0x06	; 6
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <__vector_24+0x148>
	_TW_SR_GCALL_ACK:		// 0x70 : gen call received, ack sent
	_TW_SR_ARB_LOST_GCALL_ACK:	// 0x78 : arb lost + idem above
		// general call received (whether or not the arbitration was lost)

		// reset nb_data to zero
		TWI.nb_data = 0;
    2a34:	10 92 61 04 	sts	0x0461, r1

		// need support from application
		// a buffer to received the data shall be provided
		TWI_call_back_call(TWI_GENCALL_BEGIN);
    2a38:	8a e0       	ldi	r24, 0x0A	; 10
    2a3a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <TWI_call_back_call>
    2a3e:	23 c0       	rjmp	.+70     	; 0x2a86 <__vector_24+0x194>
    2a40:	12 c0       	rjmp	.+36     	; 0x2a66 <__vector_24+0x174>

	_TW_SR_DATA_NACK:		// 0x88 : data received, nack sent
		// last byte received

		// store it
		*(TWI.sl_buf + TWI.nb_data) = TWI_read();
    2a42:	e0 91 66 04 	lds	r30, 0x0466
    2a46:	f0 91 67 04 	lds	r31, 0x0467
    2a4a:	90 91 61 04 	lds	r25, 0x0461
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

static u8 TWI_read(void)
{
	return TWDR;
    2a4e:	80 91 bb 00 	lds	r24, 0x00BB

	_TW_SR_DATA_NACK:		// 0x88 : data received, nack sent
		// last byte received

		// store it
		*(TWI.sl_buf + TWI.nb_data) = TWI_read();
    2a52:	e9 0f       	add	r30, r25
    2a54:	f1 1d       	adc	r31, r1
    2a56:	80 83       	st	Z, r24
		TWI.nb_data++;
    2a58:	80 91 61 04 	lds	r24, 0x0461
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	80 93 61 04 	sts	0x0461, r24

		// signal end of rx
		TWI_call_back_call(TWI_SL_RX_END);
    2a62:	87 e0       	ldi	r24, 0x07	; 7
    2a64:	3b c0       	rjmp	.+118    	; 0x2adc <__vector_24+0x1ea>

	_TW_SR_GCALL_DATA_ACK:		// 0x90 : in gen call, data received, ack sent
		// one more byte received and more to come

		// store it
		*(TWI.sl_buf + TWI.nb_data) = TWI_read();
    2a66:	e0 91 66 04 	lds	r30, 0x0466
    2a6a:	f0 91 67 04 	lds	r31, 0x0467
    2a6e:	90 91 61 04 	lds	r25, 0x0461
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

static u8 TWI_read(void)
{
	return TWDR;
    2a72:	80 91 bb 00 	lds	r24, 0x00BB

	_TW_SR_GCALL_DATA_ACK:		// 0x90 : in gen call, data received, ack sent
		// one more byte received and more to come

		// store it
		*(TWI.sl_buf + TWI.nb_data) = TWI_read();
    2a76:	e9 0f       	add	r30, r25
    2a78:	f1 1d       	adc	r31, r1
    2a7a:	80 83       	st	Z, r24
		TWI.nb_data++;
    2a7c:	80 91 61 04 	lds	r24, 0x0461
    2a80:	8f 5f       	subi	r24, 0xFF	; 255
    2a82:	80 93 61 04 	sts	0x0461, r24

		// if more data to receive
		if ( (TWI.nb_data + 1) < TWI.sl_buf_len ) {
    2a86:	20 91 61 04 	lds	r18, 0x0461
    2a8a:	80 91 65 04 	lds	r24, 0x0465
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	2f 5f       	subi	r18, 0xFF	; 255
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	28 17       	cp	r18, r24
    2a98:	39 07       	cpc	r19, r25
    2a9a:	0c f4       	brge	.+2      	; 0x2a9e <__vector_24+0x1ac>
    2a9c:	1a c0       	rjmp	.+52     	; 0x2ad2 <__vector_24+0x1e0>
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);
}

static void TWI_nack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    2a9e:	85 e8       	ldi	r24, 0x85	; 133
    2aa0:	19 c0       	rjmp	.+50     	; 0x2ad4 <__vector_24+0x1e2>

	_TW_SR_GCALL_DATA_NACK:		// 0x98 : in gen call, data received, nack sent
		// last byte received

		// store it
		*(TWI.sl_buf + TWI.nb_data) = TWI_read();
    2aa2:	e0 91 66 04 	lds	r30, 0x0466
    2aa6:	f0 91 67 04 	lds	r31, 0x0467
    2aaa:	90 91 61 04 	lds	r25, 0x0461
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

static u8 TWI_read(void)
{
	return TWDR;
    2aae:	80 91 bb 00 	lds	r24, 0x00BB

	_TW_SR_GCALL_DATA_NACK:		// 0x98 : in gen call, data received, nack sent
		// last byte received

		// store it
		*(TWI.sl_buf + TWI.nb_data) = TWI_read();
    2ab2:	e9 0f       	add	r30, r25
    2ab4:	f1 1d       	adc	r31, r1
    2ab6:	80 83       	st	Z, r24
		TWI.nb_data++;
    2ab8:	80 91 61 04 	lds	r24, 0x0461
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	80 93 61 04 	sts	0x0461, r24

		// signal end of rx
		TWI_call_back_call(TWI_GENCALL_END);
    2ac2:	8b e0       	ldi	r24, 0x0B	; 11
    2ac4:	0b c0       	rjmp	.+22     	; 0x2adc <__vector_24+0x1ea>
		// is completely finished
		// and it has already been notified to the application

		// but if we have data to send or read as master
		// try to generate a restart
		if (TWI.ms_buf_len != 0) {
    2ac6:	80 91 62 04 	lds	r24, 0x0462
    2aca:	88 23       	and	r24, r24
    2acc:	11 f0       	breq	.+4      	; 0x2ad2 <__vector_24+0x1e0>
			// generate a restart
			TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);
    2ace:	85 ee       	ldi	r24, 0xE5	; 229
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <__vector_24+0x1e2>
		}
		else {
			// give up bus control, wait for next start
			TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);
    2ad2:	85 ec       	ldi	r24, 0xC5	; 197
    2ad4:	80 93 bc 00 	sts	0x00BC, r24
    2ad8:	03 c0       	rjmp	.+6      	; 0x2ae0 <__vector_24+0x1ee>
		return;

	other:				// unknown status
		// so, what happens?????

		TWI_call_back_call(TWI_ERROR);
    2ada:	8c e0       	ldi	r24, 0x0C	; 12
    2adc:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <TWI_call_back_call>

		return;
}
    2ae0:	ff 91       	pop	r31
    2ae2:	ef 91       	pop	r30
    2ae4:	bf 91       	pop	r27
    2ae6:	af 91       	pop	r26
    2ae8:	9f 91       	pop	r25
    2aea:	8f 91       	pop	r24
    2aec:	7f 91       	pop	r23
    2aee:	6f 91       	pop	r22
    2af0:	5f 91       	pop	r21
    2af2:	4f 91       	pop	r20
    2af4:	3f 91       	pop	r19
    2af6:	2f 91       	pop	r18
    2af8:	0f 90       	pop	r0
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	0f 90       	pop	r0
    2afe:	1f 90       	pop	r1
    2b00:	18 95       	reti

00002b02 <TWI_init>:
//

void TWI_init(void(*call_back)(twi_state_t state, u8 nb_data, void* misc), void* misc)
{
	// switch off TWI interface
	TWCR = 0x00;
    2b02:	10 92 bc 00 	sts	0x00BC, r1

	// bit rate 100k
	// prescaler = 1
	TWSR = TWI_PRESCALER_1;
    2b06:	10 92 b9 00 	sts	0x00B9, r1

	// baud rate = 32
	TWBR = 32;
    2b0a:	20 e2       	ldi	r18, 0x20	; 32
    2b0c:	20 93 b8 00 	sts	0x00B8, r18

	// reset engine state to IDLE
	TWI.state = TWI_IDLE;
    2b10:	10 92 5f 04 	sts	0x045F, r1

	// set call_back pointer
	if ( call_back != NULL )
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <TWI_init+0x18>
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <TWI_init+0x1c>
		TWI.call_back = call_back;
	else
		TWI.call_back = TWI_default_call_back;
    2b1a:	82 ec       	ldi	r24, 0xC2	; 194
    2b1c:	95 e1       	ldi	r25, 0x15	; 21
    2b1e:	90 93 69 04 	sts	0x0469, r25
    2b22:	80 93 68 04 	sts	0x0468, r24

	// set the misc pointer
	TWI.misc = misc;
    2b26:	70 93 6b 04 	sts	0x046B, r23
    2b2a:	60 93 6a 04 	sts	0x046A, r22

	// enable automatic ACK bit and TWI interface in interrupt mode
	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);
    2b2e:	85 e4       	ldi	r24, 0x45	; 69
    2b30:	80 93 bc 00 	sts	0x00BC, r24

	// disable address recognition
	TWAR = 0;
    2b34:	10 92 ba 00 	sts	0x00BA, r1
    2b38:	08 95       	ret

00002b3a <TWI_set_sl_addr>:
}


void TWI_set_sl_addr(u8 sl_addr)
{
	TWAR &= _BV(TWGCE);		// reset the TWAR except the general call recognition bit
    2b3a:	ea eb       	ldi	r30, 0xBA	; 186
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	90 81       	ld	r25, Z
    2b40:	91 70       	andi	r25, 0x01	; 1
    2b42:	90 83       	st	Z, r25
	TWAR |= sl_addr << 1;		// set the slave address we shall respond to
    2b44:	90 81       	ld	r25, Z
    2b46:	88 0f       	add	r24, r24
    2b48:	89 2b       	or	r24, r25
    2b4a:	80 83       	st	Z, r24
    2b4c:	08 95       	ret

00002b4e <TWI_get_sl_addr>:
}


u8 TWI_get_sl_addr(void)
{
	return TWAR >> 1;		// get the slave address we're responding to
    2b4e:	80 91 ba 00 	lds	r24, 0x00BA
}
    2b52:	86 95       	lsr	r24
    2b54:	08 95       	ret

00002b56 <TWI_gen_call>:


void TWI_gen_call(u8 gen_call)
{
	// if enabled
	if (gen_call) {
    2b56:	88 23       	and	r24, r24
    2b58:	21 f0       	breq	.+8      	; 0x2b62 <TWI_gen_call+0xc>
		TWAR |= _BV(TWGCE);	// set the general call recognition bit
    2b5a:	80 91 ba 00 	lds	r24, 0x00BA
    2b5e:	81 60       	ori	r24, 0x01	; 1
    2b60:	03 c0       	rjmp	.+6      	; 0x2b68 <TWI_gen_call+0x12>
	}
	else {	// disabled
		TWAR &= ~_BV(TWGCE);	// reset the general call recognition bit
    2b62:	80 91 ba 00 	lds	r24, 0x00BA
    2b66:	8e 7f       	andi	r24, 0xFE	; 254
    2b68:	80 93 ba 00 	sts	0x00BA, r24
    2b6c:	08 95       	ret

00002b6e <TWI_stop>:


void TWI_stop(void)
{
	// if hard is not already IDLE
	if (TW_STATUS != 0xf8) {
    2b6e:	80 91 b9 00 	lds	r24, 0x00B9
    2b72:	88 7f       	andi	r24, 0xF8	; 248
    2b74:	88 3f       	cpi	r24, 0xF8	; 248
    2b76:	19 f0       	breq	.+6      	; 0x2b7e <TWI_stop+0x10>
		// try to generate a STOP
		TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWSTO) | _BV(TWIE);
    2b78:	85 ed       	ldi	r24, 0xD5	; 213
    2b7a:	80 93 bc 00 	sts	0x00BC, r24
		// on the bus, the TWSTO bit is cleared
		// automatically.
	}

	// reset engine state to IDLE
	TWI.state = TWI_IDLE;
    2b7e:	10 92 5f 04 	sts	0x045F, r1
    2b82:	08 95       	ret

00002b84 <TWI_default_call_back>:
	(void)state;
	(void)nb_data;
	(void)misc;

	// just stop the communication
	TWI_stop();
    2b84:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <TWI_stop>
    2b88:	08 95       	ret

00002b8a <TWI_ms_tx>:


u8 TWI_ms_tx(u8 adr, u8 len, u8* data)
{
	// check if TWI is idle
	if ( (TWI.state != TWI_IDLE) && (TWI.state != TWI_ERROR) )
    2b8a:	90 91 5f 04 	lds	r25, 0x045F
    2b8e:	99 23       	and	r25, r25
    2b90:	21 f0       	breq	.+8      	; 0x2b9a <TWI_ms_tx+0x10>
    2b92:	90 91 5f 04 	lds	r25, 0x045F
    2b96:	9c 30       	cpi	r25, 0x0C	; 12
    2b98:	89 f4       	brne	.+34     	; 0x2bbc <TWI_ms_tx+0x32>
		return KO;

	// reset TWI state
	TWI.state = TWI_MS_TX_BEGIN;
    2b9a:	94 e0       	ldi	r25, 0x04	; 4
    2b9c:	90 93 5f 04 	sts	0x045F, r25

	// set ms_buf
	TWI.ms_buf = data;
    2ba0:	50 93 64 04 	sts	0x0464, r21
    2ba4:	40 93 63 04 	sts	0x0463, r20
	TWI.ms_buf_len = len;
    2ba8:	60 93 62 04 	sts	0x0462, r22

	// set addr with write bit
	TWI.addr = (adr << 1) | TW_WRITE;
    2bac:	88 0f       	add	r24, r24
    2bae:	80 93 60 04 	sts	0x0460, r24

static void TWI_start(void)
{

	// try to generate a START
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWSTA) | _BV(TWEN) | _BV(TWIE);
    2bb2:	85 ee       	ldi	r24, 0xE5	; 229
    2bb4:	80 93 bc 00 	sts	0x00BC, r24
	TWI.addr = (adr << 1) | TW_WRITE;

	// begin transmission
	TWI_start();

	return OK;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	08 95       	ret

u8 TWI_ms_tx(u8 adr, u8 len, u8* data)
{
	// check if TWI is idle
	if ( (TWI.state != TWI_IDLE) && (TWI.state != TWI_ERROR) )
		return KO;
    2bbc:	80 e0       	ldi	r24, 0x00	; 0

	// begin transmission
	TWI_start();

	return OK;
}
    2bbe:	08 95       	ret

00002bc0 <TWI_ms_rx>:


u8 TWI_ms_rx(u8 adr, u8 len, u8* data)
{
	// check if TWI is idle
	if ( (TWI.state != TWI_IDLE) && (TWI.state != TWI_ERROR) )
    2bc0:	90 91 5f 04 	lds	r25, 0x045F
    2bc4:	99 23       	and	r25, r25
    2bc6:	21 f0       	breq	.+8      	; 0x2bd0 <TWI_ms_rx+0x10>
    2bc8:	90 91 5f 04 	lds	r25, 0x045F
    2bcc:	9c 30       	cpi	r25, 0x0C	; 12
    2bce:	a1 f4       	brne	.+40     	; 0x2bf8 <TWI_ms_rx+0x38>
		return KO;

	// reset TWI state
	TWI.state = TWI_MS_RX_BEGIN;
    2bd0:	92 e0       	ldi	r25, 0x02	; 2
    2bd2:	90 93 5f 04 	sts	0x045F, r25

	// set rx_buf
	TWI.ms_buf = data;
    2bd6:	50 93 64 04 	sts	0x0464, r21
    2bda:	40 93 63 04 	sts	0x0463, r20
	TWI.ms_buf_len = len;
    2bde:	60 93 62 04 	sts	0x0462, r22

	// set addr with read bit
	TWI.addr = (adr << 1) | TW_READ;
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	81 60       	ori	r24, 0x01	; 1
    2bea:	80 93 60 04 	sts	0x0460, r24

static void TWI_start(void)
{

	// try to generate a START
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWSTA) | _BV(TWEN) | _BV(TWIE);
    2bee:	85 ee       	ldi	r24, 0xE5	; 229
    2bf0:	80 93 bc 00 	sts	0x00BC, r24
	TWI.addr = (adr << 1) | TW_READ;

	// begin transmission
	TWI_start();

	return OK;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	08 95       	ret

u8 TWI_ms_rx(u8 adr, u8 len, u8* data)
{
	// check if TWI is idle
	if ( (TWI.state != TWI_IDLE) && (TWI.state != TWI_ERROR) )
		return KO;
    2bf8:	80 e0       	ldi	r24, 0x00	; 0

	// begin transmission
	TWI_start();

	return OK;
}
    2bfa:	08 95       	ret

00002bfc <TWI_sl_tx>:


u8 TWI_sl_tx(u8 len, u8* data)
{
	// check if TWI is slave transmitting
	if (TWI.state != TWI_SL_TX_BEGIN)
    2bfc:	90 91 5f 04 	lds	r25, 0x045F
    2c00:	98 30       	cpi	r25, 0x08	; 8
    2c02:	41 f4       	brne	.+16     	; 0x2c14 <TWI_sl_tx+0x18>
		return KO;

	// set sl_buf
	TWI.sl_buf = data;
    2c04:	70 93 67 04 	sts	0x0467, r23
    2c08:	60 93 66 04 	sts	0x0466, r22
	TWI.sl_buf_len = len;
    2c0c:	80 93 65 04 	sts	0x0465, r24

	// transmission will be continued by the master
	// on its will

	return OK;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	08 95       	ret

u8 TWI_sl_tx(u8 len, u8* data)
{
	// check if TWI is slave transmitting
	if (TWI.state != TWI_SL_TX_BEGIN)
		return KO;
    2c14:	80 e0       	ldi	r24, 0x00	; 0

	// transmission will be continued by the master
	// on its will

	return OK;
}
    2c16:	08 95       	ret

00002c18 <TWI_sl_rx>:

u8 TWI_sl_rx(u8 len, u8* data)
{
	// check if TWI is slave receiving
	// general call is just a special case of slave receiving
	if ( (TWI.state != TWI_SL_RX_BEGIN) && (TWI.state != TWI_GENCALL_BEGIN) )
    2c18:	90 91 5f 04 	lds	r25, 0x045F
    2c1c:	96 30       	cpi	r25, 0x06	; 6
    2c1e:	21 f0       	breq	.+8      	; 0x2c28 <TWI_sl_rx+0x10>
    2c20:	90 91 5f 04 	lds	r25, 0x045F
    2c24:	9a 30       	cpi	r25, 0x0A	; 10
    2c26:	41 f4       	brne	.+16     	; 0x2c38 <TWI_sl_rx+0x20>
		return KO;

	// set sl_buf
	TWI.sl_buf = data;
    2c28:	70 93 67 04 	sts	0x0467, r23
    2c2c:	60 93 66 04 	sts	0x0466, r22
	TWI.sl_buf_len = len;
    2c30:	80 93 65 04 	sts	0x0465, r24

	// reception will be continued by the master
	// on its will

	return OK;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	08 95       	ret
u8 TWI_sl_rx(u8 len, u8* data)
{
	// check if TWI is slave receiving
	// general call is just a special case of slave receiving
	if ( (TWI.state != TWI_SL_RX_BEGIN) && (TWI.state != TWI_GENCALL_BEGIN) )
		return KO;
    2c38:	80 e0       	ldi	r24, 0x00	; 0

	// reception will be continued by the master
	// on its will

	return OK;
}
    2c3a:	08 95       	ret

00002c3c <SLP_init>:

// setup of the SLEEP
void SLP_init(void)
{
	// reset the whole structure
	SLP.register_mask = 0;
    2c3c:	10 92 6d 04 	sts	0x046D, r1
    2c40:	10 92 6c 04 	sts	0x046C, r1
	SLP.current_mask = 0;
    2c44:	10 92 6f 04 	sts	0x046F, r1
    2c48:	10 92 6e 04 	sts	0x046E, r1
	SLP.mask_bit = 0;
    2c4c:	10 92 70 04 	sts	0x0470, r1
	SLP.stat = 0;
    2c50:	10 92 72 04 	sts	0x0472, r1
    2c54:	10 92 71 04 	sts	0x0471, r1

	// enable idle sleep mode 
	MCUCR |= _BV(SE);
    2c58:	85 b7       	in	r24, 0x35	; 53
    2c5a:	81 60       	ori	r24, 0x01	; 1
    2c5c:	85 bf       	out	0x35, r24	; 53
    2c5e:	08 95       	ret

00002c60 <SLP_register>:
slp_t SLP_register(void)
{
	slp_t mask;

	// compute mask for current registering client
	mask = 1 << SLP.mask_bit;
    2c60:	e0 e7       	ldi	r30, 0x70	; 112
    2c62:	f4 e0       	ldi	r31, 0x04	; 4
    2c64:	40 81       	ld	r20, Z
    2c66:	21 e0       	ldi	r18, 0x01	; 1
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	04 2e       	mov	r0, r20
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <SLP_register+0x12>
    2c6e:	22 0f       	add	r18, r18
    2c70:	33 1f       	adc	r19, r19
    2c72:	0a 94       	dec	r0
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <SLP_register+0xe>

	// update the mask for the registered clients
	SLP.register_mask |= mask;
    2c76:	ac e6       	ldi	r26, 0x6C	; 108
    2c78:	b4 e0       	ldi	r27, 0x04	; 4
    2c7a:	8d 91       	ld	r24, X+
    2c7c:	9c 91       	ld	r25, X
    2c7e:	11 97       	sbiw	r26, 0x01	; 1
    2c80:	82 2b       	or	r24, r18
    2c82:	93 2b       	or	r25, r19
    2c84:	8d 93       	st	X+, r24
    2c86:	9c 93       	st	X, r25

	// increment the counter for the next client
	SLP.mask_bit++;
    2c88:	4f 5f       	subi	r20, 0xFF	; 255
    2c8a:	40 83       	st	Z, r20

	// get to the client its mask
	return mask;
}
    2c8c:	c9 01       	movw	r24, r18
    2c8e:	08 95       	ret

00002c90 <SLP_request>:

// a registered client can request to sleep
u8 SLP_request(slp_t mask)
{
	// add client mask to the global mask
	SLP.current_mask |= mask;
    2c90:	20 91 6e 04 	lds	r18, 0x046E
    2c94:	30 91 6f 04 	lds	r19, 0x046F
    2c98:	28 2b       	or	r18, r24
    2c9a:	39 2b       	or	r19, r25
    2c9c:	30 93 6f 04 	sts	0x046F, r19
    2ca0:	20 93 6e 04 	sts	0x046E, r18

	// if the mask is complete
	if (SLP.current_mask == SLP.register_mask) {
    2ca4:	80 91 6c 04 	lds	r24, 0x046C
    2ca8:	90 91 6d 04 	lds	r25, 0x046D
    2cac:	28 17       	cp	r18, r24
    2cae:	39 07       	cpc	r19, r25
    2cb0:	61 f4       	brne	.+24     	; 0x2cca <SLP_request+0x3a>
		// sleep
		__asm__ __volatile__ ("sleep");
    2cb2:	88 95       	sleep

		// on wake-up, update stats
		SLP.stat++;
    2cb4:	80 91 71 04 	lds	r24, 0x0471
    2cb8:	90 91 72 04 	lds	r25, 0x0472
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	90 93 72 04 	sts	0x0472, r25
    2cc2:	80 93 71 04 	sts	0x0471, r24

		// and return OK
		return OK;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	08 95       	ret
	}

	// else return KO
	return KO;
    2cca:	80 e0       	ldi	r24, 0x00	; 0
}
    2ccc:	08 95       	ret

00002cce <SLP_unrequest>:

// a registered client can unrequest to sleep
void SLP_unrequest(slp_t mask)
{
	// remove client mask from the global mask
	SLP.current_mask &= ~mask;
    2cce:	ee e6       	ldi	r30, 0x6E	; 110
    2cd0:	f4 e0       	ldi	r31, 0x04	; 4
    2cd2:	80 95       	com	r24
    2cd4:	90 95       	com	r25
    2cd6:	20 81       	ld	r18, Z
    2cd8:	31 81       	ldd	r19, Z+1	; 0x01
    2cda:	82 23       	and	r24, r18
    2cdc:	93 23       	and	r25, r19
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
    2ce2:	08 95       	ret

00002ce4 <__vector_22>:
//------------------------------
// private fonctions
//

ISR(EE_READY_vect)
{
    2ce4:	1f 92       	push	r1
    2ce6:	0f 92       	push	r0
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	0f 92       	push	r0
    2cec:	11 24       	eor	r1, r1
    2cee:	8f 93       	push	r24
    2cf0:	9f 93       	push	r25
    2cf2:	ef 93       	push	r30
    2cf4:	ff 93       	push	r31
	// one more byte written
	// so proceed to next one
	EEP.n++;
    2cf6:	80 91 78 04 	lds	r24, 0x0478
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	80 93 78 04 	sts	0x0478, r24

	// if there is still some place in the buffer
	if ( EEP.n < EEP.len ) {
    2d00:	90 91 77 04 	lds	r25, 0x0477
    2d04:	89 17       	cp	r24, r25
    2d06:	d0 f4       	brcc	.+52     	; 0x2d3c <__vector_22+0x58>
		// write next byte
		EEP.addr++;
    2d08:	80 91 73 04 	lds	r24, 0x0473
    2d0c:	90 91 74 04 	lds	r25, 0x0474
    2d10:	01 96       	adiw	r24, 0x01	; 1
    2d12:	90 93 74 04 	sts	0x0474, r25
    2d16:	80 93 73 04 	sts	0x0473, r24
		EEAR = EEP.addr;
    2d1a:	92 bd       	out	0x22, r25	; 34
    2d1c:	81 bd       	out	0x21, r24	; 33
		EEP.data++;
    2d1e:	e0 91 75 04 	lds	r30, 0x0475
    2d22:	f0 91 76 04 	lds	r31, 0x0476
    2d26:	cf 01       	movw	r24, r30
    2d28:	01 96       	adiw	r24, 0x01	; 1
    2d2a:	90 93 76 04 	sts	0x0476, r25
    2d2e:	80 93 75 04 	sts	0x0475, r24
		EEDR = *EEP.data;
    2d32:	81 81       	ldd	r24, Z+1	; 0x01
    2d34:	80 bd       	out	0x20, r24	; 32
		EECR |= _BV(EEMPE);
    2d36:	fa 9a       	sbi	0x1f, 2	; 31
		EECR |= _BV(EEPE);
    2d38:	f9 9a       	sbi	0x1f, 1	; 31
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <__vector_22+0x5a>
	}
	// buffer is full
	else {
		// disable eeprom interrupt
		EECR &= ~_BV(EERIE);
    2d3c:	fb 98       	cbi	0x1f, 3	; 31
	}
}
    2d3e:	ff 91       	pop	r31
    2d40:	ef 91       	pop	r30
    2d42:	9f 91       	pop	r25
    2d44:	8f 91       	pop	r24
    2d46:	0f 90       	pop	r0
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	0f 90       	pop	r0
    2d4c:	1f 90       	pop	r1
    2d4e:	18 95       	reti

00002d50 <EEP_init>:

// EEPROM driver initialization
void EEP_init(void)
{
	// reset internals
	EEP.n = 0;
    2d50:	10 92 78 04 	sts	0x0478, r1
	EEP.data = NULL;
    2d54:	10 92 76 04 	sts	0x0476, r1
    2d58:	10 92 75 04 	sts	0x0475, r1

	// erase and write mode
	EECR = 0;
    2d5c:	1f ba       	out	0x1f, r1	; 31
    2d5e:	08 95       	ret

00002d60 <EEP_read>:
u8 EEP_read(u16 addr, u8* data, u8 len)
{
	u8 i;

	// if EEPROM is busy
	if ( EECR & _BV(EEPE) ) {
    2d60:	f9 99       	sbic	0x1f, 1	; 31
    2d62:	13 c0       	rjmp	.+38     	; 0x2d8a <EEP_read+0x2a>
    2d64:	9b 01       	movw	r18, r22
    2d66:	fb 01       	movw	r30, r22
	EECR = 0;
}


// read len byte(s) from EEPROM address addr and copy them in data
u8 EEP_read(u16 addr, u8* data, u8 len)
    2d68:	86 1b       	sub	r24, r22
    2d6a:	97 0b       	sbc	r25, r23
    2d6c:	08 c0       	rjmp	.+16     	; 0x2d7e <EEP_read+0x1e>
    2d6e:	bc 01       	movw	r22, r24
    2d70:	6e 0f       	add	r22, r30
    2d72:	7f 1f       	adc	r23, r31
	}

	// read each byte
	for ( i = 0; i < len; i++ ) {
		// set address
		EEAR = addr + i;
    2d74:	72 bd       	out	0x22, r23	; 34
    2d76:	61 bd       	out	0x21, r22	; 33

		// start read action
		EECR |= _BV(EERE);
    2d78:	f8 9a       	sbi	0x1f, 0	; 31

		// read result
		*(data + i) = EEDR;
    2d7a:	50 b5       	in	r21, 0x20	; 32
    2d7c:	51 93       	st	Z+, r21
		// it can't be read
		return KO;
	}

	// read each byte
	for ( i = 0; i < len; i++ ) {
    2d7e:	5e 2f       	mov	r21, r30
    2d80:	52 1b       	sub	r21, r18
    2d82:	54 17       	cp	r21, r20
    2d84:	a0 f3       	brcs	.-24     	; 0x2d6e <EEP_read+0xe>

		// read result
		*(data + i) = EEDR;
	}

	return OK;
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	08 95       	ret
	u8 i;

	// if EEPROM is busy
	if ( EECR & _BV(EEPE) ) {
		// it can't be read
		return KO;
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
		// read result
		*(data + i) = EEDR;
	}

	return OK;
}
    2d8c:	08 95       	ret

00002d8e <EEP_write>:

// write len byte(s) to EEPROM address addr from data
u8 EEP_write(u16 addr, u8* data, u8 len)
{
	// if EEPROM is busy or a write is running
	if ( (EECR & _BV(EEPE)) || (EEP.data != NULL) ) {
    2d8e:	f9 99       	sbic	0x1f, 1	; 31
    2d90:	1c c0       	rjmp	.+56     	; 0x2dca <EEP_write+0x3c>
    2d92:	20 91 75 04 	lds	r18, 0x0475
    2d96:	30 91 76 04 	lds	r19, 0x0476
    2d9a:	23 2b       	or	r18, r19
    2d9c:	b1 f4       	brne	.+44     	; 0x2dca <EEP_write+0x3c>
		// it can't be written
		return KO;
	}

	// save data buffer address and reset index
	EEP.addr = addr;
    2d9e:	90 93 74 04 	sts	0x0474, r25
    2da2:	80 93 73 04 	sts	0x0473, r24
	EEP.data = data;
    2da6:	70 93 76 04 	sts	0x0476, r23
    2daa:	60 93 75 04 	sts	0x0475, r22
	EEP.len = len;
    2dae:	40 93 77 04 	sts	0x0477, r20
	EEP.n = 0;
    2db2:	10 92 78 04 	sts	0x0478, r1

	// start first byte write
	EEAR = addr;
    2db6:	92 bd       	out	0x22, r25	; 34
    2db8:	81 bd       	out	0x21, r24	; 33
	EEDR = *data;
    2dba:	fb 01       	movw	r30, r22
    2dbc:	80 81       	ld	r24, Z
    2dbe:	80 bd       	out	0x20, r24	; 32
	EECR |= _BV(EEMPE);
    2dc0:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= _BV(EEPE);
    2dc2:	f9 9a       	sbi	0x1f, 1	; 31

	// enable eeprom interrupt
	EECR |= _BV(EERIE);
    2dc4:	fb 9a       	sbi	0x1f, 3	; 31

	return OK;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	08 95       	ret
u8 EEP_write(u16 addr, u8* data, u8 len)
{
	// if EEPROM is busy or a write is running
	if ( (EECR & _BV(EEPE)) || (EEP.data != NULL) ) {
		// it can't be written
		return KO;
    2dca:	80 e0       	ldi	r24, 0x00	; 0

	// enable eeprom interrupt
	EECR |= _BV(EERIE);

	return OK;
}
    2dcc:	08 95       	ret

00002dce <EEP_is_fini>:

u8 EEP_is_fini(void)
{
	// while writing
	if ( EEP.n < EEP.len ) {
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	20 91 78 04 	lds	r18, 0x0478
    2dd4:	90 91 77 04 	lds	r25, 0x0477
    2dd8:	29 17       	cp	r18, r25
    2dda:	08 f4       	brcc	.+2      	; 0x2dde <EEP_is_fini+0x10>
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
		// it is not finished!!!!
		return KO;
	}

	return OK;
}
    2dde:	08 95       	ret

00002de0 <FIFO_init>:

#include <string.h>		// memcpy()


void FIFO_init(fifo_t *f, void* buf, u16 nb_elem, u16 elem_size)
{
    2de0:	fc 01       	movw	r30, r24
	// set the internals thanks to the provided data
	f->lng = nb_elem;
    2de2:	51 83       	std	Z+1, r21	; 0x01
    2de4:	40 83       	st	Z, r20
	f->nb = 0;
    2de6:	13 82       	std	Z+3, r1	; 0x03
    2de8:	12 82       	std	Z+2, r1	; 0x02
	f->elem_size = elem_size;
    2dea:	35 83       	std	Z+5, r19	; 0x05
    2dec:	24 83       	std	Z+4, r18	; 0x04
	f->out = f->in = f->donnees = buf;
    2dee:	77 83       	std	Z+7, r23	; 0x07
    2df0:	66 83       	std	Z+6, r22	; 0x06
    2df2:	71 87       	std	Z+9, r23	; 0x09
    2df4:	60 87       	std	Z+8, r22	; 0x08
    2df6:	73 87       	std	Z+11, r23	; 0x0b
    2df8:	62 87       	std	Z+10, r22	; 0x0a
    2dfa:	08 95       	ret

00002dfc <FIFO_put>:
}


u8 FIFO_put(fifo_t *f, void* elem)
{
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	ec 01       	movw	r28, r24
	u8 sreg = SREG;
    2e04:	1f b7       	in	r17, 0x3f	; 63
	cli();
    2e06:	f8 94       	cli

	// if there's at least a free place
	if (f->nb < f->lng) {
    2e08:	2a 81       	ldd	r18, Y+2	; 0x02
    2e0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e0c:	88 81       	ld	r24, Y
    2e0e:	99 81       	ldd	r25, Y+1	; 0x01
    2e10:	28 17       	cp	r18, r24
    2e12:	39 07       	cpc	r19, r25
    2e14:	44 f5       	brge	.+80     	; 0x2e66 <FIFO_put+0x6a>
		// add the new element
		memcpy(f->in, elem, f->elem_size);
    2e16:	4c 81       	ldd	r20, Y+4	; 0x04
    2e18:	5d 81       	ldd	r21, Y+5	; 0x05
    2e1a:	88 85       	ldd	r24, Y+8	; 0x08
    2e1c:	99 85       	ldd	r25, Y+9	; 0x09
    2e1e:	0e 94 25 1b 	call	0x364a	; 0x364a <memcpy>
		f->in += f->elem_size;
    2e22:	6c 81       	ldd	r22, Y+4	; 0x04
    2e24:	7d 81       	ldd	r23, Y+5	; 0x05
    2e26:	88 85       	ldd	r24, Y+8	; 0x08
    2e28:	99 85       	ldd	r25, Y+9	; 0x09
    2e2a:	86 0f       	add	r24, r22
    2e2c:	97 1f       	adc	r25, r23
    2e2e:	99 87       	std	Y+9, r25	; 0x09
    2e30:	88 87       	std	Y+8, r24	; 0x08

		// loop back at the end
		if (f->in >= f->donnees + f->lng * f->elem_size)
    2e32:	4e 81       	ldd	r20, Y+6	; 0x06
    2e34:	5f 81       	ldd	r21, Y+7	; 0x07
    2e36:	e8 81       	ld	r30, Y
    2e38:	f9 81       	ldd	r31, Y+1	; 0x01
    2e3a:	6e 9f       	mul	r22, r30
    2e3c:	90 01       	movw	r18, r0
    2e3e:	6f 9f       	mul	r22, r31
    2e40:	30 0d       	add	r19, r0
    2e42:	7e 9f       	mul	r23, r30
    2e44:	30 0d       	add	r19, r0
    2e46:	11 24       	eor	r1, r1
    2e48:	24 0f       	add	r18, r20
    2e4a:	35 1f       	adc	r19, r21
    2e4c:	82 17       	cp	r24, r18
    2e4e:	93 07       	cpc	r25, r19
    2e50:	10 f0       	brcs	.+4      	; 0x2e56 <FIFO_put+0x5a>
			f->in = f->donnees;
    2e52:	59 87       	std	Y+9, r21	; 0x09
    2e54:	48 87       	std	Y+8, r20	; 0x08
		f->nb++;
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	9b 83       	std	Y+3, r25	; 0x03
    2e5e:	8a 83       	std	Y+2, r24	; 0x02

		SREG = sreg;
    2e60:	1f bf       	out	0x3f, r17	; 63
		return OK;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <FIFO_put+0x6e>
	} else {
		SREG = sreg;
    2e66:	1f bf       	out	0x3f, r17	; 63
		return KO;
    2e68:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2e6a:	df 91       	pop	r29
    2e6c:	cf 91       	pop	r28
    2e6e:	1f 91       	pop	r17
    2e70:	08 95       	ret

00002e72 <FIFO_get>:


u8 FIFO_get(fifo_t *f, void* elem)
{
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	ec 01       	movw	r28, r24
    2e7a:	cb 01       	movw	r24, r22
	u8 sreg = SREG;
    2e7c:	1f b7       	in	r17, 0x3f	; 63
	cli();
    2e7e:	f8 94       	cli

	// if there's no element, quit
	if (f->nb == 0) {
    2e80:	2a 81       	ldd	r18, Y+2	; 0x02
    2e82:	3b 81       	ldd	r19, Y+3	; 0x03
    2e84:	23 2b       	or	r18, r19
    2e86:	19 f4       	brne	.+6      	; 0x2e8e <FIFO_get+0x1c>
		SREG = sreg;
    2e88:	1f bf       	out	0x3f, r17	; 63
		return KO;
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	27 c0       	rjmp	.+78     	; 0x2edc <FIFO_get+0x6a>
	}

	// get the element
	memcpy(elem, f->out, f->elem_size);
    2e8e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e90:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e92:	4c 81       	ldd	r20, Y+4	; 0x04
    2e94:	5d 81       	ldd	r21, Y+5	; 0x05
    2e96:	0e 94 25 1b 	call	0x364a	; 0x364a <memcpy>
	f->nb--;
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	9b 83       	std	Y+3, r25	; 0x03
    2ea2:	8a 83       	std	Y+2, r24	; 0x02

	// set the extraction pointer to the next position
	f->out += f->elem_size;
    2ea4:	6c 81       	ldd	r22, Y+4	; 0x04
    2ea6:	7d 81       	ldd	r23, Y+5	; 0x05
    2ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eaa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eac:	86 0f       	add	r24, r22
    2eae:	97 1f       	adc	r25, r23
    2eb0:	9b 87       	std	Y+11, r25	; 0x0b
    2eb2:	8a 87       	std	Y+10, r24	; 0x0a
	if (f->out >= f->donnees + f->lng * f->elem_size)
    2eb4:	4e 81       	ldd	r20, Y+6	; 0x06
    2eb6:	5f 81       	ldd	r21, Y+7	; 0x07
    2eb8:	e8 81       	ld	r30, Y
    2eba:	f9 81       	ldd	r31, Y+1	; 0x01
    2ebc:	6e 9f       	mul	r22, r30
    2ebe:	90 01       	movw	r18, r0
    2ec0:	6f 9f       	mul	r22, r31
    2ec2:	30 0d       	add	r19, r0
    2ec4:	7e 9f       	mul	r23, r30
    2ec6:	30 0d       	add	r19, r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	24 0f       	add	r18, r20
    2ecc:	35 1f       	adc	r19, r21
    2ece:	82 17       	cp	r24, r18
    2ed0:	93 07       	cpc	r25, r19
    2ed2:	10 f0       	brcs	.+4      	; 0x2ed8 <FIFO_get+0x66>
		f->out = f->donnees;
    2ed4:	5b 87       	std	Y+11, r21	; 0x0b
    2ed6:	4a 87       	std	Y+10, r20	; 0x0a

	SREG = sreg;
    2ed8:	1f bf       	out	0x3f, r17	; 63
	return OK;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
}
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	1f 91       	pop	r17
    2ee2:	08 95       	ret

00002ee4 <FIFO_unget>:


u8 FIFO_unget(fifo_t* f, void* elem)
{
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	fc 01       	movw	r30, r24
	u8 sreg = SREG;
    2eec:	1f b7       	in	r17, 0x3f	; 63
	cli();
    2eee:	f8 94       	cli

	// if there's at least a free place
	if (f->nb < f->lng) {
    2ef0:	42 81       	ldd	r20, Z+2	; 0x02
    2ef2:	53 81       	ldd	r21, Z+3	; 0x03
    2ef4:	c0 81       	ld	r28, Z
    2ef6:	d1 81       	ldd	r29, Z+1	; 0x01
    2ef8:	4c 17       	cp	r20, r28
    2efa:	5d 07       	cpc	r21, r29
    2efc:	2c f5       	brge	.+74     	; 0x2f48 <FIFO_unget+0x64>
		// rewind extraction pointer
		f->out -= f->elem_size;
    2efe:	84 81       	ldd	r24, Z+4	; 0x04
    2f00:	95 81       	ldd	r25, Z+5	; 0x05
    2f02:	22 85       	ldd	r18, Z+10	; 0x0a
    2f04:	33 85       	ldd	r19, Z+11	; 0x0b
    2f06:	28 1b       	sub	r18, r24
    2f08:	39 0b       	sbc	r19, r25
    2f0a:	33 87       	std	Z+11, r19	; 0x0b
    2f0c:	22 87       	std	Z+10, r18	; 0x0a

		// loop back at the begin
		if (f->out < f->donnees)
    2f0e:	a6 81       	ldd	r26, Z+6	; 0x06
    2f10:	b7 81       	ldd	r27, Z+7	; 0x07
    2f12:	2a 17       	cp	r18, r26
    2f14:	3b 07       	cpc	r19, r27
    2f16:	60 f4       	brcc	.+24     	; 0x2f30 <FIFO_unget+0x4c>
			f->out = f->donnees + (f->lng - 1) * f->elem_size;
    2f18:	21 97       	sbiw	r28, 0x01	; 1
    2f1a:	c8 9f       	mul	r28, r24
    2f1c:	90 01       	movw	r18, r0
    2f1e:	c9 9f       	mul	r28, r25
    2f20:	30 0d       	add	r19, r0
    2f22:	d8 9f       	mul	r29, r24
    2f24:	30 0d       	add	r19, r0
    2f26:	11 24       	eor	r1, r1
    2f28:	2a 0f       	add	r18, r26
    2f2a:	3b 1f       	adc	r19, r27
    2f2c:	33 87       	std	Z+11, r19	; 0x0b
    2f2e:	22 87       	std	Z+10, r18	; 0x0a
		f->nb++;
    2f30:	4f 5f       	subi	r20, 0xFF	; 255
    2f32:	5f 4f       	sbci	r21, 0xFF	; 255
    2f34:	53 83       	std	Z+3, r21	; 0x03
    2f36:	42 83       	std	Z+2, r20	; 0x02

		// add the new element
		memcpy(f->out, elem, f->elem_size);
    2f38:	ac 01       	movw	r20, r24
    2f3a:	82 85       	ldd	r24, Z+10	; 0x0a
    2f3c:	93 85       	ldd	r25, Z+11	; 0x0b
    2f3e:	0e 94 25 1b 	call	0x364a	; 0x364a <memcpy>

		SREG = sreg;
    2f42:	1f bf       	out	0x3f, r17	; 63
		return OK;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	02 c0       	rjmp	.+4      	; 0x2f4c <FIFO_unget+0x68>
	} else {
		SREG = sreg;
    2f48:	1f bf       	out	0x3f, r17	; 63
		return KO;
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	1f 91       	pop	r17
    2f52:	08 95       	ret

00002f54 <FIFO_free>:


u16 FIFO_free(fifo_t* f)
{
	return (f->lng - f->nb);
    2f54:	fc 01       	movw	r30, r24
    2f56:	20 81       	ld	r18, Z
    2f58:	31 81       	ldd	r19, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	28 1b       	sub	r18, r24
    2f60:	39 0b       	sbc	r19, r25
}
    2f62:	c9 01       	movw	r24, r18
    2f64:	08 95       	ret

00002f66 <FIFO_full>:


u16 FIFO_full(fifo_t* f)
{
    2f66:	fc 01       	movw	r30, r24
	return f->nb;
}
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	08 95       	ret

00002f6e <TIME_init>:
//

// init the internals of TIME
void TIME_init(u32(*adjust)(void))
{
	TIME.time = 0;
    2f6e:	10 92 79 04 	sts	0x0479, r1
    2f72:	10 92 7a 04 	sts	0x047A, r1
    2f76:	10 92 7b 04 	sts	0x047B, r1
    2f7a:	10 92 7c 04 	sts	0x047C, r1
	TIME.incr = 0;
    2f7e:	10 92 7d 04 	sts	0x047D, r1
    2f82:	10 92 7e 04 	sts	0x047E, r1
    2f86:	10 92 7f 04 	sts	0x047F, r1
    2f8a:	10 92 80 04 	sts	0x0480, r1
	TIME.adjust = adjust;
    2f8e:	90 93 82 04 	sts	0x0482, r25
    2f92:	80 93 81 04 	sts	0x0481, r24
    2f96:	08 95       	ret

00002f98 <TIME_set_incr>:


// set the TIME increment.
void TIME_set_incr(u32 incr)
{
	TIME.incr = incr;
    2f98:	60 93 7d 04 	sts	0x047D, r22
    2f9c:	70 93 7e 04 	sts	0x047E, r23
    2fa0:	80 93 7f 04 	sts	0x047F, r24
    2fa4:	90 93 80 04 	sts	0x0480, r25
    2fa8:	08 95       	ret

00002faa <TIME_get_incr>:


// get the TIME increment.
u32 TIME_get_incr(void)
{
	return TIME.incr;
    2faa:	ed e7       	ldi	r30, 0x7D	; 125
    2fac:	f4 e0       	ldi	r31, 0x04	; 4
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
}
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	08 95       	ret

00002fb8 <TIME_incr>:
// increment the TIME
// the call to this function is on the responsability of the user
// it is preferably done in the nanoK hook.
void TIME_incr(void)
{
	TIME.time += TIME.incr;
    2fb8:	e9 e7       	ldi	r30, 0x79	; 121
    2fba:	f4 e0       	ldi	r31, 0x04	; 4
    2fbc:	80 91 7d 04 	lds	r24, 0x047D
    2fc0:	90 91 7e 04 	lds	r25, 0x047E
    2fc4:	a0 91 7f 04 	lds	r26, 0x047F
    2fc8:	b0 91 80 04 	lds	r27, 0x0480
    2fcc:	40 81       	ld	r20, Z
    2fce:	51 81       	ldd	r21, Z+1	; 0x01
    2fd0:	62 81       	ldd	r22, Z+2	; 0x02
    2fd2:	73 81       	ldd	r23, Z+3	; 0x03
    2fd4:	84 0f       	add	r24, r20
    2fd6:	95 1f       	adc	r25, r21
    2fd8:	a6 1f       	adc	r26, r22
    2fda:	b7 1f       	adc	r27, r23
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	a2 83       	std	Z+2, r26	; 0x02
    2fe2:	b3 83       	std	Z+3, r27	; 0x03
    2fe4:	08 95       	ret

00002fe6 <TIME_get>:


// get current value of TIME
u32 TIME_get(void)
{
	return TIME.time;
    2fe6:	e9 e7       	ldi	r30, 0x79	; 121
    2fe8:	f4 e0       	ldi	r31, 0x04	; 4
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
}
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	08 95       	ret

00002ff4 <TIME_get_precise>:


// get a more accurate current value of TIME
u32 TIME_get_precise(void)
{
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
	u32 time;

	time = TIME.time;
    2ffc:	c0 90 79 04 	lds	r12, 0x0479
    3000:	d0 90 7a 04 	lds	r13, 0x047A
    3004:	e0 90 7b 04 	lds	r14, 0x047B
    3008:	f0 90 7c 04 	lds	r15, 0x047C

	if (TIME.adjust) {
    300c:	e0 91 81 04 	lds	r30, 0x0481
    3010:	f0 91 82 04 	lds	r31, 0x0482
    3014:	30 97       	sbiw	r30, 0x00	; 0
    3016:	29 f0       	breq	.+10     	; 0x3022 <TIME_get_precise+0x2e>
		time += TIME.adjust();
    3018:	09 95       	icall
    301a:	c6 0e       	add	r12, r22
    301c:	d7 1e       	adc	r13, r23
    301e:	e8 1e       	adc	r14, r24
    3020:	f9 1e       	adc	r15, r25
	}

	return time;
}
    3022:	b6 01       	movw	r22, r12
    3024:	c7 01       	movw	r24, r14
    3026:	ff 90       	pop	r15
    3028:	ef 90       	pop	r14
    302a:	df 90       	pop	r13
    302c:	cf 90       	pop	r12
    302e:	08 95       	ret

00003030 <STM_init>:

// initialize the given state machine
u8 STM_init(stm_t* stm, stm_state_t* st)
{
	// if the state machine doesn't exist
	if ( stm == NULL ) {
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	41 f0       	breq	.+16     	; 0x3044 <STM_init+0x14>
		// KO
		return KO;
	}

	// if the initial state is invalid
	if ( st == NULL ) {
    3034:	61 15       	cp	r22, r1
    3036:	71 05       	cpc	r23, r1
    3038:	29 f0       	breq	.+10     	; 0x3044 <STM_init+0x14>
		// KO
		return KO;
	}

	stm->state = st;
    303a:	fc 01       	movw	r30, r24
    303c:	71 83       	std	Z+1, r23	; 0x01
    303e:	60 83       	st	Z, r22

	return OK;
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	08 95       	ret
u8 STM_init(stm_t* stm, stm_state_t* st)
{
	// if the state machine doesn't exist
	if ( stm == NULL ) {
		// KO
		return KO;
    3044:	80 e0       	ldi	r24, 0x00	; 0
	}

	stm->state = st;

	return OK;
}
    3046:	08 95       	ret

00003048 <STM_run>:


// run the protothread action
void STM_run(stm_t* stm)
{
	(void)PT_SCHEDULE(stm->thread(&stm->pt, stm->args));
    3048:	dc 01       	movw	r26, r24
    304a:	14 96       	adiw	r26, 0x04	; 4
    304c:	6d 91       	ld	r22, X+
    304e:	7c 91       	ld	r23, X
    3050:	15 97       	sbiw	r26, 0x05	; 5
    3052:	16 96       	adiw	r26, 0x06	; 6
    3054:	ed 91       	ld	r30, X+
    3056:	fc 91       	ld	r31, X
    3058:	17 97       	sbiw	r26, 0x07	; 7
    305a:	02 96       	adiw	r24, 0x02	; 2
    305c:	09 95       	icall
    305e:	08 95       	ret

00003060 <STM_event>:
}


// post an event to the state machine
u8 STM_event(stm_t* stm, stm_event_t ev)
{
    3060:	fc 01       	movw	r30, r24
	// if not valid state machine
	if ( stm == NULL ) {
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	09 f1       	breq	.+66     	; 0x30a8 <STM_event+0x48>
			return OK;
		}
	}

	return KO;
}
    3066:	a0 81       	ld	r26, Z
    3068:	b1 81       	ldd	r27, Z+1	; 0x01
    306a:	14 96       	adiw	r26, 0x04	; 4
    306c:	0d 90       	ld	r0, X+
    306e:	bc 91       	ld	r27, X
    3070:	a0 2d       	mov	r26, r0
		// KO
		return KO;
	}

	// for each transition from the current state
	for ( stm_transition_t* tr = STM_state_get_transition(stm->state); tr != NULL; tr = STM_transition_get_transition(tr) ) {
    3072:	18 c0       	rjmp	.+48     	; 0x30a4 <STM_event+0x44>
		// if the transition is valid
		if ( ev == STM_transition_get_event(tr) ) {
    3074:	8c 91       	ld	r24, X
    3076:	68 13       	cpse	r22, r24
    3078:	11 c0       	rjmp	.+34     	; 0x309c <STM_event+0x3c>
			return OK;
		}
	}

	return KO;
}
    307a:	11 96       	adiw	r26, 0x01	; 1
    307c:	0d 90       	ld	r0, X+
    307e:	bc 91       	ld	r27, X
    3080:	a0 2d       	mov	r26, r0
	// for each transition from the current state
	for ( stm_transition_t* tr = STM_state_get_transition(stm->state); tr != NULL; tr = STM_transition_get_transition(tr) ) {
		// if the transition is valid
		if ( ev == STM_transition_get_event(tr) ) {
			// transit
			stm->state = STM_transition_get_state(tr);
    3082:	b1 83       	std	Z+1, r27	; 0x01
    3084:	a0 83       	st	Z, r26
			return OK;
		}
	}

	return KO;
}
    3086:	8d 91       	ld	r24, X+
    3088:	9c 91       	ld	r25, X
			// transit
			stm->state = STM_transition_get_state(tr);

			// do the associated action
			u8 (*action)(pt_t*, void*) = STM_state_get_action(stm->state);
			if ( action != NULL ) {
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	79 f0       	breq	.+30     	; 0x30ac <STM_event+0x4c>
				PT_INIT(&stm->pt);
    308e:	13 82       	std	Z+3, r1	; 0x03
    3090:	12 82       	std	Z+2, r1	; 0x02
				stm->args = STM_state_get_action(stm->state);
    3092:	95 83       	std	Z+5, r25	; 0x05
    3094:	84 83       	std	Z+4, r24	; 0x04
				stm->thread = action;
    3096:	97 83       	std	Z+7, r25	; 0x07
    3098:	86 83       	std	Z+6, r24	; 0x06
    309a:	08 c0       	rjmp	.+16     	; 0x30ac <STM_event+0x4c>
			return OK;
		}
	}

	return KO;
}
    309c:	13 96       	adiw	r26, 0x03	; 3
    309e:	0d 90       	ld	r0, X+
    30a0:	bc 91       	ld	r27, X
    30a2:	a0 2d       	mov	r26, r0
		// KO
		return KO;
	}

	// for each transition from the current state
	for ( stm_transition_t* tr = STM_state_get_transition(stm->state); tr != NULL; tr = STM_transition_get_transition(tr) ) {
    30a4:	10 97       	sbiw	r26, 0x00	; 0
    30a6:	31 f7       	brne	.-52     	; 0x3074 <STM_event+0x14>
u8 STM_event(stm_t* stm, stm_event_t ev)
{
	// if not valid state machine
	if ( stm == NULL ) {
		// KO
		return KO;
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	08 95       	ret
				stm->args = STM_state_get_action(stm->state);
				stm->thread = action;
			}

			// and exit on success
			return OK;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return KO;
}
    30ae:	08 95       	ret

000030b0 <ADXL_init>:
// public functions
//

// initialization of the ADXL345 component
u8 ADXL_init(void)
{
    30b0:	a4 e0       	ldi	r26, 0x04	; 4
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	ee e5       	ldi	r30, 0x5E	; 94
    30b6:	f8 e1       	ldi	r31, 0x18	; 24
    30b8:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x20>
	u8 tx_buf[2];
	u8 rx_buf[2];

	// setup the SPI according to ADXL specs
	SPI_init(SPI_MASTER, SPI_THREE, SPI_MSB, SPI_DIV_2);
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	41 e0       	ldi	r20, 0x01	; 1
    30c0:	63 e0       	ldi	r22, 0x03	; 3
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	0e 94 73 19 	call	0x32e6	; 0x32e6 <SPI_init>

	// read the device ID
	tx_buf[0] = ADXL_READ | DEVID;
    30c8:	80 e8       	ldi	r24, 0x80	; 128
    30ca:	8b 83       	std	Y+3, r24	; 0x03
	SPI_master_blocking(tx_buf, 1, rx_buf, 2);
    30cc:	22 e0       	ldi	r18, 0x02	; 2
    30ce:	ae 01       	movw	r20, r28
    30d0:	4f 5f       	subi	r20, 0xFF	; 255
    30d2:	5f 4f       	sbci	r21, 0xFF	; 255
    30d4:	61 e0       	ldi	r22, 0x01	; 1
    30d6:	ce 01       	movw	r24, r28
    30d8:	03 96       	adiw	r24, 0x03	; 3
    30da:	0e 94 ed 19 	call	0x33da	; 0x33da <SPI_master_blocking>

	// check if device is the ADXL345
	if ( rx_buf[1] != DEVID_VALUE ) {
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	85 3e       	cpi	r24, 0xE5	; 229
    30e2:	79 f4       	brne	.+30     	; 0x3102 <ADXL_init+0x52>
		return KO;
	}

	// set the measure bit in power control to start acquisitions
	tx_buf[0] = ADXL_WRITE | POWER_CTL;
    30e4:	8d e2       	ldi	r24, 0x2D	; 45
    30e6:	8b 83       	std	Y+3, r24	; 0x03
	tx_buf[1] = (1 << 3);
    30e8:	88 e0       	ldi	r24, 0x08	; 8
    30ea:	8c 83       	std	Y+4, r24	; 0x04
	SPI_master_blocking(tx_buf, 2, rx_buf, 0);
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	ae 01       	movw	r20, r28
    30f0:	4f 5f       	subi	r20, 0xFF	; 255
    30f2:	5f 4f       	sbci	r21, 0xFF	; 255
    30f4:	62 e0       	ldi	r22, 0x02	; 2
    30f6:	ce 01       	movw	r24, r28
    30f8:	03 96       	adiw	r24, 0x03	; 3
    30fa:	0e 94 ed 19 	call	0x33da	; 0x33da <SPI_master_blocking>

	return OK;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <ADXL_init+0x54>
	tx_buf[0] = ADXL_READ | DEVID;
	SPI_master_blocking(tx_buf, 1, rx_buf, 2);

	// check if device is the ADXL345
	if ( rx_buf[1] != DEVID_VALUE ) {
		return KO;
    3102:	80 e0       	ldi	r24, 0x00	; 0
	tx_buf[0] = ADXL_WRITE | POWER_CTL;
	tx_buf[1] = (1 << 3);
	SPI_master_blocking(tx_buf, 2, rx_buf, 0);

	return OK;
}
    3104:	24 96       	adiw	r28, 0x04	; 4
    3106:	e2 e0       	ldi	r30, 0x02	; 2
    3108:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x20>

0000310c <ADXL_range_set>:


u8 ADXL_range_set(acc_range_t rg)
{
    310c:	a4 e0       	ldi	r26, 0x04	; 4
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	ec e8       	ldi	r30, 0x8C	; 140
    3112:	f8 e1       	ldi	r31, 0x18	; 24
    3114:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x20>
	u8 tx_buf[2];
	u8 rx_buf[2];

	// set the acceleration range and format the data to be right justified
	tx_buf[0] = ADXL_WRITE | DATA_FORMAT;
    3118:	91 e3       	ldi	r25, 0x31	; 49
    311a:	9b 83       	std	Y+3, r25	; 0x03
	tx_buf[1] = (1 << 3) | rg;
    311c:	88 60       	ori	r24, 0x08	; 8
    311e:	8c 83       	std	Y+4, r24	; 0x04
	SPI_master(tx_buf, 2, rx_buf, 0);
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	ae 01       	movw	r20, r28
    3124:	4f 5f       	subi	r20, 0xFF	; 255
    3126:	5f 4f       	sbci	r21, 0xFF	; 255
    3128:	62 e0       	ldi	r22, 0x02	; 2
    312a:	ce 01       	movw	r24, r28
    312c:	03 96       	adiw	r24, 0x03	; 3
    312e:	0e 94 cf 19 	call	0x339e	; 0x339e <SPI_master>

	return OK;
}
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	24 96       	adiw	r28, 0x04	; 4
    3136:	e2 e0       	ldi	r30, 0x02	; 2
    3138:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x20>

0000313c <ADXL_get>:


// retrieve X, Y and Z accelerations values
u8 ADXL_get(u16* acc_x, u16* acc_y, u16* acc_z)
{
    313c:	a8 e0       	ldi	r26, 0x08	; 8
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e4 ea       	ldi	r30, 0xA4	; 164
    3142:	f8 e1       	ldi	r31, 0x18	; 24
    3144:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__prologue_saves__+0x14>
    3148:	8c 01       	movw	r16, r24
    314a:	6b 01       	movw	r12, r22
    314c:	7a 01       	movw	r14, r20
	u8 tx_buf[1];
	u8 rx_buf[7];

	// read the 6 acceleration values in a row
	tx_buf[0] = ADXL_READ | ADXL_MB | DATAX0;
    314e:	82 ef       	ldi	r24, 0xF2	; 242
    3150:	88 87       	std	Y+8, r24	; 0x08
	SPI_master(tx_buf, 1, rx_buf, 7);
    3152:	27 e0       	ldi	r18, 0x07	; 7
    3154:	ae 01       	movw	r20, r28
    3156:	4f 5f       	subi	r20, 0xFF	; 255
    3158:	5f 4f       	sbci	r21, 0xFF	; 255
    315a:	61 e0       	ldi	r22, 0x01	; 1
    315c:	ce 01       	movw	r24, r28
    315e:	08 96       	adiw	r24, 0x08	; 8
    3160:	0e 94 cf 19 	call	0x339e	; 0x339e <SPI_master>

	// format the values
	*acc_x = (rx_buf[1] << 8) + rx_buf[2];
    3164:	3a 81       	ldd	r19, Y+2	; 0x02
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	28 0f       	add	r18, r24
    316c:	31 1d       	adc	r19, r1
    316e:	f8 01       	movw	r30, r16
    3170:	31 83       	std	Z+1, r19	; 0x01
    3172:	20 83       	st	Z, r18
	*acc_y = (rx_buf[3] << 8) + rx_buf[4];
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	2d 81       	ldd	r18, Y+5	; 0x05
    317a:	82 0f       	add	r24, r18
    317c:	91 1d       	adc	r25, r1
    317e:	f6 01       	movw	r30, r12
    3180:	91 83       	std	Z+1, r25	; 0x01
    3182:	80 83       	st	Z, r24
	*acc_z = (rx_buf[5] << 8) + rx_buf[6];
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	2f 81       	ldd	r18, Y+7	; 0x07
    318a:	82 0f       	add	r24, r18
    318c:	91 1d       	adc	r25, r1
    318e:	f7 01       	movw	r30, r14
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24

	return OK;
}
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	28 96       	adiw	r28, 0x08	; 8
    3198:	e8 e0       	ldi	r30, 0x08	; 8
    319a:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__epilogue_restores__+0x14>

0000319e <SPI_default_call_back>:
static void SPI_default_call_back(spi_state_t st, void* misc)
{
	(void)st;
	(void)misc;

	SPI.fini = OK;
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	80 93 90 04 	sts	0x0490, r24
    31a4:	08 95       	ret

000031a6 <__vector_17>:
//-------------------------------------------
// private functions
//

ISR(SPI_STC_vect)
{
    31a6:	1f 92       	push	r1
    31a8:	0f 92       	push	r0
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	0f 92       	push	r0
    31ae:	11 24       	eor	r1, r1
    31b0:	2f 93       	push	r18
    31b2:	3f 93       	push	r19
    31b4:	4f 93       	push	r20
    31b6:	5f 93       	push	r21
    31b8:	6f 93       	push	r22
    31ba:	7f 93       	push	r23
    31bc:	8f 93       	push	r24
    31be:	9f 93       	push	r25
    31c0:	af 93       	push	r26
    31c2:	bf 93       	push	r27
    31c4:	ef 93       	push	r30
    31c6:	ff 93       	push	r31
	// handling depends on set behaviour 
	switch ( SPI.behaviour ) {
    31c8:	80 91 83 04 	lds	r24, 0x0483
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	29 f0       	breq	.+10     	; 0x31da <__vector_17+0x34>
    31d0:	d8 f1       	brcs	.+118    	; 0x3248 <__vector_17+0xa2>
    31d2:	82 30       	cpi	r24, 0x02	; 2
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <__vector_17+0x32>
    31d6:	4d c0       	rjmp	.+154    	; 0x3272 <__vector_17+0xcc>
    31d8:	37 c0       	rjmp	.+110    	; 0x3248 <__vector_17+0xa2>
		case SPI_MASTER:
			// if the interrupt is not awaited
			if ( SPI.state != SPI_RUNNING ) {
    31da:	80 91 8b 04 	lds	r24, 0x048B
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <__vector_17+0x3e>
    31e2:	32 c0       	rjmp	.+100    	; 0x3248 <__vector_17+0xa2>

				return;
			}

			// if there are still data to receive
			if ( SPI.index < SPI.rx_len ) {
    31e4:	80 91 8a 04 	lds	r24, 0x048A
    31e8:	90 91 86 04 	lds	r25, 0x0486
    31ec:	89 17       	cp	r24, r25
    31ee:	40 f4       	brcc	.+16     	; 0x3200 <__vector_17+0x5a>
				// retrieve it from rx register
				SPI.rx_buf[SPI.index] = SPDR;
    31f0:	2e b5       	in	r18, 0x2e	; 46
    31f2:	e0 91 84 04 	lds	r30, 0x0484
    31f6:	f0 91 85 04 	lds	r31, 0x0485
    31fa:	e8 0f       	add	r30, r24
    31fc:	f1 1d       	adc	r31, r1
    31fe:	20 83       	st	Z, r18
			}

			// update index
			SPI.index++;
    3200:	8f 5f       	subi	r24, 0xFF	; 255
    3202:	80 93 8a 04 	sts	0x048A, r24

			// when emitting buffer is empty and receiving buffer is full 
			if ( (SPI.index >= SPI.tx_len) && (SPI.index >= SPI.rx_len) ) {
    3206:	20 91 89 04 	lds	r18, 0x0489
    320a:	82 17       	cp	r24, r18
    320c:	90 f0       	brcs	.+36     	; 0x3232 <__vector_17+0x8c>
    320e:	89 17       	cp	r24, r25
    3210:	c0 f0       	brcs	.+48     	; 0x3242 <__vector_17+0x9c>
				// signal end of transmission
				SPI.call_back(SPI_MASTER_END, SPI.misc);
    3212:	60 91 8e 04 	lds	r22, 0x048E
    3216:	70 91 8f 04 	lds	r23, 0x048F
    321a:	e0 91 8c 04 	lds	r30, 0x048C
    321e:	f0 91 8d 04 	lds	r31, 0x048D
    3222:	82 e0       	ldi	r24, 0x02	; 2
    3224:	09 95       	icall
				PORTB |= _BV(PB4);	// set /SS high to block slave
    3226:	2c 9a       	sbi	0x05, 4	; 5

				// reset internals
				SPI.state = SPI_IDLE;
    3228:	10 92 8b 04 	sts	0x048B, r1
				SPI.index = 0;
    322c:	10 92 8a 04 	sts	0x048A, r1
				break;
    3230:	20 c0       	rjmp	.+64     	; 0x3272 <__vector_17+0xcc>
			}

			// if there are still data to send
			if ( SPI.index < SPI.tx_len ) {
				// update tx register
				SPDR = SPI.tx_buf[SPI.index];
    3232:	e0 91 87 04 	lds	r30, 0x0487
    3236:	f0 91 88 04 	lds	r31, 0x0488
    323a:	e8 0f       	add	r30, r24
    323c:	f1 1d       	adc	r31, r1
    323e:	80 81       	ld	r24, Z
    3240:	01 c0       	rjmp	.+2      	; 0x3244 <__vector_17+0x9e>
			}
			else {
				// no more data to send but apparently still some to receive
				// so send useless byte
				SPDR = 0xff;
    3242:	8f ef       	ldi	r24, 0xFF	; 255
    3244:	8e bd       	out	0x2e, r24	; 46
    3246:	15 c0       	rjmp	.+42     	; 0x3272 <__vector_17+0xcc>
				SPI.state = SPI_IDLE;
			}
			break;

		case SPI_RESET:
			SPI.false_triggers++;
    3248:	80 91 91 04 	lds	r24, 0x0491
    324c:	90 91 92 04 	lds	r25, 0x0492
    3250:	01 96       	adiw	r24, 0x01	; 1
    3252:	90 93 92 04 	sts	0x0492, r25
    3256:	80 93 91 04 	sts	0x0491, r24
			SPI.call_back(SPI_ERROR, SPI.misc);
    325a:	60 91 8e 04 	lds	r22, 0x048E
    325e:	70 91 8f 04 	lds	r23, 0x048F
    3262:	e0 91 8c 04 	lds	r30, 0x048C
    3266:	f0 91 8d 04 	lds	r31, 0x048D
    326a:	85 e0       	ldi	r24, 0x05	; 5
    326c:	09 95       	icall
			SPI.state = SPI_IDLE;
    326e:	10 92 8b 04 	sts	0x048B, r1
			break;

	}
}
    3272:	ff 91       	pop	r31
    3274:	ef 91       	pop	r30
    3276:	bf 91       	pop	r27
    3278:	af 91       	pop	r26
    327a:	9f 91       	pop	r25
    327c:	8f 91       	pop	r24
    327e:	7f 91       	pop	r23
    3280:	6f 91       	pop	r22
    3282:	5f 91       	pop	r21
    3284:	4f 91       	pop	r20
    3286:	3f 91       	pop	r19
    3288:	2f 91       	pop	r18
    328a:	0f 90       	pop	r0
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	0f 90       	pop	r0
    3290:	1f 90       	pop	r1
    3292:	18 95       	reti

00003294 <SPI_set_clock>:
}

// set the SPI clock speed
void SPI_set_clock(spi_clock_div_t clock_div)
{
    SPSR &= (~_BV(SPI2X));
    3294:	9d b5       	in	r25, 0x2d	; 45
    3296:	9e 7f       	andi	r25, 0xFE	; 254
    3298:	9d bd       	out	0x2d, r25	; 45
    SPCR &= (~_BV(SPR0)) & (~_BV(SPR1));
    329a:	9c b5       	in	r25, 0x2c	; 44
    329c:	9c 7f       	andi	r25, 0xFC	; 252
    329e:	9c bd       	out	0x2c, r25	; 44
    
    switch ( clock_div ) {
    32a0:	83 30       	cpi	r24, 0x03	; 3
    32a2:	99 f0       	breq	.+38     	; 0x32ca <SPI_set_clock+0x36>
    32a4:	28 f4       	brcc	.+10     	; 0x32b0 <SPI_set_clock+0x1c>
    32a6:	88 23       	and	r24, r24
    32a8:	49 f0       	breq	.+18     	; 0x32bc <SPI_set_clock+0x28>
    32aa:	82 30       	cpi	r24, 0x02	; 2
    32ac:	d9 f4       	brne	.+54     	; 0x32e4 <SPI_set_clock+0x50>
    32ae:	0a c0       	rjmp	.+20     	; 0x32c4 <SPI_set_clock+0x30>
    32b0:	85 30       	cpi	r24, 0x05	; 5
    32b2:	a9 f0       	breq	.+42     	; 0x32de <SPI_set_clock+0x4a>
    32b4:	68 f0       	brcs	.+26     	; 0x32d0 <SPI_set_clock+0x3c>
    32b6:	86 30       	cpi	r24, 0x06	; 6
    32b8:	a9 f4       	brne	.+42     	; 0x32e4 <SPI_set_clock+0x50>
    32ba:	0e c0       	rjmp	.+28     	; 0x32d8 <SPI_set_clock+0x44>
    case SPI_DIV_2:
        SPSR |= _BV(SPI2X);
    32bc:	8d b5       	in	r24, 0x2d	; 45
    32be:	81 60       	ori	r24, 0x01	; 1
    32c0:	8d bd       	out	0x2d, r24	; 45
        break;
    32c2:	08 95       	ret
        
    case SPI_DIV_4:
        break;
        
    case SPI_DIV_8:
        SPSR |= _BV(SPI2X);
    32c4:	8d b5       	in	r24, 0x2d	; 45
    32c6:	81 60       	ori	r24, 0x01	; 1
    32c8:	8d bd       	out	0x2d, r24	; 45
        SPCR |= _BV(SPR0);
        break;
        
    case SPI_DIV_16:
        SPCR |= _BV(SPR0);
    32ca:	8c b5       	in	r24, 0x2c	; 44
    32cc:	81 60       	ori	r24, 0x01	; 1
    32ce:	09 c0       	rjmp	.+18     	; 0x32e2 <SPI_set_clock+0x4e>
        break;
        
    case SPI_DIV_32:
        SPSR |= _BV(SPI2X);
    32d0:	8d b5       	in	r24, 0x2d	; 45
    32d2:	81 60       	ori	r24, 0x01	; 1
    32d4:	8d bd       	out	0x2d, r24	; 45
    32d6:	03 c0       	rjmp	.+6      	; 0x32de <SPI_set_clock+0x4a>
    case SPI_DIV_64:
        SPCR |= _BV(SPR1);
        break;
        
    case SPI_DIV_128:
        SPCR |= _BV(SPR0);
    32d8:	8c b5       	in	r24, 0x2c	; 44
    32da:	81 60       	ori	r24, 0x01	; 1
    32dc:	8c bd       	out	0x2c, r24	; 44
        SPCR |= _BV(SPR1);
    32de:	8c b5       	in	r24, 0x2c	; 44
    32e0:	82 60       	ori	r24, 0x02	; 2
    32e2:	8c bd       	out	0x2c, r24	; 44
    32e4:	08 95       	ret

000032e6 <SPI_init>:
//-------------------------------------------
// public functions
//

void SPI_init(spi_behaviour_t behaviour, spi_mode_t mode, spi_data_order_t data_order, spi_clock_div_t clock_div)
{
    32e6:	cf 93       	push	r28
    32e8:	c8 2f       	mov	r28, r24
    32ea:	82 2f       	mov	r24, r18
	// default mode
	SPI.behaviour = SPI_RESET;
    32ec:	10 92 83 04 	sts	0x0483, r1

	switch ( behaviour ) {
    32f0:	c1 30       	cpi	r28, 0x01	; 1
    32f2:	19 f0       	breq	.+6      	; 0x32fa <SPI_init+0x14>
    32f4:	c2 30       	cpi	r28, 0x02	; 2
    32f6:	61 f4       	brne	.+24     	; 0x3310 <SPI_init+0x2a>
    32f8:	07 c0       	rjmp	.+14     	; 0x3308 <SPI_init+0x22>
		case SPI_MASTER:
			SPCR = _BV(MSTR);
    32fa:	90 e1       	ldi	r25, 0x10	; 16
    32fc:	9c bd       	out	0x2c, r25	; 44
			DDRB |= _BV(PB7);	// SCK as output
    32fe:	27 9a       	sbi	0x04, 7	; 4
			DDRB |= _BV(PB5);	// MOSI as output
    3300:	25 9a       	sbi	0x04, 5	; 4
			DDRB |= _BV(PB4);	// /SS as output
    3302:	24 9a       	sbi	0x04, 4	; 4
			PORTB |= _BV(PB4);	// /SS is high to block slave
    3304:	2c 9a       	sbi	0x05, 4	; 5
			break;
    3306:	07 c0       	rjmp	.+14     	; 0x3316 <SPI_init+0x30>

		case SPI_SLAVE:
			SPCR = 0;
    3308:	1c bc       	out	0x2c, r1	; 44
			DDRB &= ~_BV(PB4);	// /SS as input
    330a:	24 98       	cbi	0x04, 4	; 4
			DDRB &= ~_BV(PB6);	// MISO as input
    330c:	26 98       	cbi	0x04, 6	; 4
			break;
    330e:	03 c0       	rjmp	.+6      	; 0x3316 <SPI_init+0x30>

		default:
			SPCR = 0;
    3310:	1c bc       	out	0x2c, r1	; 44
			DDRB &= ~_BV(PB4);	// /SS as input
    3312:	24 98       	cbi	0x04, 4	; 4
			return;
    3314:	39 c0       	rjmp	.+114    	; 0x3388 <SPI_init+0xa2>
			break;
	}

	switch ( mode ) {
    3316:	61 30       	cpi	r22, 0x01	; 1
    3318:	61 f0       	breq	.+24     	; 0x3332 <SPI_init+0x4c>
    331a:	70 f0       	brcs	.+28     	; 0x3338 <SPI_init+0x52>
    331c:	62 30       	cpi	r22, 0x02	; 2
    331e:	19 f0       	breq	.+6      	; 0x3326 <SPI_init+0x40>
    3320:	63 30       	cpi	r22, 0x03	; 3
    3322:	91 f5       	brne	.+100    	; 0x3388 <SPI_init+0xa2>
    3324:	03 c0       	rjmp	.+6      	; 0x332c <SPI_init+0x46>
		case SPI_ONE:	// CPOL = 0 and CPHA = 1
			SPCR |= _BV(CPHA);
			break;

		case SPI_TWO:	// CPOL = 1 and CPHA = 0
			SPCR |= _BV(CPOL);
    3326:	9c b5       	in	r25, 0x2c	; 44
    3328:	98 60       	ori	r25, 0x08	; 8
    332a:	05 c0       	rjmp	.+10     	; 0x3336 <SPI_init+0x50>
			break;

		case SPI_THREE:	// CPOL = 1 and CPHA = 1
			SPCR |= _BV(CPOL);
    332c:	9c b5       	in	r25, 0x2c	; 44
    332e:	98 60       	ori	r25, 0x08	; 8
    3330:	9c bd       	out	0x2c, r25	; 44
			SPCR |= _BV(CPHA);
    3332:	9c b5       	in	r25, 0x2c	; 44
    3334:	94 60       	ori	r25, 0x04	; 4
    3336:	9c bd       	out	0x2c, r25	; 44
		default:
			return;
			break;
	}

	switch ( data_order ) {
    3338:	44 23       	and	r20, r20
    333a:	19 f0       	breq	.+6      	; 0x3342 <SPI_init+0x5c>
    333c:	41 30       	cpi	r20, 0x01	; 1
    333e:	21 f5       	brne	.+72     	; 0x3388 <SPI_init+0xa2>
    3340:	03 c0       	rjmp	.+6      	; 0x3348 <SPI_init+0x62>
		case SPI_LSB:
			SPCR |= _BV(DORD);
    3342:	9c b5       	in	r25, 0x2c	; 44
    3344:	90 62       	ori	r25, 0x20	; 32
    3346:	9c bd       	out	0x2c, r25	; 44
		default:
			return;
			break;
	}

	SPI_set_clock(clock_div);
    3348:	0e 94 4a 19 	call	0x3294	; 0x3294 <SPI_set_clock>

	// configuration passed : set the correct behaviour
	SPI.behaviour = behaviour;
    334c:	c0 93 83 04 	sts	0x0483, r28

	// reset internals
	SPI.state = SPI_IDLE;
    3350:	10 92 8b 04 	sts	0x048B, r1
	SPI.index = 0;
    3354:	10 92 8a 04 	sts	0x048A, r1
	SPI.call_back = SPI_default_call_back;
    3358:	8f ec       	ldi	r24, 0xCF	; 207
    335a:	98 e1       	ldi	r25, 0x18	; 24
    335c:	90 93 8d 04 	sts	0x048D, r25
    3360:	80 93 8c 04 	sts	0x048C, r24
	SPI.misc = NULL;
    3364:	10 92 8f 04 	sts	0x048F, r1
    3368:	10 92 8e 04 	sts	0x048E, r1
	SPI.false_triggers = 0;
    336c:	10 92 92 04 	sts	0x0492, r1
    3370:	10 92 91 04 	sts	0x0491, r1
	SPI.overflows = 0;
    3374:	10 92 94 04 	sts	0x0494, r1
    3378:	10 92 93 04 	sts	0x0493, r1

	// finally enable the SPI and its interrupt
	SPCR |= _BV(SPE);
    337c:	8c b5       	in	r24, 0x2c	; 44
    337e:	80 64       	ori	r24, 0x40	; 64
    3380:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPIE);
    3382:	8c b5       	in	r24, 0x2c	; 44
    3384:	80 68       	ori	r24, 0x80	; 128
    3386:	8c bd       	out	0x2c, r24	; 44
}
    3388:	cf 91       	pop	r28
    338a:	08 95       	ret

0000338c <SPI_call_back_set>:
}

// call-back init
void SPI_call_back_set(void (*call_back)(spi_state_t st, void* misc), void* misc)
{
	SPI.call_back = call_back;
    338c:	90 93 8d 04 	sts	0x048D, r25
    3390:	80 93 8c 04 	sts	0x048C, r24
	SPI.misc = misc;
    3394:	70 93 8f 04 	sts	0x048F, r23
    3398:	60 93 8e 04 	sts	0x048E, r22
    339c:	08 95       	ret

0000339e <SPI_master>:

// handle a transmission as master
u8 SPI_master(u8* tx_buf, u8 tx_len, u8* rx_buf, u8 rx_len)
{
	// check initial conditions
	if ( (SPI.state != SPI_IDLE) || (SPI.behaviour != SPI_MASTER) ) {
    339e:	30 91 8b 04 	lds	r19, 0x048B
    33a2:	31 11       	cpse	r19, r1
    33a4:	18 c0       	rjmp	.+48     	; 0x33d6 <SPI_master+0x38>
    33a6:	30 91 83 04 	lds	r19, 0x0483
    33aa:	31 30       	cpi	r19, 0x01	; 1
    33ac:	a1 f4       	brne	.+40     	; 0x33d6 <SPI_master+0x38>
		return KO;
	}

	// save contexts
	SPI.tx_buf = tx_buf;
    33ae:	90 93 88 04 	sts	0x0488, r25
    33b2:	80 93 87 04 	sts	0x0487, r24
	SPI.tx_len = tx_len;
    33b6:	60 93 89 04 	sts	0x0489, r22
	SPI.rx_buf = rx_buf;
    33ba:	50 93 85 04 	sts	0x0485, r21
    33be:	40 93 84 04 	sts	0x0484, r20
	SPI.rx_len = rx_len;
    33c2:	20 93 86 04 	sts	0x0486, r18

	// start transmission
	SPI.state = SPI_RUNNING;
    33c6:	30 93 8b 04 	sts	0x048B, r19
	PORTB &= ~_BV(PB4);	// set /SS low to select slave
    33ca:	2c 98       	cbi	0x05, 4	; 5
	SPDR = SPI.tx_buf[0];
    33cc:	fc 01       	movw	r30, r24
    33ce:	80 81       	ld	r24, Z
    33d0:	8e bd       	out	0x2e, r24	; 46

	// now the ISR will do the rest of the job
	return OK;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	08 95       	ret
// handle a transmission as master
u8 SPI_master(u8* tx_buf, u8 tx_len, u8* rx_buf, u8 rx_len)
{
	// check initial conditions
	if ( (SPI.state != SPI_IDLE) || (SPI.behaviour != SPI_MASTER) ) {
		return KO;
    33d6:	80 e0       	ldi	r24, 0x00	; 0
	PORTB &= ~_BV(PB4);	// set /SS low to select slave
	SPDR = SPI.tx_buf[0];

	// now the ISR will do the rest of the job
	return OK;
}
    33d8:	08 95       	ret

000033da <SPI_master_blocking>:


u8 SPI_master_blocking(u8* tx_buf, u8 tx_len, u8* rx_buf, u8 rx_len)
{
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
	// check initial conditions
	if ( (SPI.state != SPI_IDLE) || (SPI.behaviour != SPI_MASTER) ) {
    33de:	30 91 8b 04 	lds	r19, 0x048B
    33e2:	33 23       	and	r19, r19
    33e4:	11 f0       	breq	.+4      	; 0x33ea <SPI_master_blocking+0x10>
		return KO;
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	1d c0       	rjmp	.+58     	; 0x3424 <SPI_master_blocking+0x4a>


u8 SPI_master_blocking(u8* tx_buf, u8 tx_len, u8* rx_buf, u8 rx_len)
{
	// check initial conditions
	if ( (SPI.state != SPI_IDLE) || (SPI.behaviour != SPI_MASTER) ) {
    33ea:	30 91 83 04 	lds	r19, 0x0483
    33ee:	31 30       	cpi	r19, 0x01	; 1
    33f0:	d1 f7       	brne	.-12     	; 0x33e6 <SPI_master_blocking+0xc>
		return KO;
	}

	// save set call-back context
	void (*call_back)(spi_state_t st, void* misc);
	call_back = SPI.call_back;
    33f2:	c0 91 8c 04 	lds	r28, 0x048C
    33f6:	d0 91 8d 04 	lds	r29, 0x048D

	// force SPI default call_back
	SPI.call_back = SPI_default_call_back;
    33fa:	ef ec       	ldi	r30, 0xCF	; 207
    33fc:	f8 e1       	ldi	r31, 0x18	; 24
    33fe:	f0 93 8d 04 	sts	0x048D, r31
    3402:	e0 93 8c 04 	sts	0x048C, r30

	// set the flag to detect end of transmission
	SPI.fini = KO;
    3406:	10 92 90 04 	sts	0x0490, r1

	// start transmission
	if (OK != SPI_master(tx_buf, tx_len, rx_buf, rx_len) ) {
    340a:	0e 94 cf 19 	call	0x339e	; 0x339e <SPI_master>
    340e:	81 30       	cpi	r24, 0x01	; 1
    3410:	51 f7       	brne	.-44     	; 0x33e6 <SPI_master_blocking+0xc>
		return KO;
	}

	// wait until transmission is over
	while (KO == SPI.fini)
    3412:	80 91 90 04 	lds	r24, 0x0490
    3416:	88 23       	and	r24, r24
    3418:	e1 f3       	breq	.-8      	; 0x3412 <SPI_master_blocking+0x38>
		;

	// restore call-back context
	SPI.call_back = call_back;
    341a:	d0 93 8d 04 	sts	0x048D, r29
    341e:	c0 93 8c 04 	sts	0x048C, r28

	return OK;
    3422:	81 e0       	ldi	r24, 0x01	; 1
}
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	08 95       	ret

0000342a <SPI_slave>:
    342a:	20 91 8b 04 	lds	r18, 0x048B
    342e:	21 11       	cpse	r18, r1
    3430:	14 c0       	rjmp	.+40     	; 0x345a <SPI_slave+0x30>
    3432:	20 91 83 04 	lds	r18, 0x0483
    3436:	22 30       	cpi	r18, 0x02	; 2
    3438:	81 f4       	brne	.+32     	; 0x345a <SPI_slave+0x30>
    343a:	10 92 88 04 	sts	0x0488, r1
    343e:	10 92 87 04 	sts	0x0487, r1
    3442:	10 92 89 04 	sts	0x0489, r1
    3446:	90 93 85 04 	sts	0x0485, r25
    344a:	80 93 84 04 	sts	0x0484, r24
    344e:	60 93 86 04 	sts	0x0486, r22
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	80 93 8b 04 	sts	0x048B, r24
    3458:	08 95       	ret
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	08 95       	ret

0000345e <main>:
    345e:	8f e8       	ldi	r24, 0x8F	; 143
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <TIME_init>
    3466:	64 e6       	ldi	r22, 0x64	; 100
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <TIME_set_incr>
    3472:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <DPT_init>
    3476:	0e 94 b4 0a 	call	0x1568	; 0x1568 <BSC_init>
    347a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <CMN_init>
    347e:	0e 94 41 12 	call	0x2482	; 0x2482 <CPU_init>
    3482:	e1 2c       	mov	r14, r1
    3484:	f1 2c       	mov	r15, r1
    3486:	0c e8       	ldi	r16, 0x8C	; 140
    3488:	10 e0       	ldi	r17, 0x00	; 0
    348a:	2e e4       	ldi	r18, 0x4E	; 78
    348c:	42 e0       	ldi	r20, 0x02	; 2
    348e:	67 e0       	ldi	r22, 0x07	; 7
    3490:	82 e0       	ldi	r24, 0x02	; 2
    3492:	0e 94 1d 14 	call	0x283a	; 0x283a <TMR2_init>
    3496:	0e 94 60 14 	call	0x28c0	; 0x28c0 <TMR2_start>
    349a:	0e 94 67 05 	call	0xace	; 0xace <MNT_init>
    349e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <SERVO_init>
    34a2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <ACQ_init>
    34a6:	78 94       	sei
    34a8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <DPT_run>
    34ac:	0e 94 1e 0b 	call	0x163c	; 0x163c <BSC_run>
    34b0:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <CMN_run>
    34b4:	0e 94 9a 12 	call	0x2534	; 0x2534 <CPU_run>
    34b8:	0e 94 c9 05 	call	0xb92	; 0xb92 <MNT_run>
    34bc:	0e 94 54 07 	call	0xea8	; 0xea8 <SERVO_run>
    34c0:	0e 94 14 08 	call	0x1028	; 0x1028 <ACQ_run>
    34c4:	f1 cf       	rjmp	.-30     	; 0x34a8 <main+0x4a>

000034c6 <__umulhisi3>:
    34c6:	a2 9f       	mul	r26, r18
    34c8:	b0 01       	movw	r22, r0
    34ca:	b3 9f       	mul	r27, r19
    34cc:	c0 01       	movw	r24, r0
    34ce:	a3 9f       	mul	r26, r19
    34d0:	01 d0       	rcall	.+2      	; 0x34d4 <__umulhisi3+0xe>
    34d2:	b2 9f       	mul	r27, r18
    34d4:	70 0d       	add	r23, r0
    34d6:	81 1d       	adc	r24, r1
    34d8:	11 24       	eor	r1, r1
    34da:	91 1d       	adc	r25, r1
    34dc:	08 95       	ret

000034de <__muluhisi3>:
    34de:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__umulhisi3>
    34e2:	a5 9f       	mul	r26, r21
    34e4:	90 0d       	add	r25, r0
    34e6:	b4 9f       	mul	r27, r20
    34e8:	90 0d       	add	r25, r0
    34ea:	a4 9f       	mul	r26, r20
    34ec:	80 0d       	add	r24, r0
    34ee:	91 1d       	adc	r25, r1
    34f0:	11 24       	eor	r1, r1
    34f2:	08 95       	ret

000034f4 <__divmodhi4>:
    34f4:	97 fb       	bst	r25, 7
    34f6:	07 2e       	mov	r0, r23
    34f8:	16 f4       	brtc	.+4      	; 0x34fe <__divmodhi4+0xa>
    34fa:	00 94       	com	r0
    34fc:	07 d0       	rcall	.+14     	; 0x350c <__divmodhi4_neg1>
    34fe:	77 fd       	sbrc	r23, 7
    3500:	09 d0       	rcall	.+18     	; 0x3514 <__divmodhi4_neg2>
    3502:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    3506:	07 fc       	sbrc	r0, 7
    3508:	05 d0       	rcall	.+10     	; 0x3514 <__divmodhi4_neg2>
    350a:	3e f4       	brtc	.+14     	; 0x351a <__divmodhi4_exit>

0000350c <__divmodhi4_neg1>:
    350c:	90 95       	com	r25
    350e:	81 95       	neg	r24
    3510:	9f 4f       	sbci	r25, 0xFF	; 255
    3512:	08 95       	ret

00003514 <__divmodhi4_neg2>:
    3514:	70 95       	com	r23
    3516:	61 95       	neg	r22
    3518:	7f 4f       	sbci	r23, 0xFF	; 255

0000351a <__divmodhi4_exit>:
    351a:	08 95       	ret

0000351c <__udivmodsi4>:
    351c:	a1 e2       	ldi	r26, 0x21	; 33
    351e:	1a 2e       	mov	r1, r26
    3520:	aa 1b       	sub	r26, r26
    3522:	bb 1b       	sub	r27, r27
    3524:	fd 01       	movw	r30, r26
    3526:	0d c0       	rjmp	.+26     	; 0x3542 <__udivmodsi4_ep>

00003528 <__udivmodsi4_loop>:
    3528:	aa 1f       	adc	r26, r26
    352a:	bb 1f       	adc	r27, r27
    352c:	ee 1f       	adc	r30, r30
    352e:	ff 1f       	adc	r31, r31
    3530:	a2 17       	cp	r26, r18
    3532:	b3 07       	cpc	r27, r19
    3534:	e4 07       	cpc	r30, r20
    3536:	f5 07       	cpc	r31, r21
    3538:	20 f0       	brcs	.+8      	; 0x3542 <__udivmodsi4_ep>
    353a:	a2 1b       	sub	r26, r18
    353c:	b3 0b       	sbc	r27, r19
    353e:	e4 0b       	sbc	r30, r20
    3540:	f5 0b       	sbc	r31, r21

00003542 <__udivmodsi4_ep>:
    3542:	66 1f       	adc	r22, r22
    3544:	77 1f       	adc	r23, r23
    3546:	88 1f       	adc	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	1a 94       	dec	r1
    354c:	69 f7       	brne	.-38     	; 0x3528 <__udivmodsi4_loop>
    354e:	60 95       	com	r22
    3550:	70 95       	com	r23
    3552:	80 95       	com	r24
    3554:	90 95       	com	r25
    3556:	9b 01       	movw	r18, r22
    3558:	ac 01       	movw	r20, r24
    355a:	bd 01       	movw	r22, r26
    355c:	cf 01       	movw	r24, r30
    355e:	08 95       	ret

00003560 <__prologue_saves__>:
    3560:	2f 92       	push	r2
    3562:	3f 92       	push	r3
    3564:	4f 92       	push	r4
    3566:	5f 92       	push	r5
    3568:	6f 92       	push	r6
    356a:	7f 92       	push	r7
    356c:	8f 92       	push	r8
    356e:	9f 92       	push	r9
    3570:	af 92       	push	r10
    3572:	bf 92       	push	r11
    3574:	cf 92       	push	r12
    3576:	df 92       	push	r13
    3578:	ef 92       	push	r14
    357a:	ff 92       	push	r15
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	ca 1b       	sub	r28, r26
    358a:	db 0b       	sbc	r29, r27
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	de bf       	out	0x3e, r29	; 62
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	cd bf       	out	0x3d, r28	; 61
    3596:	09 94       	ijmp

00003598 <__epilogue_restores__>:
    3598:	2a 88       	ldd	r2, Y+18	; 0x12
    359a:	39 88       	ldd	r3, Y+17	; 0x11
    359c:	48 88       	ldd	r4, Y+16	; 0x10
    359e:	5f 84       	ldd	r5, Y+15	; 0x0f
    35a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    35a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    35a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    35a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    35a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    35aa:	b9 84       	ldd	r11, Y+9	; 0x09
    35ac:	c8 84       	ldd	r12, Y+8	; 0x08
    35ae:	df 80       	ldd	r13, Y+7	; 0x07
    35b0:	ee 80       	ldd	r14, Y+6	; 0x06
    35b2:	fd 80       	ldd	r15, Y+5	; 0x05
    35b4:	0c 81       	ldd	r16, Y+4	; 0x04
    35b6:	1b 81       	ldd	r17, Y+3	; 0x03
    35b8:	aa 81       	ldd	r26, Y+2	; 0x02
    35ba:	b9 81       	ldd	r27, Y+1	; 0x01
    35bc:	ce 0f       	add	r28, r30
    35be:	d1 1d       	adc	r29, r1
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	ed 01       	movw	r28, r26
    35cc:	08 95       	ret

000035ce <__tablejump2__>:
    35ce:	ee 0f       	add	r30, r30
    35d0:	ff 1f       	adc	r31, r31

000035d2 <__tablejump__>:
    35d2:	05 90       	lpm	r0, Z+
    35d4:	f4 91       	lpm	r31, Z+
    35d6:	e0 2d       	mov	r30, r0
    35d8:	09 94       	ijmp

000035da <__ashldi3>:
    35da:	0f 93       	push	r16
    35dc:	0f 73       	andi	r16, 0x3F	; 63
    35de:	51 f0       	breq	.+20     	; 0x35f4 <__ashldi3+0x1a>
    35e0:	22 0f       	add	r18, r18
    35e2:	33 1f       	adc	r19, r19
    35e4:	44 1f       	adc	r20, r20
    35e6:	55 1f       	adc	r21, r21
    35e8:	66 1f       	adc	r22, r22
    35ea:	77 1f       	adc	r23, r23
    35ec:	88 1f       	adc	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	0a 95       	dec	r16
    35f2:	b1 f7       	brne	.-20     	; 0x35e0 <__ashldi3+0x6>
    35f4:	0f 91       	pop	r16
    35f6:	08 95       	ret

000035f8 <__cmpdi2_s8>:
    35f8:	00 24       	eor	r0, r0
    35fa:	a7 fd       	sbrc	r26, 7
    35fc:	00 94       	com	r0
    35fe:	2a 17       	cp	r18, r26
    3600:	30 05       	cpc	r19, r0
    3602:	40 05       	cpc	r20, r0
    3604:	50 05       	cpc	r21, r0
    3606:	60 05       	cpc	r22, r0
    3608:	70 05       	cpc	r23, r0
    360a:	80 05       	cpc	r24, r0
    360c:	90 05       	cpc	r25, r0
    360e:	08 95       	ret

00003610 <__udivmodhi4>:
    3610:	aa 1b       	sub	r26, r26
    3612:	bb 1b       	sub	r27, r27
    3614:	51 e1       	ldi	r21, 0x11	; 17
    3616:	07 c0       	rjmp	.+14     	; 0x3626 <__udivmodhi4_ep>

00003618 <__udivmodhi4_loop>:
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	a6 17       	cp	r26, r22
    361e:	b7 07       	cpc	r27, r23
    3620:	10 f0       	brcs	.+4      	; 0x3626 <__udivmodhi4_ep>
    3622:	a6 1b       	sub	r26, r22
    3624:	b7 0b       	sbc	r27, r23

00003626 <__udivmodhi4_ep>:
    3626:	88 1f       	adc	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	5a 95       	dec	r21
    362c:	a9 f7       	brne	.-22     	; 0x3618 <__udivmodhi4_loop>
    362e:	80 95       	com	r24
    3630:	90 95       	com	r25
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	08 95       	ret

00003638 <memcpy_P>:
    3638:	fb 01       	movw	r30, r22
    363a:	dc 01       	movw	r26, r24
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <memcpy_P+0xa>
    363e:	05 90       	lpm	r0, Z+
    3640:	0d 92       	st	X+, r0
    3642:	41 50       	subi	r20, 0x01	; 1
    3644:	50 40       	sbci	r21, 0x00	; 0
    3646:	d8 f7       	brcc	.-10     	; 0x363e <memcpy_P+0x6>
    3648:	08 95       	ret

0000364a <memcpy>:
    364a:	fb 01       	movw	r30, r22
    364c:	dc 01       	movw	r26, r24
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <memcpy+0xa>
    3650:	01 90       	ld	r0, Z+
    3652:	0d 92       	st	X+, r0
    3654:	41 50       	subi	r20, 0x01	; 1
    3656:	50 40       	sbci	r21, 0x00	; 0
    3658:	d8 f7       	brcc	.-10     	; 0x3650 <memcpy+0x6>
    365a:	08 95       	ret

0000365c <_exit>:
    365c:	f8 94       	cli

0000365e <__stop_program>:
    365e:	ff cf       	rjmp	.-2      	; 0x365e <__stop_program>
