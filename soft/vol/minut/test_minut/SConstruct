project_name = 'test_minut'


test_minut	= [
	'test_minut.c',		\
	'../minut.c',		\
	'stubs.c',		\
]

import os

libs = ['test', ]
libpath = [os.environ['TROLL_PROJECTS'] + '/test', ]

SConscript([os.environ['TROLL_PROJECTS'] + '/test/SConscript', ])

optimize        = '-O0 -fshort-enums '
includes	= [	'.', \
			os.environ['TROLL_PROJECTS'] + '/nanoK', \
			os.environ['TROLL_PROJECTS'] + '/scalp', \
			os.environ['TROLL_PROJECTS'] + '/test', \
		]
cflags		= '-g -Wall --std=c99 ' + optimize
ldflags		= '-g -Wall ' + optimize + ' -Wl,-Map,test_minut.map,--cref'
ldflags		= '-g -Wall ' + optimize + ' -Wl,-Map,' + project_name + '.map,--cref'

env = Environment(
	CC = 'gcc',		\
	AR = 'ar',		\
	CFLAGS = cflags,	\
	CPPPATH = includes,	\
	LINKFLAGS = ldflags,	\
)

default = env.Program(project_name, test_minut, LIBS = libs, LIBPATH = libpath)
env.Default(default)


# run test
env.Alias('run', '', './' + project_name)
env.AlwaysBuild('run')


# debug
env.Alias('debug', '', 'gdb ' + project_name)
env.AlwaysBuild('debug')


# suppress reliquat files
env.Alias('clean', '', 'rm -f *~ *o */*.o *.a')
env.AlwaysBuild('clean')

