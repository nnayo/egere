project_name = 'minut'


minut	= [
	'main.c',		\
	'minut.c',		\
	'servo.c',		\
	'mpu6050.c',	\
	'tk-off.c',		\
]

import os

libs = ['scalp', 'nanoK']
libpath = [os.environ['TROLL_PROJECTS'] + '/scalp', os.environ['TROLL_PROJECTS'] + '/nanoK']

mcu_target      = 'atmega328p'
optimize        = '-Os -mcall-prologues -fshort-enums -std=c99 '
#optimize        = '-Os -mcall-prologues -fshort-enums '
includes	= [
				'.',
				os.environ['TROLL_PROJECTS'] + '/nanoK',
				os.environ['TROLL_PROJECTS'] + '/scalp',
				'/home/yog/TRoll/projects/simavr/simavr/sim/avr',
			]
cflags		= '-g -Wall ' + optimize + '-mmcu=' + mcu_target
ldflags		= '-g -Wall ' + optimize + '-mmcu=' + mcu_target + ' -Wl,-Map,' + project_name + '.map,--cref '
ldflags		+= '-Wl,--undefined=_mmcu,--section-start=.mmcu=0x8000'


builder_hex = Builder(
	action = Action(
		"avr-objcopy -O ihex -R .eeprom -R .mmcu $SOURCE $TARGET", cmdstr = "$HEXCOMSTR"), 
		suffix = ".hex", 
		src_suffix = ".elf"
)

env = Environment(
	CC = 'avr-gcc',		\
	AR = 'avr-ar',		\
	CFLAGS = cflags,	\
	CPPPATH = includes,	\
	LINKFLAGS = ldflags,	\
)

env.Append( BUILDERS = { 'Hex': builder_hex, } )
env.Hex(project_name, project_name)

Export('env')

SConscript([os.environ['TROLL_PROJECTS'] + '/scalp/SConscript', os.environ['TROLL_PROJECTS'] + '/nanoK/SConscript'], exports='env')

elf = env.Program(project_name + '.elf', minut, LIBS = libs, LIBPATH = libpath)
env.Default(elf)

# generate a file with code and source
env.Alias('lis', project_name + '.elf', 'avr-objdump -h -S ' + project_name + '.elf > ' + project_name + '.lis')
env.AlwaysBuild('lis')


# give the size of the binary
env.Alias('size', project_name + '.elf', 'avr-size -t ' + project_name + '.elf')
env.AlwaysBuild('size')


# load binary in flash
load = env.Alias('load', project_name + '.hex', 'avrdude -V -c arduino -p ATMEGA328P -P /dev/ttyACM0 -b 57600 -U flash:w:' + project_name + '.hex')
env.AlwaysBuild(load)


# download the frames in eeprom
env.Alias('eeprom', '', 'avrdude -P usb -p ' + mcu_target + ' -c dragon_jtag -D -U eeprom:w:' + project_name + '.bin:r')
env.AlwaysBuild('eeprom')


# connect to target with a terminal
env.Alias('term', '', 'avrdude -P usb -p ' + mcu_target + ' -c dragon_jtag -t')
env.AlwaysBuild('term')


# test with simavr
run = env.Alias('run', project_name + '.elf', '~/TRoll/projects/simavr/simavr/run_avr -t -v -m ' + mcu_target + ' -f 16000000  ' + project_name + '.elf -ee minut_eeprom_frames.hex')
env.AlwaysBuild(run)


# test with simavr & avr-gdb
sim = env.Alias('sim', project_name + '.elf', '~/TRoll/projects/simavr/simavr/run_avr -g -t -v -m ' + mcu_target + ' -f 16000000  ' + project_name + '.elf -ee minut_eeprom_frames.hex')
env.AlwaysBuild(sim)
gdb = env.Alias('gdb', project_name + '.elf', 'avr-gdb -tui ' + project_name + '.elf -n -x gdbinit_avr')
env.AlwaysBuild(gdb)


# suppress reliquat files
env.Alias('clean', '', 'rm -f *~ *o */*.o *.a *.lis')
env.AlwaysBuild('clean')

